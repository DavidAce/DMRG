name: Ubuntu 22.04

on:
  pull_request:
  push:
    branches:
      - master
      - development

jobs:
  ci:
    name: ${{ matrix.compiler }}-${{ matrix.manager }}
    runs-on: ubuntu-22.04
    env:
      cache-name: cache-v3-${{ matrix.compiler }}-${{ matrix.manager }}
    strategy:
      fail-fast: false # True stops all on first error. Stick to false when debugging
      matrix:
        include:
          - { compiler: gcc,   manager: cmake }
          - { compiler: gcc,   manager: conan }
          - { compiler: clang, manager: conan }


    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Setup caches
        id: dmrg-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.conan/data
            ~/pkg-install
            ~/.ccache
          key: ${{ env.cache-name }}

      - run: sudo apt update  # Only for Docker jobs

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.cache-name }}
          max-size: 1000M

      - name: Setup gcc
        if: matrix.compiler == 'gcc'
        run: |
          sudo apt install gcc-12 g++-12 -y
          echo "FC=gfortran-12" >> $GITHUB_ENV
          echo "CC=gcc-12"      >> $GITHUB_ENV
          echo "CXX=g++-12"     >> $GITHUB_ENV

      - name: Setup clang
        if: matrix.compiler == 'clang'
        run: |
          sudo apt install clang-15 libomp-15-dev -y
          echo "FC=gfortran-12" >> $GITHUB_ENV
          echo "CC=clang-15"    >> $GITHUB_ENV
          echo "CXX=clang++-15" >> $GITHUB_ENV

      - name: Setup apt packages
        run: |
          sudo apt install ninja-build mold gcovr lcov gfortran-12 libgfortran-12-dev libstdc++-12-dev libdw-dev -y
          sudo apt install libopenblas-dev liblapack-dev liblapacke-dev libopenmpi-dev openmpi-bin autopoint -y

      - name: Install Python Requirements
        run: |
          pip install -r requirements.txt
          pip install -r docs/requirements.txt

      - name: Install conan
        if: matrix.manager == 'conan'
        run: |
          pip install conan
          conan profile detect --force
          conan remote add conan-dmrg https://neumann.theophys.kth.se/artifactory/api/conan/conan-dmrg --force

      - name: Setup OpenBLAS core type
        run: echo "OPENBLAS_CORETYPE=NEHALEM" >> $GITHUB_ENV

      - name: Run CMakePreset
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'github-actions-${{ matrix.manager }}'
          configurePresetAdditionalArgs: "['-DCMAKE_INSTALL_PREFIX=~/pkg-install']"
          buildPreset: 'github-actions-${{ matrix.manager }}'
          testPreset: 'github-actions-${{ matrix.manager }}'

      - name: Coverage
        if: matrix.compiler == 'gcc' && matrix.manager == 'cmake'
        run: |
          # Create lcov report
          lcov --gcov-tool=gcov-12 --capture --directory build/github-actions-${{ matrix.manager }} --output-file coverage.info
          lcov --gcov-tool=gcov-12 --remove coverage.info '*/pkg-install*' '*/test-*' '/usr/*' '*include/fmt/*' '*include/spdlog/*' '*/Eigen/*' '*/hdf5/*' '*catch.hpp' --output-file coverage.info # filter system-files
          lcov --gcov-tool=gcov-12 --list coverage.info # debug info
          # Upload report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"




