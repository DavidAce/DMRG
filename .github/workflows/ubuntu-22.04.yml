name: Ubuntu 22.04

on:
  pull_request:
  push:
    branches:
      - master
      - development

jobs:
  ci:
    name: ${{ matrix.compiler }}-${{ matrix.linkage }}-${{ matrix.manager }}
    runs-on: ubuntu-22.04
    env:
      cache-name: cache-v1-${{ matrix.compiler }}-${{ matrix.linkage }}-${{ matrix.manager }}
    strategy:
      fail-fast: false # True stops all on first error. Stick to false when debugging
      matrix:
        include:
          - { compiler: gcc,   manager: cmake}
          - { compiler: gcc,   manager: conan }
          - { compiler: clang, manager: conan }


    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        if: contains(matrix.manager, 'conan')
        with:
          python-version: '3.x'

      - name: Setup caches
        id: dmrg-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.conan/data
            ~/pkg-install
            ~/.ccache
          key: ${{ env.cache-name }}

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.cache-name }}
          max-size: 1000M


      - name: Setup gcc # compilers are already installed on the CI
        if: matrix.compiler == 'gcc'
        run: |
          sudo apt-get install gcc-10 g++-10 gfortran -y
          echo "FC=gfortran" >> $GITHUB_ENV
          echo "CC=gcc-10"   >> $GITHUB_ENV
          echo "CXX=g++-10"  >> $GITHUB_ENV

      - name: Setup clang
        if: matrix.compiler == 'clang' # compilers are already installed on the CI # sudo apt-get install libclang-10-dev gfortran -y
        run: |
          echo "FC=gfortran"     >> $GITHUB_ENV
          echo "CC=clang-10"     >> $GITHUB_ENV
          echo "CXX=clang++-10"  >> $GITHUB_ENV

      - name: Setup apt packages common
        run: sudo apt install  ninja-build mold -y

      - name: Setup apt packages
        run: sudo apt install gcovr -y

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Install Python Requirements
        run: |
          pip install -r requirements.txt
          pip install -r docs/requirements.txt

      - name: Install conan
        if: matrix.manager == 'conan'
        run: |
          pip install conan
          conan user
          conan remote add conan-dmrg https://neumann.theophys.kth.se.org/artifactory/api/conan/conan-dmrg --insert

      - name: Setup OpenBLAS core type
        run: echo "OPENBLAS_CORETYPE=NEHALEM" >> $GITHUB_ENV

        # For conan: ceres-solver must be compiled in release mode because it only works with glog in release mode
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DDMRG_PACKAGE_MANAGER=${{ matrix.manager }} -DCMAKE_INSTALL_PREFIX=~/pkg-install --preset=github-actions-${{ matrix.manager }}
          cmake --build --preset=github-actions-${{ matrix.manager }}

      - name: Test
        run: |
          ctest --extra-verbose --preset=github-actions

      - name: Coverage
        if: matrix.compiler == 'gcc' && matrix.manager == 'cmake'
        run: |
          # Create lcov report
          lcov --capture --directory build/Debug --output-file coverage.info
          lcov --remove coverage.info '*/pkg-install*' '*/test-*' '/usr/*' '*include/fmt/*' '*include/spdlog/*' '*/Eigen/*' '*/hdf5/*' '*catch.hpp' --output-file coverage.info # filter system-files
          lcov --list coverage.info # debug info
          # Upload report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"




