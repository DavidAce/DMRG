name: C/C++ CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - multisite_dmrg
#      - master

# INSPIRATION https://github.com/onqtam/doctest/pull/285/files/875052e18cf5f5f0b9176e59f847b6205f3efb78#
jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: "CodeBlocks - Unix Makefiles"
      FC: gfortran

    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [ubuntu-18.04-gcc-8,ubuntu-18.04-gcc-9,ubuntu-18.04-clang-8,ubuntu-18.04-clang-9, ubuntu-18.04-clang-9-conda] # windows-2019-clang,windows-2019-gcc
        include:
          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"
            flags: --download-missing --enable-tests  -a haswell  --build-type=Debug
            apt: gcc-8 g++-8 gfortran-8 libsz2 zlibc libopenblas-dev libarpack2-dev libarpack++2-dev liblapacke-dev libhdf5-dev libspdlog-dev libgflags-dev libgoogle-glog-dev libceres-dev libunwind-dev lzma libaec-dev
          
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            sources: conda conan
            conda: conan spdlog hdf5 hdf5-static eigen arpack arpackpp openblas ceres-solver
            flags: --download-missing --prefer-conda --download-method=conan --enable-tests  -a haswell  -j 2 --build-type=Debug
            
          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"
            flags: --download-missing --enable-tests  -a haswell  --build-type=Debug


          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            flags: --download-missing --enable-tests  -a haswell  --build-type=Debug

          - name: ubuntu-18.04-clang-9-conda
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            sources: conda
            conda: hdf5 hdf5-static eigen spdlog
            flags: --download-missing --enable-tests  -a haswell  --build-type=Debug
          
          
          #- name: windows-2019-clang
          #  os: windows-2019
          #  compiler: clang

          #- name: windows-2019-gcc
          #  os: windows-2019
          #  compiler: gcc  
    steps:
      - uses: actions/checkout@v1
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi
          sudo apt-get update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib gfortran ${{ matrix.apt }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib gfortran ${{ matrix.apt }}
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi
          echo "::set-env name=FC::gfortran"

          if [[ "${{ matrix.sources }}" == *"conda"* ]]; then
            wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
            chmod +x miniconda.sh
            ./miniconda.sh -b -p $HOME/miniconda
            export PATH=$HOME/miniconda/bin:$PATH
            conda update --yes conda
            conda config --add channels conda-forge
            conda install --yes ${{ matrix.conda }}
          fi
          if [ "${{ matrix.sources }}" = *"conan"* ] ; then
            conan user
            conan remote add conan-dmrg https://api.bintray.com/conan/davidace/conan-dmrg 
          fi
      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install ninja --global
          if ("${{ matrix.compiler }}".StartsWith("clang")) {
            scoop install llvm --global
          }
          if ("${{ matrix.compiler }}" -eq "gcc") {
            # Chocolatey GCC is broken on the windows-2019 image.
            # See: https://github.com/DaanDeMeyer/doctest/runs/231595515
            # See: https://github.community/t5/GitHub-Actions/Something-is-wrong-with-the-chocolatey-installed-version-of-gcc/td-p/32413
            scoop install gcc --global
            echo "::set-env name=CC::gcc"
            echo "::set-env name=CXX::g++"
          } elseif ("${{ matrix.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          }
          # Scoop modifies the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"
      - name: Build
        run: | 
          ./build.sh ${{ matrix.flags }}
      - name: Test
        run: |
          cd build/Debug
          ctest


