
//Common parameters for the model Hamiltonian
model::model_type                         = lbit                             /*!< Choice of model: {ising_tf_rf,ising_sdual,lbit} */
model::model_size                         = 24                               /*!< Number of sites on the chain. Only relevant for finite algorithms: fDMRG and xDMRG */


//Console settings
console::loglevel                         = 2                                 /*!< Verbosity [0-6]. Level 0 prints everything, 6 nothing. Level 2 or 3 is recommended for normal use */
console::logh5pp                          = 2                                 /*!< Verbosity of h5pp library [0-6] Level 2 or 3 is recommended for normal use */
console::timestamp                        = true                              /*!< (NOT IMPLEMENTED) Whether to put a timestamp on console outputs */

// Parameters for Multithreading
threading::stl_threads                    = 2                                 /*!< Number of threads for openmp threads used in blas/lapack and Eigen. num_threads <= 0 will try to use as many as possible */
threading::omp_threads                    = 2                                 /*!< Number of threads for c++11 threading. Used in Eigen::Tensor. stl_threads <= 0 will try to use as many as possible */


//Parameters to control timers.
timer::on                                 = true                                  /*!< If true, turns on timers. These will be shown on console. */
timer::precision                          = 5                                     /*!< Sets precision (number of decimals) of time output. */
timer::level                              = normal                                /*!< How much detail to print on exit [normal | detail | pedant]  */


// Input parameters (note that CLI parameters overrwide these)
input::seed                               = 1                                 /*!< Main seed for the random number generator. */
input::bitfield                           = -1                                /*!< Number whose bitfield represents the initial product state in the basis given by initial_parity_sector. Only positive state numbers are used */


//Parameters for saving data to hdf5
storage::output_filepath                   = ../output/mbl.h5                  /*!< Path of the output HDF5 file relative to the execution point  */
storage::save_timers                       = true                              /*!< Whether to save timer information to file. (only enabled on storage level NORMAL and FULL.) */
storage::savepoint_keep_newest_only        = true                              /*!< If true, a savepoint will overwrite previous savepoints on file. Otherwise, all iterations are kept (dramaticallay increases file size) */
storage::savepoint_frequency               = 0                                 /*!< How often, in units of iterations, to make a savepoint. 0 disables savepoints after iterations (chi-update savepoints can still happen) */
storage::checkpoint_keep_newest_only       = false                             /*!< If true, a checkpoint will overwrite previous checkpoint on file. Otherwise, all iterations are kept (dramaticallay increases file size) */
storage::checkpoint_when_chi_updates       = false                             /*!< If true, a checkpoint is written to file before the bond dimension is updated */
storage::checkpoint_frequency              = 1                                 /*!< How often, in units of iterations, to make a checkpoint. 0 disables checkpoints but chi-update checkpoints can still happen */
storage::use_temp_dir                      = true                              /*!< If true uses a temporary directory for writes in the local drive (usually /tmp) and copies the results afterwards */
storage::copy_from_temp_freq               = 25                                /*!< How often, in units of iterations, to copy the hdf5 file in tmp dir to target destination */
storage::temp_dir                          = /tmp                              /*!< Local temp directory on the local system. If it does not exist we default to /scratch/local or /tmp instead (or whatever is the default) */
storage::compression_level                 = 8                                 /*!< GZip compression level in HDF5. Choose between [0-9] (0 = off, 9 = max compression) */
storage::file_collision_policy             = REVIVE                            /*!< What to do when a prior output file is found. Choose between RESUME, BACKUP, RENAME, REPLACE */
storage::file_resume_policy                = FAST                              /*!< Depends on dataset [common/finished_all=bool] FULL: Ignore bool -> Scan .cfg to add missing items. FAST: exit if true. */



// Storage Levels.
// NOTE 1: A simulation can only be resumed from FULL storage.
// NOTE 2: storage_level_model == NORMAL is enough to recreate MPOs when resuming, since they can be reconstructed from the Hamiltonian parameter table
//      NONE:   no data is saved at all
//      LIGHT:  Mainly table entries. Hamiltonian, measurements (energy/entropy etc), simulation status and profiling (if save_timers == true)
//      NORMAL: Same as LIGHT + whole chain schmidt values (lambda-matrices)
//      FULL:   Same as NORMAL + MPS (A/B matrices) + MPO at each site.
storage::storage_level_model               = NORMAL                           /*!< Storage level for the model realization. LIGHT stores nothing. NORMAL stores the Hamiltonian parameter table, and FULL also the MPOs */
storage::storage_level_savepoint           = NONE                             /*!< Storage level for savepoints, which are snapshots taken at each iteration or snapshot taken at the end of each iteration */
storage::storage_level_checkpoint          = LIGHT                            /*!< Storage level for checkpoints, which are mid-simulation measurements (can also be used for resume if FULL) */
storage::storage_level_finished            = NONE                             /*!< Storage level for final results written when a simulation terminates successfully */
storage::storage_level_proj_state          = NONE                             /*!< Storage level for the parity projected states, a projected version of the state written when a simulation terminates */
storage::storage_level_init_state          = NONE                             /*!< Storage level for the initial states (for instance when launching a simulation or starting a new state) */
storage::storage_level_emin_state          = NONE                             /*!< Storage level for the minimum energy state (ground state) */
storage::storage_level_emax_state          = NONE                             /*!< Storage level for the maximum energy state */
storage::storage_level_fes_states         =  LIGHT                            /*!< Storage level for finite entanglement scaling analysis after a simulation has finished. */



// Options for strategy that affect convergence and targeted state
strategy::krylov_opt_when_stuck           = false                             /*!< Try finding the SM eigenpair of (H-E/L)Â² using arpack when stuck (takes longer, but gives good results) */
strategy::chi_quench_when_stuck           = false                             /*!< Reduce chi for a few iterations when stuck and increasing bond dimension would not help */
strategy::perturb_when_stuck              = false                             /*!< Perturb MPO parameters to get unstuck from local minima */
strategy::damping_when_stuck              = false                             /*!< Dampen MPO parameters by reducing disorder, to get unstuck from local minima */
strategy::expand_subspace_when_stuck      = false                             /*!< Use subspace expansion when stuck in local minima. alpha == lowest_variance */
strategy::expand_on_saturation            = 0                                 /*!< Expand to H|psi> every nth iteration when stuck. (0 = turn off) */
strategy::project_on_saturation           = 5                                 /*!< Project to target parity sector every nth iteration when saturated. (0 = turn off) */
strategy::project_on_every_iter           = 0                                 /*!< Project to target parity sector at the end of every iteration. This implies doing it when saturated also. */
strategy::project_on_chi_update           = false                             /*!< Project to target parity sector when bond dimension is increased (only works if chi_grow == true). */
strategy::project_initial_state           = false                             /*!< Project to target parity sector when initializing a state. */
strategy::randomize_on_chi_update         = false                             /*!< Randomize MPS by flipping random spins when growing chi */
strategy::randomize_early                 = false                             /*!< Randomize MPS by flipping random spins before fully converging the first attempt (because the initial product state guess is biased to low entanglement) */
strategy::use_eigenspinors                = true                              /*!< Use random pauli-matrix eigenvectors when initializing each mps site along x,y or z  */
strategy::max_resets                      = 1                                 /*!< Maximum number of resets to initial state. One must be allowed for initialization*/
strategy::max_stuck_iters                 = 5                                 /*!< If stuck for this many iterations -> stop. */
strategy::max_saturation_iters            = 5                                 /*!< If either variance or entanglement saturated this long -> algorithm saturated = true */
strategy::min_saturation_iters            = 1                                 /*!< Saturated at least this many iterations before stopping */
strategy::min_converged_iters             = 2                                 /*!< Converged at least this many iterations before success */
strategy::max_expansion_alpha             = 1e-4                              /*!< Maximum value of alpha used in subspace expansion */
strategy::multisite_mps_size_def          = 2                                 /*!< Default number of sites in a multisite mps. More than ~8 is very expensive */
strategy::multisite_mps_size_max          = 4                                 /*!< Maximum number of sites in a multisite mps (used when stuck). More than ~8 is very expensive */
strategy::multisite_mps_step              = MID                               /*!< How many sites to move after a multi-site dmrg step, choose between {ONE, MID, MAX} */
strategy::target_sector                   = +z                                /*!< Find an eigenstate in this parity sector. Choose between {x,+x,-x, y, +y,-y, z,+z,-z, randomAxis,random,none}  */
strategy::initial_type                    = REAL                              /*!< Initial state can be REAL/CPLX */
strategy::initial_state                   = PRODUCT_STATE_NEEL                /*!< Initial configuration for the spin chain (only for finite systems)  */
strategy::secondary_states                = PRODUCT_STATE_NEEL                /*!< Spin configuration for subsequent states (only for finite systems)  */



//Parmaters that control MPS, eigensolver and SVD precision
precision::eig_max_iter                    = 2000                             /*!< Maximum number of steps for eigenvalue solver. */
precision::eig_tolerance                   = 1e-14                            /*!< Precision tolerance for halting the eigenvalue solver. */
precision::eig_default_ncv                 = 32                               /*!< Parameter controlling the krylov/column space of the Arnoldi eigenvalue solver */
precision::svd_threshold                   = 1e-8                             /*!< Minimum threshold value for keeping singular values. */
precision::svd_switchsize_bdc              = 16                               /*!< Linear size of a matrix, below which SVD will use slower but more precise JacobiSVD instead (default is 16, good could be ~64) */
precision::max_grad_tolerance              = 1e-0                             /*!< Keep running an opimization step (LBFGS/Arnoldi/GD+k) until max(âlog10(Var H)) < max_grad_tolerance */
precision::use_compressed_mpo_squared_all  = false                            /*!< Use SVD to compress the bond dimensions of all HÂ² mpos at the end of an iteration */
precision::use_compressed_mpo_squared_otf  = true                             /*!< Use SVD to compress the bond dimensions of the multisite HÂ² mpo on-the-fly, just before an optimization step  */
precision::use_reduced_mpo_energy          = true                             /*!< Whether to subtract E/L from ALL mpos to avoid catastrophic cancellation when computing the variance */
precision::variance_convergence_threshold  = 1e-12                            /*!< Variance convergence threshold. The MPS state is considered good enough when its variance reaches below this value */
precision::variance_saturation_sensitivity = 1e-2                             /*!< Energy variance saturates when it stops changing. This sets the sensitivity to change. Good values are 1e-1 to 1e-4   */
precision::entropy_saturation_sensitivity  = 1e-4                             /*!< Entanglement entropy saturates when it stops changing. This sets the sensitivity to change. Good values are 1e-3 to 1e-8   */
precision::target_subspace_error           = 1e-10                            /*!< The target subspace error 1-Î£|<Î¸_i|Î¸>|Â². Eigenvectors are found until reaching this value. Measures whether the incomplete basis of eigenstates spans the current state. */
precision::max_subspace_size               = 512                              /*!< Maximum number of candidate eigenstates to keep for a subspace-optimization step */
precision::max_size_full_diag              = 1600                             /*!< Maximum linear size allowed for full diagonalization of the local hamiltonian matrix. Use 0 to allow any value */
precision::max_size_part_diag              = 4096                             /*!< Maximum linear size allowed for partial diagonalization of the local hamiltonian matrix. Use 0 to allow any value */
precision::max_size_direct                 = 1180000                          /*!< Maximum linear size for direct multisite dmrg. If the linear size is larger than this, the algorithm prefers 2-site dmrg. */
precision::max_norm_error                  = 1e-10                            /*!< Maximum norm deviation from unity during integrity checks */


//Parameters for the transvese-field next-nearest neighbor Ising model with a random field
model::ising_tf_rf::J1                    = 1.0                               /*!< Ferromagnetic coupling for nearest neighbors.*/
model::ising_tf_rf::J2                    = 0.0                               /*!< Ferromagnetic coupling for next-nearest neighbors.*/
model::ising_tf_rf::h_tran                = 1.0                               /*!< Transverse field strength */
model::ising_tf_rf::h_mean                = 0.0                               /*!< Random field mean of distribution */
model::ising_tf_rf::h_stdv                = 0.0                               /*!< Random field standard deviation. In distribution this is N(h_mean,h_stdv) or U(h_mean-h_stdv,h_mean+h_stdv) */
model::ising_tf_rf::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_tf_rf::distribution          = normal                            /*!< Random distribution for couplings and fields */


//Parameters for the selfdual transverse-field random-field next-nearest neighbor Ising model
model::ising_sdual::J_stdv                = 1.0                               /*!< Standard deviation for the log-normal distribution defining ferromagnetic coupling */
model::ising_sdual::h_stdv                = 1.0                               /*!< Standard deviation for the log-normal distribution defining transverse magnetic field */
model::ising_sdual::lambda                = 0.0                               /*!< Lambda parameter */
model::ising_sdual::delta                 = 0.0                               /*!< Delta defined as log(J_mean) - log(h_mean). We get J_mean and h_mean by fixing max(J_mean,h_mean) = 1 */
model::ising_sdual::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_sdual::parity_sep            = false                             /*!< Separation of +-X parity sectors */
model::ising_sdual::distribution          = lognormal                         /*!< Random distribution for couplings and fields */

//Parameters for the l-bit hamiltonian
model::lbit::J1_mean                      = 0.00                              /*!< Constant offset for on-site */
model::lbit::J2_mean                      = 0.00                              /*!< Constant offset for two-body interaction */
model::lbit::J3_mean                      = 0.00                              /*!< Constant offset for three-body interaction */
model::lbit::J1_wdth                      = 1.00                              /*!< Width of the uniform box distribution U(-w1,w1) for on-site interactions */
model::lbit::J2_wdth                      = 0.25                              /*!< Width of the uniform box distribution U(-w2,w2) for two-body interaction */
model::lbit::J3_wdth                      = 0.10                              /*!< Width of the uniform box distribution U(-w3,w3) for three-body interaction */
model::lbit::J2_xcls                      = 1                                 /*!< Exp. decay rate of two-body interactions: exp(-|i-j|/J2_xcls) * J2_rand */
model::lbit::J2_span                      = -1                                /*!< Maximum allowed range for pairwise interactions, |i-j| <= J2_span. Use -1 for infinite. Note that J2_span + 1 MPOs are used */
model::lbit::f_mixer                      = 0.25                              /*!< Mixing factor for unitary transformation to real-space */
model::lbit::u_layer                      = 4                                 /*!< Number of unitary 2-site layers which transform lbit <-> real spaces */
model::lbit::spin_dim                     = 2                                 /*!< Spin dimension */
model::lbit::distribution                 = normal                            /*!< Random distribution for interaction strengths */


// Settings for the infinite DMRG algorithm
idmrg::on                                 = false                             /*!< Turns iDMRG simulation on/off. */
idmrg::max_iters                          = 500                               /*!< Number of iterations. */
idmrg::chi_lim_max                        = 64                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
idmrg::chi_lim_grow                       = ON_SATURATION                     /*!< How to increase the bond dimension limit. Choose OFF, ON_SATURATION or ON_ITERATION. */
idmrg::chi_lim_grow_factor                = 1.5                               /*!< Factor by which to grow the bond dimension limit. Must be larger than 1 */
idmrg::chi_lim_init                       = 8                                 /*!< Initial chi limit. Only used when chi_grow == true. */
idmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of steps (0 = off). */

// Settings for the imaginary-time infinite TEBD algorithm
itebd::on                                 = false                             /*!< Turns iTEBD simulation on/off. */
itebd::max_iters                          = 50                                /*!< Number of iTEBD iterations, after which the simulation terminates regardless of convergence. Set high. */
itebd::time_step_init_real                = 0.1                               /*!< Real part of initial time step delta_t */
itebd::time_step_init_imag                = 0.0                               /*!< Imag part of initial time step delta_t */
itebd::time_step_min                      = 0.0001                            /*!< (Absolute value) Minimum and final time step for iTEBD time evolution. */
itebd::suzuki_order                       = 4                                 /*!< Order of the suzuki trotter decomposition (1,2 or 4) */
itebd::chi_lim_max                        = 16                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
itebd::chi_lim_grow                       = ON_SATURATION                     /*!< How to increase the bond dimension limit. Choose OFF, ON_SATURATION or ON_ITERATION. */
itebd::chi_lim_grow_factor                = 1.25                              /*!< Factor by which to grow the bond dimension limit. Must be larger than 1 */
itebd::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
itebd::print_freq                         = 1                                 /*!< Print frequency for console output. In units of steps (0 = off). */



// Settings for the finite DMRG algorithm
fdmrg::on                                 = false                             /*!< Turns fDMRG simulation on/off. */
fdmrg::max_iters                          = 30                                /*!< Max number of iterations. One iterations moves L steps. */
fdmrg::min_iters                          = 6                                 /*!< Min number of iterations. One iterations moves L steps. */
fdmrg::chi_lim_max                        = 128                               /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
fdmrg::chi_lim_grow                       = ON_SATURATION                     /*!< How to increase the bond dimension limit. Choose OFF, ON_SATURATION or ON_ITERATION. */
fdmrg::chi_lim_grow_factor                = 1.25                              /*!< Factor by which to grow the bond dimension limit. Must be larger than 1 */
fdmrg::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
fdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off).*/
fdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */
fdmrg::run_fes_analysis                   = false                             /*!< True runs a finite entanglement scaling analysis after finishing the main algorithm */

// Settings for the finite l-bit algorithm
flbit::on                                 = true                              /*!< Turns fLBIT simulation on/off. */
flbit::max_iters                          = 500                               /*!< Max number of iterations. One iterations moves L steps. */
flbit::min_iters                          = 1                                 /*!< Min number of iterations. One iterations moves L steps. */
flbit::use_swap_gates                     = true                              /*!< Use gate swapping for pairwise long-range interactions rather then building a large multisite operator */
flbit::chi_lim_max                        = 1024                              /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
flbit::chi_lim_grow                       = OFF                               /*!< How to increase the bond dimension limit. Choose OFF, ON_SATURATION or ON_ITERATION. */
flbit::chi_lim_grow_factor                = 1.25                              /*!< Factor by which to grow the bond dimension limit. Must be larger than 1 */
flbit::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
flbit::time_start_real                    = 1e-1                              /*!< Starting time point (real) */
flbit::time_start_imag                    = 0                                 /*!< Starting time point (imag) */
flbit::time_final_real                    = 1e10                              /*!< Finishing time point (real) */
flbit::time_final_imag                    = 0                                 /*!< Finishing time point (imag) */
flbit::time_num_steps                     = 200                               /*!< Number of steps from start to finish. Start and final times are included */
flbit::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off).*/
flbit::compute_lbit_length                = true                              /*!< Calculate the characteristic length-scale of lbits */
flbit::compute_lbit_stats                 = false                             /*!< Calculate the statistics of characteristic length-scale for various u and f parameters */
flbit::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */
flbit::run_fes_analysis                   = false                             /*!< True runs a finite entanglement scaling analysis after finishing the main algorithm */

// Settings for the finite excited-state DMRG algorithm
xdmrg::on                                 = false                             /*!< Turns xDMRG simulation on/off. */
xdmrg::max_iters                          = 50                                /*!< Max number of iterations. One iterations moves L steps. */
xdmrg::min_iters                          = 10                                /*!< Min number of iterations. One iterations moves L steps. */
xdmrg::olap_iters                         = 2                                 /*!< Number of initial iterations selecting the candidate state with best overlap to the current state */
xdmrg::vsub_iters                         = 2                                 /*!< Number of iterations using the subspace optimization for variance, after overlap iterations */
xdmrg::chi_lim_max                        = 512                               /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
xdmrg::chi_lim_init                       = 8                                 /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
xdmrg::chi_lim_grow                       = ON_ITERATION                      /*!< How to increase the bond dimension limit. Choose OFF, ON_SATURATION or ON_ITERATION. */
xdmrg::chi_lim_grow_factor                = 1.5                               /*!< Factor by which to grow the bond dimension limit. Must be larger than 1 */
xdmrg::chi_lim_init                       = 4                                 /*!< Initial chi limit. Used during iter <= 1 or when chi_grow == true, or starting from an entangled state */
xdmrg::chi_lim_olap                       = 8                                 /*!< Chi limit during initial OVERLAP|SUBSPACE mode. set to <= 0 for unlimited */
xdmrg::chi_lim_vsub                       = 16                                /*!< Chi limit during initial VARIANCE|SUBSPACE mode. set to <= 0 for unlimited */
xdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations (0 = off). */
xdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */
xdmrg::energy_density_target              = 0.5                               /*!< Target energy in [0-1], where 0.5 means middle of spectrum. */
xdmrg::energy_density_window              = 0.5                               /*!< Accept states inside of energy_target +- energy_window. */
xdmrg::max_states                         = 1                                 /*!< Max number of random states to find using xDMRG on a single disorder realization */
xdmrg::finish_if_entanglm_saturated       = false                             /*!< Finish early as soon as entanglement has saturated */
xdmrg::finish_if_variance_saturated       = false                             /*!< Finish early as soon as energy variance has saturated */
xdmrg::run_fes_analysis                   = true                              /*!< True runs a finite entanglement scaling analysis after finishing the main algorithm */

