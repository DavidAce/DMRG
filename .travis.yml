sudo: false
language: cpp
notifications:
  email: false
branches:
  only:
    - master
#    - multisite_dmrg

matrix:
  fast_finish: true
  include:
    - name: "xenial gcc-7 | static | find-or-fetch"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CXX=g++-7
        - CC=gcc-7
        - FC=gfortran-7
        - FLAGS="--download-method=find-or-fetch --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-7
            - g++-7
            - gfortran-7
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial gcc-8 | static | find-or-fetch"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CXX=g++-8
        - CC=gcc-8
        - FC=gfortran-8
        - FLAGS="--download-method=find-or-fetch --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-8
            - g++-8
            - gfortran-8
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial clang-7 | static | find-or-fetch"
      dist: xenial
      os: linux
      compiler: clang
      env:
        - CXX=clang++-7
        - CC=clang-7
        - FC=gfortran-8
        - FLAGS="--download-method=find-or-fetch --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline:  'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
              key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - llvm-7-dev
            - clang-7
            - libstdc++-8-dev
            - gfortran-8
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial gcc-7 | static |  apt | find-or-fetch"
      # Note that xenial gives a TLS error "Bad symbol" when linking openblas from conda-forge
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CXX=g++-7
        - CC=gcc-7
        - FC=gfortran-7
        - FLAGS="--download-method=find-or-fetch --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-7
            - g++-7
            - gfortran-7
            - libsz2
            - zlibc
            - libopenblas-dev
            - libarpack2-dev
            - libarpack++2-dev
            - liblapacke-dev
            - libhdf5-dev
            - libspdlog-dev
            - libgflags-dev
            - libgoogle-glog-dev
            - libceres-dev
            - libunwind-dev
            - lzma
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
    - name: "bionic gcc-8 | static | apt | find-or-fetch"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CXX=g++-8
        - CC=gcc-8
        - FC=gfortran-8
        - FLAGS="--download-method=find-or-fetch --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-8
            - g++-8
            - gfortran-8
            - libsz2
            - zlibc
            - libopenblas-dev
            - libarpack2-dev
            - libarpack++2-dev
            - liblapacke-dev
            - libhdf5-dev
            - libspdlog-dev
            - libgflags-dev
            - libgoogle-glog-dev
            - libceres-dev
            - libunwind-dev
            - lzma
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "bionic gcc-7 | static | conda-forge | find-or-fetch"
      # Note that xenial gives a TLS error "Bad symbol" when linking openblas from conda-forge
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CXX=g++-7
        - CC=gcc-7
        - FC=gfortran-7
        - FLAGS="--download-method=find-or-fetch --prefer-conda --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-7
            - g++-7
            - gfortran-7
      before_install:
        # Here we just install Miniconda, which you shouldn't have to change.
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda config --add channels conda-forge
        - conda update --yes conda
        - conda install --yes spdlog hdf5 hdf5-static eigen arpack arpackpp openblas ceres-solver
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "bionic clang-7 | static | conda-forge | find-or-fetch"
      # Note that xenial gives a TLS error "Bad symbol" when linking openblas from conda-forge
      dist: bionic
      os: linux
      compiler: clang
      env:
        - FC=gfortran-8
        - FLAGS="--download-method=find-or-fetch --prefer-conda --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - libstdc++-8-dev
            - gfortran-8
      before_install:
        # Here we just install Miniconda, which you shouldn't have to change.
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda config --add channels conda-forge
        - conda update --yes conda
        - conda install --yes spdlog hdf5 hdf5-static eigen arpack arpackpp openblas ceres-solver
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
          - $HOME/miniconda

    - name: "bionic clang | shared | conda-forge | find-or-fetch"
      # Note that xenial gives a TLS error "Bad symbol" when linking openblas from conda-forge
      dist: bionic
      os: linux
      compiler: clang
      env:
        - FC=gfortran-8
        - FLAGS="--download-method=find-or-fetch --prefer-conda --enable-tests --enable-shared  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - libstdc++-8-dev
            - gfortran-8
      before_install:
        # Here we just install Miniconda, which you shouldn't have to change.
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda config --add channels conda-forge
        - conda update --yes conda
        - conda install --yes spdlog hdf5 hdf5-static eigen arpack arpackpp openblas ceres-solver
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
          - $HOME/miniconda


    - name: "bionic clang | static | conda-forge | conan"
      # Note that xenial gives a TLS error "Bad symbol" when linking openblas from conda-forge
      dist: bionic
      os: linux
      compiler: clang
      env:
        - FC=gfortran-8
        - FLAGS="--download-method=conan --prefer-conda --enable-tests  -a haswell  -j 2 --build-type=Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - libstdc++-8-dev
            - gfortran-8
      before_install:
        # Here we just install Miniconda, which you shouldn't have to change.
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda config --add channels conda-forge
        - conda update --yes conda
        # Install conan
        - conda install --yes  conan spdlog hdf5 hdf5-static eigen arpack arpackpp openblas ceres-solver
        # Automatic detection of your arch, compiler, etc.
        - conan user
        - conan remote add conan-dmrg https://api.bintray.com/conan/davidace/conan-dmrg
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
          - $HOME/miniconda
          - $HOME/.conan/data




script:
  - ./build.sh --verbose ${FLAGS}

