sudo: false
language: cpp
notifications:
  email: false
branches:
  only:
    - master
    - multisite_dmrg

matrix:
  fast_finish: true
  include:
    - name: "xenial gcc-7 | static | find-or-cmake"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CACHE_NAME=xenial-gcc-7-static-ff
        - CXX=g++-7
        - CC=gcc-7
        - FC=gfortran-7
        - FLAGS="--package-manager=find-or-cmake"
        - BUILD_TYPE="Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-7
            - g++-7
            - gfortran-7
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial gcc-8 | static | find-or-cmake"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CACHE_NAME=xenial-gcc-8-static-ff
        - CXX=g++-8
        - CC=gcc-8
        - FC=gfortran-8
        - FLAGS="--package-manager=find-or-cmake"
        - BUILD_TYPE="Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-8
            - g++-8
            - gfortran-8
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial clang-7 | static | find-or-cmake"
      dist: xenial
      os: linux
      compiler: clang
      env:
        - CACHE_NAME=xenial-clang-7-static-ff
        - CXX=clang++-7
        - CC=clang-7
        - FC=gfortran-8
        - FLAGS="--package-manager=find-or-cmake"
        - BUILD_TYPE="Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline:  'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
              key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - llvm-7-dev
            - clang-7
            - libstdc++-8-dev
            - gfortran-8
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "xenial gcc-7 | static | apt | find-or-cmake"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CACHE_NAME=xenial-gcc-7-static-apt-ff
        - CXX=g++-7
        - CC=gcc-7
        - FC=gfortran-7
        - FLAGS="--package-manager=find-or-cmake"
        - BUILD_TYPE="Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-7
            - g++-7
            - gfortran-7
            - libsz2
            - zlibc
            - libopenblas-dev
            - libarpack2-dev
            - libarpack++2-dev
            - liblapacke-dev
            - libhdf5-dev
            - libspdlog-dev
            - libgflags-dev
            - libgoogle-glog-dev
            - libceres-dev
            - libunwind-dev
            - lzma
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "bionic gcc-8 | static | apt | find-or-cmake"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CACHE_NAME=bionic-gcc-8-static-apt-ff
        - CXX=g++-8
        - CC=gcc-8
        - FC=gfortran-8
        - FLAGS="--package-manager=find-or-cmake"
        - BUILD_TYPE="Debug"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - gcc-8
            - g++-8
            - gfortran-8
            - libsz2
            - zlibc
            - libopenblas-dev
            - libarpack2-dev
            - libarpack++2-dev
            - liblapacke-dev
            - libhdf5-dev
            - libspdlog-dev
            - libgflags-dev
            - libgoogle-glog-dev
            - libceres-dev
            - libunwind-dev
            - lzma
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install

    - name: "bionic clang | static | conan"
      dist: bionic
      os: linux
      compiler: clang
      env:
        - CACHE_NAME=bionic-clang-static-conan
        - FC=gfortran-8
        - FLAGS="--package-manager=conan"
        - BUILD_TYPE="Release"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - libstdc++-8-dev
            - gfortran-8
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
          - $HOME/.conan/data

    - name: "bionic gcc-8 | static | conan"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CACHE_NAME=bionic-gcc-8-static-conan
        - CXX=g++-8
        - CC=gcc-8
        - FC=gfortran-8
        - FLAGS="--package-manager=conan"
        - BUILD_TYPE="Release"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - libstdc++-8-dev
            - gcc-8
            - g++-8
            - gfortran-8
      cache:
        pip: true
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/dmrg-deps-install
          - $HOME/.conan/data



# The pre-install script. On windows it will install conan via chocolatey
before_install:
  - echo "Starting before_install"
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      choco upgrade cmake
      if [[ "$TRAVIS_JOB_NAME" =~ conan ]]; then
        choco install python3 --version 3.7.4
        export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
        python -m pip install --upgrade pip
      fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export PATH=/Users/travis/Library/Python/2.7/bin:$PATH
    else
      pip install --user --upgrade pip
    fi
    cmake --version
  - echo "Finished before_install"


install:
  - echo "Starting install"
  - |
    if [[ "$TRAVIS_JOB_NAME" =~ conan ]]; then
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        pip install conan
        export PATH=/c/Program\ Files/Conan/conan:$PATH
      elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        pip install --user conan --upgrade
      fi
    fi
  - echo "Finished install of pip"


# Setup Build
before_script:
  # On windows PATH's do not get set properly because travis does not restart the shell, so we add them manually
  - echo "Starting before_script"
  - |
    if [[ "$TRAVIS_JOB_NAME" =~ conan ]]; then
      conan user
      conan profile new default --detect
      conan profile update settings.compiler.libcxx=libstdc++11 default
      conan remote add conan-dmrg https://api.bintray.com/conan/davidace/conan-dmrg
    fi
    if [[ "$TRAVIS_JOB_NAME" =~ conda ]] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      # Here we just install Miniconda
      wget --no-clobber https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      chmod +x miniconda.sh
      bash miniconda.sh -u -b -p $HOME/miniconda
      source "$HOME/miniconda/etc/profile.d/conda.sh"
      export PATH=$HOME/miniconda/bin:$PATH
      hash -r
      conda config --set always_yes yes --set changeps1 no
      # Useful for debugging any issues with conda
      conda info -a
      # conda update --yes conda
      # conda update -q conda
      conda config --add channels conda-forge
      conda install --yes ${CONDA_PACKAGES}
    fi
  - echo "Finished before_script"
  - cmake --version

script:
  - ./build.sh --enable-tests --verbose-cmake -a haswell  -j 2 --build-type=${BUILD_TYPE} ${FLAGS}
