<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="finite_2measure_8cpp" kind="file" language="C++">
    <compoundname>measure.cpp</compoundname>
    <includes refid="finite_2measure_8h" local="yes">measure.h</includes>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes refid="tensor_8h" local="no">math/linalg/tensor.h</includes>
    <includes refid="num_8h" local="no">math/num.h</includes>
    <includes refid="nmspc__quantum__mechanics_8h" local="no">physics/nmspc_quantum_mechanics.h</includes>
    <includes refid="class__tensors__finite_8h" local="no">tensors/class_tensors_finite.h</includes>
    <includes refid="class__edges__finite_8h" local="no">tensors/edges/class_edges_finite.h</includes>
    <includes refid="class__model__finite_8h" local="no">tensors/model/class_model_finite.h</includes>
    <includes refid="class__mps__site_8h" local="no">tensors/state/class_mps_site.h</includes>
    <includes refid="class__state__finite_8h" local="no">tensors/state/class_state_finite.h</includes>
    <includes refid="contraction_8h" local="no">tools/common/contraction.h</includes>
    <includes refid="tools_2common_2fmt_8h" local="no">tools/common/fmt.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="prof_8h" local="no">tools/common/prof.h</includes>
    <incdepgraph>
      <node id="45">
        <label>measure/state_measure_finite.h</label>
        <link refid="state__measure__finite_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>limits</label>
      </node>
      <node id="35">
        <label>tensors/class_tensors_finite.h</label>
        <link refid="class__tensors__finite_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>physics/nmspc_quantum_mechanics.h</label>
        <link refid="nmspc__quantum__mechanics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>iterator</label>
      </node>
      <node id="47">
        <label>tools/common/fmt.h</label>
        <link refid="tools_2common_2fmt_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>tools/common/contraction.h</label>
        <link refid="contraction_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>measure.h</label>
        <link refid="finite_2measure_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="43">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="31">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="49">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="48">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="30">
        <label>math/num.h</label>
        <link refid="num_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="40">
        <label>tensors/edges/class_edges_finite.h</label>
        <link refid="class__edges__finite_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>tensors/model/class_model_finite.h</label>
        <link refid="class__model__finite_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>measure/tensors_measure_finite.h</label>
        <link refid="tensors__measure__finite_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="17">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>tensors/edges/class_env_pair.h</label>
        <link refid="class__env__pair_8h"/>
      </node>
      <node id="27">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="39">
        <label>math/svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="19">
        <label>math/linalg/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>fmt/core.h</label>
      </node>
      <node id="34">
        <label>physics/class_quantum_gates.h</label>
        <link refid="class__quantum__gates_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string_view</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp</label>
        <link refid="finite_2measure_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>optional</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="21">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>tools/common/prof.h</label>
        <link refid="prof_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>array</label>
      </node>
      <node id="14">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="26">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="53">
        <label>chrono</label>
      </node>
      <node id="23">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="15">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="42">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
      <node id="44">
        <label>tensors/state/class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="8">
        <label>enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="finite_2measure_8cpp_1a09095cf40b0086f4a7eebd622c372c78" prot="public" static="no">
        <type><ref refid="classclass__state__finite_1a5d7668429213b903702461426ee3fa98" kindref="member">class_state_finite::Scalar</ref></type>
        <definition>using Scalar =  class_state_finite::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp" line="24" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-02-01.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="finite_2measure_8h" kindref="compound">measure.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tensor_8h" kindref="compound">math/linalg/tensor.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="num_8h" kindref="compound">math/num.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__quantum__mechanics_8h" kindref="compound">physics/nmspc_quantum_mechanics.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__tensors__finite_8h" kindref="compound">tensors/class_tensors_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__edges__finite_8h" kindref="compound">tensors/edges/class_edges_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__model__finite_8h" kindref="compound">tensors/model/class_model_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mps__site_8h" kindref="compound">tensors/state/class_mps_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__finite_8h" kindref="compound">tensors/state/class_state_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="contraction_8h" kindref="compound">tools/common/contraction.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_2common_2fmt_8h" kindref="compound">tools/common/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prof_8h" kindref="compound">tools/common/prof.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_textra" kindref="compound">Textra</ref>;</highlight></codeline>
<codeline lineno="24" refid="finite_2measure_8cpp_1a09095cf40b0086f4a7eebd622c372c78" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__state__finite_1a5d7668429213b903702461426ee3fa98" kindref="member">class_state_finite::Scalar</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespacetools_1_1finite_1_1measure_1a330b5fd06f76cae1b9cb5835412f343f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a330b5fd06f76cae1b9cb5835412f343f" kindref="member">tools::finite::measure::do_all_measurements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1a63bbbd41d8e7318279127528e4bee62f" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">measure::length</ref>(tensors);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">measure::energy</ref>(tensors);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>number<sp/>is<sp/>needed<sp/>for<sp/>variance<sp/>calculation!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">measure::energy_per_site</ref>(tensors);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">measure::energy_variance</ref>(tensors);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">measure::energy_variance_per_site</ref>(tensors);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="namespacetools_1_1finite_1_1measure_1a9e866387efbe9f095eb293ddab394fc9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a330b5fd06f76cae1b9cb5835412f343f" kindref="member">tools::finite::measure::do_all_measurements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ad12e5e327084d1f822ee3aaf0250bed4" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">measure::length</ref>(state);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a94d6a5a1996b06155f8e912615a25914" kindref="member">norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">measure::norm</ref>(state);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac53254bd2378dbcbc01ad85fbba9390d" kindref="member">measure::bond_dimension_current</ref>(state);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ab346029afaef5585169a1315fd8bd463" kindref="member">bond_dimension_midchain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae78241c83c7ea8018a9f93026bfd1b2e" kindref="member">measure::bond_dimension_midchain</ref>(state);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a61b25c1d9bfbd1a4c0e8d39b1df73ea7" kindref="member">bond_dimensions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">measure::bond_dimensions</ref>(state);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a28275d042dce1b2289ac153de86bcd8f" kindref="member">truncation_errors</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">measure::truncation_errors</ref>(state);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ad4d342b14748aa9b6e9238a708a2ba8f" kindref="member">measure::entanglement_entropy_current</ref>(state);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4281b69a1e44cc89734a0eaee41426a4" kindref="member">entanglement_entropy_midchain</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5da3c6001a1e7c6f3897afb3f30b3150" kindref="member">measure::entanglement_entropy_midchain</ref>(state);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4d1b40fbfc92d0be5e95e5a85104f653" kindref="member">entanglement_entropies</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">measure::entanglement_entropies</ref>(state);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a57aab10a274b471f6c9643a2ed1f66a7" kindref="member">number_entropy_current</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1aa29ff51967a40d406924198bd2b33450" kindref="member">measure::number_entropy_current</ref>(state);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a96b0a5653ccea21dce741ec707e60cb9" kindref="member">number_entropy_midchain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a485ac0c2835bcac4a71f1cb15e5e3254" kindref="member">measure::number_entropy_midchain</ref>(state);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a98e02f69ee55e46dec14ffe6b919831b" kindref="member">number_entropies</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a7b3cfd48994fe5cb94a3ecd234797b60" kindref="member">measure::number_entropies</ref>(state);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1aab4636477ed83c29baca8aa66d032efd" kindref="member">renyi_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" kindref="member">measure::renyi_entropies</ref>(state,<sp/>2);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ae0a8a139e36072047acac900a51ff0ff" kindref="member">renyi_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" kindref="member">measure::renyi_entropies</ref>(state,<sp/>3);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a58f255a1b76e105090f00e7936c1726d" kindref="member">renyi_4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" kindref="member">measure::renyi_entropies</ref>(state,<sp/>4);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a847bc6376487fe6d8a256d0ebcd37022" kindref="member">renyi_100</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" kindref="member">measure::renyi_entropies</ref>(state,<sp/>100);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a5399dafe73195f7e4f31bfe013ce0e1f" kindref="member">spin_components</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a22e2b3240464cf0e14082b7386acbe3b" kindref="member">measure::spin_components</ref>(state);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">tools::finite::measure::length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1a2821ebade96b96a7ac4a8c26d0e64b8e" kindref="member">get_length</ref>();<sp/>}</highlight></codeline>
<codeline lineno="55" refid="namespacetools_1_1finite_1_1measure_1a7cc83ca516b59c00da5a65fe9ff58132" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">tools::finite::measure::length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>();<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">tools::finite::measure::norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a94d6a5a1996b06155f8e912615a25914" kindref="member">norm</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a94d6a5a1996b06155f8e912615a25914" kindref="member">norm</ref>.value();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a012ade3589dd6a8c942cb422af20e7d8" kindref="member">is_normalized_on_all_sites</ref>())<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>know<sp/>the<sp/>all<sp/>sites<sp/>are<sp/>normalized.<sp/>We<sp/>can<sp/>check<sp/>that<sp/>the<sp/>current<sp/>position<sp/>is<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>pos<sp/>=<sp/>std::clamp(state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;(),<sp/>0l,<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Measuring<sp/>norm<sp/>using<sp/>site<sp/>{}<sp/>with<sp/>dimensions<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/>mps.dimensions());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>MM<sp/>=<sp/>mps.get_M().contract(mps.get_M().conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2}));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(MM(0));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1abce27af7c2a6688287e826aaed719491" kindref="member">is_normalized_on_non_active_sites</ref>()<sp/>and<sp/>not<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Measuring<sp/>norm<sp/>using<sp/>active<sp/>sites<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>chain;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pos<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;M<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a595a7027685bf01896f00cb0a9dbf779" kindref="member">get_M</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>M.contract(M.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1},<sp/>{0,<sp/>1}));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">Textra::array2</ref>{M.dimension(2),<sp/>M.dimension(2)});</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>chain.contract(M,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{1})).contract(M.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1},<sp/>{1,<sp/>0}));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>=<sp/>std::abs(<ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(chain).<ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">trace</ref>());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Measuring<sp/>norm<sp/>on<sp/>full<sp/>chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>chain;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;M<sp/>=<sp/>mps-&gt;get_M();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>M.contract(M.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1},<sp/>{0,<sp/>1}));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">Textra::array2</ref>{M.dimension(2),<sp/>M.dimension(2)});</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>chain.contract(M,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{1})).contract(M.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1},<sp/>{1,<sp/>0}));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>=<sp/>std::abs(<ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(chain).<ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">trace</ref>());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>-<sp/>1.0)<sp/>&gt;<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Norm<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a94d6a5a1996b06155f8e912615a25914" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a94d6a5a1996b06155f8e912615a25914" kindref="member">norm</ref>.value();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="namespacetools_1_1finite_1_1measure_1ac53254bd2378dbcbc01ad85fbba9390d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac53254bd2378dbcbc01ad85fbba9390d" kindref="member">tools::finite::measure::bond_dimension_current</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref>.value();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref><sp/>=<sp/>state.<ref refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" kindref="member">current_bond</ref>().dimension(0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afd39aa7f4670a8a873330ea8332fb369" kindref="member">bond_dimension_current</ref>.value();</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="namespacetools_1_1finite_1_1measure_1ae78241c83c7ea8018a9f93026bfd1b2e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae78241c83c7ea8018a9f93026bfd1b2e" kindref="member">tools::finite::measure::bond_dimension_midchain</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ab346029afaef5585169a1315fd8bd463" kindref="member">bond_dimension_midchain</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ab346029afaef5585169a1315fd8bd463" kindref="member">bond_dimension_midchain</ref>.value();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ab346029afaef5585169a1315fd8bd463" kindref="member">bond_dimension_midchain</ref><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" kindref="member">midchain_bond</ref>().dimension(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ab346029afaef5585169a1315fd8bd463" kindref="member">bond_dimension_midchain</ref>.value();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" refkind="member"><highlight class="normal">std::vector&lt;long&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a61b25c1d9bfbd1a4c0e8d39b1df73ea7" kindref="member">bond_dimensions</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a61b25c1d9bfbd1a4c0e8d39b1df73ea7" kindref="member">bond_dimensions</ref>.value();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.reserve(state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.emplace_back(state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.front()-&gt;get_chiL());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.emplace_back(mps-&gt;get_L().dimension(0));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())<sp/>{<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.emplace_back(mps-&gt;get_LC().dimension(0));<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.size()<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;bond_dimensions.size()<sp/>should<sp/>be<sp/>length+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a61b25c1d9bfbd1a4c0e8d39b1df73ea7" kindref="member">bond_dimensions</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a61b25c1d9bfbd1a4c0e8d39b1df73ea7" kindref="member">bond_dimensions</ref>.value();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="namespacetools_1_1finite_1_1measure_1a9c0dce46c5a4056954221dd72c614f5c" refkind="member"><highlight class="normal">std::vector&lt;long&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a9c0dce46c5a4056954221dd72c614f5c" kindref="member">tools::finite::measure::bond_dimensions_merged</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pos<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.emplace_back(state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1aa1c8e7d25613f6cb1489a7be758e4622" kindref="member">get_L</ref>().dimension(0));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/>{<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.emplace_back(state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a794ee9101351e20449072a528144d5d2" kindref="member">get_LC</ref>().dimension(0));<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.pop_back();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.erase(<ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.begin());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.pop_back();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="namespacetools_1_1finite_1_1measure_1ad4d342b14748aa9b6e9238a708a2ba8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ad4d342b14748aa9b6e9238a708a2ba8f" kindref="member">tools::finite::measure::entanglement_entropy_current</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref>.value();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_ent<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_ent&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" kindref="member">current_bond</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>SE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-LC.square().contract(LC.square().log().eval(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref><sp/>=<sp/>std::abs(SE(0));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref>.value();</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="namespacetools_1_1finite_1_1measure_1a5da3c6001a1e7c6f3897afb3f30b3150" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5da3c6001a1e7c6f3897afb3f30b3150" kindref="member">tools::finite::measure::entanglement_entropy_midchain</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4281b69a1e44cc89734a0eaee41426a4" kindref="member">entanglement_entropy_midchain</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4281b69a1e44cc89734a0eaee41426a4" kindref="member">entanglement_entropy_midchain</ref>.value();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_ent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_ent&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" kindref="member">midchain_bond</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>SE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-LC.square().contract(LC.square().log().eval(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4281b69a1e44cc89734a0eaee41426a4" kindref="member">entanglement_entropy_midchain</ref><sp/>=<sp/>std::abs(SE(0));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4281b69a1e44cc89734a0eaee41426a4" kindref="member">entanglement_entropy_midchain</ref>.value();</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">tools::finite::measure::entanglement_entropies</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4d1b40fbfc92d0be5e95e5a85104f653" kindref="member">entanglement_entropies</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4d1b40fbfc92d0be5e95e5a85104f653" kindref="member">entanglement_entropies</ref>.value();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_ent<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_ent&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.reserve(state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.emplace_back(0);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/><sp/>=<sp/>mps-&gt;get_L();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>SE<sp/>=<sp/>-L.square().contract(L.square().log().eval(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.emplace_back(std::abs(SE(0)));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;LC<sp/>=<sp/>mps-&gt;get_LC();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-LC.square().contract(LC.square().log().eval(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.emplace_back(std::abs(SE(0)));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1afa9bd56a740f6862bfcdc6b40e013f3c" kindref="member">entanglement_entropy_current</ref><sp/>=<sp/>std::abs(SE(0));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.size()<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;entanglement_entropies.size()<sp/>should<sp/>be<sp/>length+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.front()<sp/>!=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;First<sp/>entropy<sp/>should<sp/>be<sp/>0.<sp/>Got:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.front()));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.back()<sp/>!=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Last<sp/>entropy<sp/>should<sp/>be<sp/>0.<sp/>Got:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>.back()));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4d1b40fbfc92d0be5e95e5a85104f653" kindref="member">entanglement_entropies</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a4d1b40fbfc92d0be5e95e5a85104f653" kindref="member">entanglement_entropies</ref>.value();</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a69a8bed8a5349e370730204d7e630d27" kindref="member">tools::finite::measure::renyi_entropies</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>1.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">entanglement_entropies</ref>(state);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>2.0<sp/>and<sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1aab4636477ed83c29baca8aa66d032efd" kindref="member">renyi_2</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1aab4636477ed83c29baca8aa66d032efd" kindref="member">renyi_2</ref>.value();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>3.0<sp/>and<sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ae0a8a139e36072047acac900a51ff0ff" kindref="member">renyi_3</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ae0a8a139e36072047acac900a51ff0ff" kindref="member">renyi_3</ref>.value();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>4.0<sp/>and<sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a58f255a1b76e105090f00e7936c1726d" kindref="member">renyi_4</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a58f255a1b76e105090f00e7936c1726d" kindref="member">renyi_4</ref>.value();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>100.0<sp/>and<sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a847bc6376487fe6d8a256d0ebcd37022" kindref="member">renyi_100</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a847bc6376487fe6d8a256d0ebcd37022" kindref="member">renyi_100</ref>.value();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_ent<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_ent&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>renyi_q;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>renyi_q.reserve(state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())<sp/>renyi_q.emplace_back(0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>mps-&gt;get_L();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>RE;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RE<sp/>=<sp/>(1.0<sp/>/<sp/>1.0<sp/>-<sp/>q)<sp/>*<sp/>L.pow(2.0<sp/>*<sp/>q).sum().log();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renyi_q.emplace_back(std::abs(RE(0)));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;LC<sp/>=<sp/>mps-&gt;get_LC();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1.0<sp/>/<sp/>1.0<sp/>-<sp/>q)<sp/>*<sp/>LC.pow(2.0<sp/>*<sp/>q).sum().log();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renyi_q.emplace_back(std::abs(RE(0)));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renyi_q.size()<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;renyi_q.size()<sp/>should<sp/>be<sp/>length+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>2.0)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1aab4636477ed83c29baca8aa66d032efd" kindref="member">renyi_2</ref><sp/>=<sp/>renyi_q;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1aab4636477ed83c29baca8aa66d032efd" kindref="member">renyi_2</ref>.value();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>3.0)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ae0a8a139e36072047acac900a51ff0ff" kindref="member">renyi_3</ref><sp/>=<sp/>renyi_q;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1ae0a8a139e36072047acac900a51ff0ff" kindref="member">renyi_3</ref>.value();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>4.0)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a58f255a1b76e105090f00e7936c1726d" kindref="member">renyi_4</ref><sp/>=<sp/>renyi_q;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a58f255a1b76e105090f00e7936c1726d" kindref="member">renyi_4</ref>.value();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(q<sp/>==<sp/>100.0)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a847bc6376487fe6d8a256d0ebcd37022" kindref="member">renyi_100</ref><sp/>=<sp/>renyi_q;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a847bc6376487fe6d8a256d0ebcd37022" kindref="member">renyi_100</ref>.value();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renyi_q;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="namespacetools_1_1finite_1_1measure_1a22e2b3240464cf0e14082b7386acbe3b" refkind="member"><highlight class="normal">std::array&lt;double,<sp/>3&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a22e2b3240464cf0e14082b7386acbe3b" kindref="member">tools::finite::measure::spin_components</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a5399dafe73195f7e4f31bfe013ce0e1f" kindref="member">spin_components</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a5399dafe73195f7e4f31bfe013ce0e1f" kindref="member">spin_components</ref>.value();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spin_x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1a125814890137064c194f04a553c1c49d" kindref="member">qm::spinHalf::sx</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spin_y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1ac02887d9435d2dfe72ac19c75f2c2e5c" kindref="member">qm::spinHalf::sy</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spin_z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1a00fcbb67dca99ab7e75f8c3606ff5275" kindref="member">qm::spinHalf::sz</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a5399dafe73195f7e4f31bfe013ce0e1f" kindref="member">spin_components</ref><sp/>=<sp/>{spin_x,<sp/>spin_y,<sp/>spin_z};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a5399dafe73195f7e4f31bfe013ce0e1f" kindref="member">spin_components</ref>.value();</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">tools::finite::measure::spin_component</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Eigen::Matrix2cd</ref><sp/>&amp;paulimatrix)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_spn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_spn&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[mpo,<sp/>L,<sp/>R]<sp/>=<sp/><ref refid="namespaceqm_1_1mpo_1aab28c1bf9fc2265100e07a10219219b4" kindref="member">qm::mpo::pauli_mpo</ref>(paulimatrix);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;M<sp/>=<sp/>mps-&gt;get_M();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(M.dimension(2),<sp/>M.dimension(2),<sp/>mpo.dimension(1));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>L.contract(M,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{1})).contract(M.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0},<sp/>{1})).contract(mpo,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1,<sp/>3},<sp/>{0,<sp/>2,<sp/>3}));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L.dimensions()<sp/>!=<sp/>R.dimensions())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;spin_component():<sp/>L<sp/>and<sp/>R<sp/>dimension<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>spin_tmp<sp/>=<sp/>L.contract(R,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2}));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(spin_tmp(0));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spin;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="namespacetools_1_1finite_1_1measure_1a4ec5e98a46695014aa929e799d047025" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">tools::finite::measure::spin_component</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;axis)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(axis.find(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1a125814890137064c194f04a553c1c49d" kindref="member">qm::spinHalf::sx</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(axis.find(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1ac02887d9435d2dfe72ac19c75f2c2e5c" kindref="member">qm::spinHalf::sy</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(axis.find(</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1ab70288b0d3d905f3ec211b994699861d" kindref="member">measure::spin_component</ref>(state,<sp/><ref refid="namespaceqm_1_1spin_half_1a00fcbb67dca99ab7e75f8c3606ff5275" kindref="member">qm::spinHalf::sz</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>axis:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>axis);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">tools::finite::measure::truncation_errors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a28275d042dce1b2289ac153de86bcd8f" kindref="member">truncation_errors</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a28275d042dce1b2289ac153de86bcd8f" kindref="member">truncation_errors</ref>.value();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">has_center_point</ref>())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(mps-&gt;get_truncation_error());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(mps-&gt;get_truncation_error_LC());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.size()<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;truncation_errors.size()<sp/>should<sp/>be<sp/>length+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a28275d042dce1b2289ac153de86bcd8f" kindref="member">truncation_errors</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>.<ref refid="structstate__measure__finite_1a28275d042dce1b2289ac153de86bcd8f" kindref="member">truncation_errors</ref>.value();</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="namespacetools_1_1finite_1_1measure_1afbe0edbbd25ac2538b123909edcf4cfa" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1afbe0edbbd25ac2538b123909edcf4cfa" kindref="member">tools::finite::measure::truncation_errors_active</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(site);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(mps.get_truncation_error());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps.isCenter())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(mps.get_truncation_error_LC());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="namespacetools_1_1finite_1_1measure_1a6b0ef492a7f7af947258638f60e9a08b" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a6b0ef492a7f7af947258638f60e9a08b" kindref="member">tools::finite::measure::mps_wavefn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>chain(1,<sp/>1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>chain.setConstant(1.0);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;chain&quot;<sp/>is<sp/>a<sp/>matrix<sp/>whose<sp/>0<sp/>index<sp/>keeps<sp/>growing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>site<sp/>that<sp/>passes,<sp/>it<sp/>grows<sp/>by<sp/>GA.dimension(0)<sp/>=<sp/>phys<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Say<sp/>the<sp/>state<sp/>is<sp/>a<sp/>16x7<sp/>matrix<sp/>(having<sp/>contracted<sp/>4<sp/>particles,<sp/>and<sp/>the<sp/>latest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chi<sp/>was<sp/>7).<sp/>Then<sp/>contracting<sp/>the<sp/>next<sp/>site,<sp/>with<sp/>dimensions<sp/>2x7x9<sp/>will<sp/>get<sp/>you<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16x2x9<sp/>tensor.<sp/>Now<sp/>the<sp/>reshaping<sp/>convert<sp/>it<sp/>into<sp/>a<sp/>32<sp/>x<sp/>9<sp/>matrix.<sp/>Because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen<sp/>is<sp/>column<sp/>major,<sp/>the<sp/>doubling<sp/>16-&gt;32<sp/>will<sp/>stack<sp/>the<sp/>third<sp/>index<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>mps-&gt;spin_dim();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dimR<sp/>=<sp/>mps-&gt;get_chiR();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dimL<sp/>=<sp/>chain.dimension(0);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>chain.contract(mps-&gt;get_M(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>({1},<sp/>{1})).reshape(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">array2</ref>{dimL<sp/>*<sp/>dim0,<sp/>dimR});</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain<sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>mps_chain<sp/><sp/>=<sp/>chain.reshape(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">array1</ref>{chain.dimension(0)});</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm_chain<sp/>=<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(chain).norm();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(norm_chain<sp/>-<sp/>1.0)<sp/>&gt;<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Norm<sp/>far<sp/>from<sp/>unity:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>norm_chain);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Norm<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">std::to_string</ref>(norm_chain));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mps_chain;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="327" refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>and<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1a9b2fb03c803ebc53e2aff2e625500094" kindref="member">energy_minus_energy_reduced</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1a9b2fb03c803ebc53e2aff2e625500094" kindref="member">energy_minus_energy_reduced</ref>.value();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;state_or_mps_type,<sp/>class_state_finite&gt;)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespacenum_1a4c6e701a261f472aceb489c1e81b0320" kindref="member">num::all_equal</ref>(state.active_sites,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>))</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>compute<sp/>energy:<sp/>active<sp/>sites<sp/>are<sp/>not<sp/>equal:<sp/>state<sp/>{}<sp/>|<sp/>model<sp/>{}<sp/>|<sp/>edges<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.active_sites,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state.get_multisite_mps(),<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_multisite_mpo();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;env<sp/>=<sp/>edges.<ref refid="classclass__edges__finite_1a8d8cdfb8e87717d81193100ade30eb0a" kindref="member">get_multisite_ene_blk</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Measuring<sp/>energy:<sp/>state<sp/>dims<sp/>{}<sp/>|<sp/>model<sp/>sites<sp/>{}<sp/>dims<sp/>{}<sp/>|<sp/>edges<sp/>sites<sp/>{}<sp/>dims<sp/>[L{}<sp/>R{}]&quot;</highlight><highlight class="normal">,<sp/>state.dimensions(),<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.dimensions(),<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>,<sp/>env.L.dimensions(),<sp/>env.R.dimensions());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>t_ene<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_ene&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_minus_ered<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1contraction_1a1e8f81ca5a112ae2193d82a403a141a5" kindref="member">tools::common::contraction::expectation_value</ref>(state,<sp/>mpo,<sp/>env.L,<sp/>env.R);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1a9b2fb03c803ebc53e2aff2e625500094" kindref="member">energy_minus_energy_reduced</ref><sp/>=<sp/>e_minus_ered;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_minus_ered;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="353" refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>and<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref>.value();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>measures<sp/>the<sp/>actual<sp/>energy<sp/>of<sp/>the<sp/>system<sp/>regardless<sp/>of<sp/>the<sp/>reduced/non-reduced<sp/>state<sp/>of<sp/>the<sp/>MPO&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>they<sp/>are<sp/>reduced,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>&quot;Actual<sp/>energy&quot;<sp/>=<sp/>(E<sp/>-<sp/>E_reduced)<sp/>+<sp/>E_reduced<sp/>=<sp/>(~0)<sp/>+<sp/>E_reduced<sp/>=<sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>&quot;Actual<sp/>energy&quot;<sp/>=<sp/>(E<sp/>-<sp/>E_reduced)<sp/>+<sp/>E_reduced<sp/>=<sp/>E<sp/><sp/>+<sp/>0<sp/>=<sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;state_or_mps_type,<sp/>class_state_finite&gt;)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state.get_multisite_mps(),<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements)<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements)<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="377" refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">energy_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_length());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">energy_per_site</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">energy_per_site</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="390" refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>show<sp/>that<sp/>the<sp/>variance<sp/>calculated<sp/>with<sp/>reduced-energy<sp/>mpo&apos;s<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>usual<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>mpo&apos;s<sp/>are<sp/>reduced:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Var<sp/>H<sp/>=<sp/>&lt;(H-E_red)²&gt;<sp/>-<sp/>&lt;H-E_red&gt;²<sp/><sp/><sp/><sp/><sp/>=<sp/>&lt;H²&gt;<sp/><sp/>-<sp/>2&lt;H&gt;E_red<sp/>+<sp/>E_red²<sp/>-<sp/>(&lt;H&gt;<sp/>-<sp/>E_red)²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>H2<sp/><sp/><sp/><sp/>-<sp/>2*E*E_red<sp/>+<sp/>E_red²<sp/>-<sp/>E²<sp/>+<sp/>2*E*E_red<sp/>-<sp/>E_red²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>H2<sp/><sp/><sp/><sp/>-<sp/>E²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>in<sp/>the<sp/>last<sp/>line,<sp/>H2-E²<sp/>is<sp/>a<sp/>subtraction<sp/>of<sp/>two<sp/>large<sp/>numbers<sp/>--&gt;<sp/>catastrophic<sp/>cancellation<sp/>--&gt;<sp/>loss<sp/>of<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>On<sp/>the<sp/>other<sp/>hand<sp/>Var<sp/>H<sp/>=<sp/>&lt;(H-E_red)²&gt;<sp/>-<sp/>energy_minus_energy_reduced²<sp/>=<sp/>&lt;(H-E_red)²&gt;<sp/>-<sp/>~dE²,<sp/>where<sp/>both<sp/>terms<sp/>are<sp/>always<sp/><sp/>&lt;&lt;<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>first<sp/>term<sp/>computed<sp/>from<sp/>a<sp/>double-layer<sp/>of<sp/>reduced<sp/>mpo&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>the<sp/>second<sp/>term<sp/>dE<sp/>is<sp/>usually<sp/>small,<sp/>in<sp/>fact<sp/>identically<sp/>zero<sp/>immediately<sp/>after<sp/>an<sp/>energy-reduction<sp/>operation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>may<sp/>grow<sp/>if<sp/>the<sp/>optimization<sp/>steps<sp/>make<sp/>significant<sp/>progress<sp/>refining<sp/>E.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Else,<sp/>if<sp/>E_red<sp/>=<sp/>0<sp/>(i.e.<sp/>not<sp/>reduced)<sp/>we<sp/>get<sp/>the<sp/>usual<sp/>formula:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Var<sp/>H<sp/>=<sp/>&lt;(H<sp/>-<sp/>0)²&gt;<sp/>-<sp/>&lt;H<sp/>-<sp/>0&gt;²<sp/>=<sp/>H2<sp/>-<sp/>E²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>and<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref>.value();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;state_or_mps_type,<sp/>class_state_finite&gt;)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespacenum_1a4c6e701a261f472aceb489c1e81b0320" kindref="member">num::all_equal</ref>(state.active_sites,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>))</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>compute<sp/>energy<sp/>variance:<sp/>active<sp/>sites<sp/>are<sp/>not<sp/>equal:<sp/>state<sp/>{}<sp/>|<sp/>model<sp/>{}<sp/>|<sp/>edges<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.active_sites,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.active_sites.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>compute<sp/>energy<sp/>variance:<sp/>active<sp/>sites<sp/>are<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(state.get_multisite_mps(),<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.is_reduced())</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E2<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref><sp/>*<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">energy</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespacenum_1a4c6e701a261f472aceb489c1e81b0320" kindref="member">num::all_equal</ref>(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>))</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>compute<sp/>energy<sp/>variance:<sp/>active<sp/>sites<sp/>are<sp/>not<sp/>equal:<sp/>model<sp/>{}<sp/>|<sp/>edges<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_multisite_mpo_squared();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;env<sp/>=<sp/>edges.<ref refid="classclass__edges__finite_1a15f800ec4c50491e8990b6bec9d5e6ff" kindref="member">get_multisite_var_blk</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Measuring<sp/>energy<sp/>variance:<sp/>state<sp/>dims<sp/>{}<sp/>|<sp/>model<sp/>sites<sp/>{}<sp/>dims<sp/>{}<sp/>|<sp/>edges<sp/>sites<sp/>{}<sp/>dims<sp/>[L{}<sp/>R{}]&quot;</highlight><highlight class="normal">,<sp/>state.dimensions(),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites,<sp/>mpo.dimensions(),<sp/>edges.<ref refid="classclass__edges__finite_1a853a34825c8b32559d85f093f1816c04" kindref="member">active_sites</ref>,<sp/>env.L.dimensions(),<sp/>env.R.dimensions());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.dimension(0)<sp/>!=<sp/>mpo.dimension(2))</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;State<sp/>and<sp/>model<sp/>have<sp/>incompatible<sp/>physical<sp/>dimension:<sp/>state<sp/>dim<sp/>{}<sp/>|<sp/>model<sp/>dim<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.dimension(0),<sp/>mpo.dimension(2)));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>t_var<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_var&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H2<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1common_1_1contraction_1a1e8f81ca5a112ae2193d82a403a141a5" kindref="member">tools::common::contraction::expectation_value</ref>(state,<sp/>mpo,<sp/>env.L,<sp/>env.R);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/><sp/><sp/>=<sp/>std::abs(H2<sp/>-<sp/>E2);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref><sp/>=<sp/>var;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="446" refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">energy_variance_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_length());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measurements<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>measurements-&gt;<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">energy_variance_per_site</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">energy_variance_per_site</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>state_or_mps_type&gt;</highlight></codeline>
<codeline lineno="459" refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_or_mps_type<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_min_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_max_per_site,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(state,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>measurements)<sp/>-<sp/>energy_min_per_site)<sp/>/<sp/>(energy_max_per_site<sp/>-<sp/>energy_min_per_site);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="structtensors__measure__finite" kindref="compound">tensors_measure_finite</ref><sp/>*measurements);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="namespacetools_1_1finite_1_1measure_1adf8bc0e9cd41a987d462608c75a36b40" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1adf8bc0e9cd41a987d462608c75a36b40" kindref="member">tools::finite::measure::energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>-&gt;get_energy_reduced();<sp/>}</highlight></codeline>
<codeline lineno="470" refid="namespacetools_1_1finite_1_1measure_1a472a549d171a22839b32cacd34fc3c9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a472a549d171a22839b32cacd34fc3c9f" kindref="member">tools::finite::measure::energy_per_site_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>-&gt;get_energy_per_site_reduced();<sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="namespacetools_1_1finite_1_1measure_1a06dbb65551a36da9a7904bc11cfde7e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a05684ec0c2f7a55c57c0a5e379e3c4e2" kindref="member">assert_edges_ene</ref>();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">energy_minus_energy_reduced</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>&amp;tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="namespacetools_1_1finite_1_1measure_1a6aa58a9e622f05fa43f2c98ba9a90d99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref>.value();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a05684ec0c2f7a55c57c0a5e379e3c4e2" kindref="member">assert_edges_ene</ref>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>&amp;tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ab9531b0198fbbfac0769f4a48c32fa18" kindref="member">energy</ref>.value();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="namespacetools_1_1finite_1_1measure_1ab6ff303549886a76b08acaf8e2be7677" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref>.value();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a05684ec0c2f7a55c57c0a5e379e3c4e2" kindref="member">assert_edges_ene</ref>();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>&amp;tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ad7e1ca3c46d77981b400e575777f7d8a" kindref="member">energy_per_site</ref>.value();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="namespacetools_1_1finite_1_1measure_1a94e70e626d6854b91ef3a47cbcb951e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref>)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref>.value();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1aac69244b8a4c9df6b344fed180ab63e0" kindref="member">assert_edges_var</ref>();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>&amp;tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1af33e86e10226fb19cf3c054503427c9e" kindref="member">energy_variance</ref>.value();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="namespacetools_1_1finite_1_1measure_1af7d40774d938044a0f7673fb211d8876" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref>.value();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1aac69244b8a4c9df6b344fed180ab63e0" kindref="member">assert_edges_var</ref>();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref><sp/>=</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>&amp;tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.<ref refid="classclass__tensors__finite_1af7891e354b1fb366d8f62c58972051f7" kindref="member">measurements</ref>.<ref refid="structtensors__measure__finite_1ae8ad6ddc61b91fa3a6ea78c6bcd96d3f" kindref="member">energy_variance_per_site</ref>.value();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="namespacetools_1_1finite_1_1measure_1a9d05dfc5e775686cbd72e30107ef7b2e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emax)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a05684ec0c2f7a55c57c0a5e379e3c4e2" kindref="member">assert_edges_ene</ref>();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>emin,<sp/>emax);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="namespacetools_1_1finite_1_1measure_1a353a7d9a777de998964398a83dbdadf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527" refid="namespacetools_1_1finite_1_1measure_1a9b91ee2a9e967296b7d3295af876c202" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530" refid="namespacetools_1_1finite_1_1measure_1a5978552f78c00d504c7498daa17506a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533" refid="namespacetools_1_1finite_1_1measure_1a7f7f226c0320ca739e98340e0e6e8c3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536" refid="namespacetools_1_1finite_1_1measure_1aeb243e9662176ffaed31148acc08f4cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539" refid="namespacetools_1_1finite_1_1measure_1ac1bdfb747a198eb04ca902d7605336e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emax)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(state,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>emin,<sp/>emax);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="namespacetools_1_1finite_1_1measure_1aec8428e3b9da07d02c741f6c010f3fa5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548" refid="namespacetools_1_1finite_1_1measure_1ac9f8184e2cd1b4063b820bae926a03f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551" refid="namespacetools_1_1finite_1_1measure_1adf38ee68af1eb07fce6e12b7311a96e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554" refid="namespacetools_1_1finite_1_1measure_1ad457da7362e772ed2d4d79f82c991704" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557" refid="namespacetools_1_1finite_1_1measure_1a9824a9cde9f82a73cfad2f67c9ca23b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1aee2b1efe5c266357b6572fbb35808b96" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560" refid="namespacetools_1_1finite_1_1measure_1a0f4b4241dc86a64f89fdb71a0f9d7d52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>emax)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a132f292ec9d3f89e658fb77572d12a9f" kindref="member">tools::finite::measure::energy_normalized</ref>(mps,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>,<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>,<sp/>emin,<sp/>emax);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp"/>
  </compounddef>
</doxygen>
