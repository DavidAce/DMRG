<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classclass__algorithm__finite" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>class_algorithm_finite</compoundname>
    <basecompoundref refid="classclass__algorithm__base" prot="public" virt="non-virtual">class_algorithm_base</basecompoundref>
    <derivedcompoundref refid="classclass__f_d_m_r_g" prot="public" virt="non-virtual">class_fDMRG</derivedcompoundref>
    <derivedcompoundref refid="classclass__x_d_m_r_g" prot="public" virt="non-virtual">class_xDMRG</derivedcompoundref>
    <includes refid="class__algorithm__finite_8h" local="no">class_algorithm_finite.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classclass__algorithm__finite_1a09b6d44725ae3d32093c37580b59626d" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classclass__h5table__buffer" kindref="compound">class_h5table_buffer</ref>&lt; <ref refid="classclass__h5table__measurements__finite" kindref="compound">class_h5table_measurements_finite</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;class_h5table_buffer&lt;class_h5table_measurements_finite&gt; &gt; class_algorithm_finite::h5tbuf_measurements</definition>
        <argsstring></argsstring>
        <name>h5tbuf_measurements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="26" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1ac14b36df7eb86c0a8ccb05dec4c0eec9" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &gt;</type>
        <definition>std::unique_ptr&lt;class_state_finite&gt; class_algorithm_finite::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="30" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a5f272b18fd4eb5fee0f35f231b2dfb89" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t class_algorithm_finite::max_stuck_iters</definition>
        <argsstring></argsstring>
        <name>max_stuck_iters</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="35" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1ad171a763b608bcfe1054ce56bf5ea7d2" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t class_algorithm_finite::min_stuck_iters</definition>
        <argsstring></argsstring>
        <name>min_stuck_iters</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="36" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a72360228d7c045aee8c2ae3b7c7a8a4f" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t class_algorithm_finite::min_saturation_iters</definition>
        <argsstring></argsstring>
        <name>min_saturation_iters</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="38" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a8908aad72db98c88a37d4d0696c1a330" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t class_algorithm_finite::max_saturation_iters</definition>
        <argsstring></argsstring>
        <name>max_saturation_iters</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="39" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a72b4aa7bd0e8d16a2a98a13d8770dd58" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool class_algorithm_finite::has_projected</definition>
        <argsstring></argsstring>
        <name>has_projected</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="40" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a924c4a4f29db461ca496470cc93fc157" prot="public" static="no" mutable="no">
        <type>std::list&lt; double &gt;</type>
        <definition>std::list&lt;double&gt; class_algorithm_finite::V_mpo_vec</definition>
        <argsstring></argsstring>
        <name>V_mpo_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="68" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1aaf142efbc8a5964f4741510ab7028c91" prot="public" static="no" mutable="no">
        <type>std::list&lt; int &gt;</type>
        <definition>std::list&lt;int&gt; class_algorithm_finite::X_mpo_vec</definition>
        <argsstring></argsstring>
        <name>X_mpo_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="69" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a8a2b8f64844a71351f9a9bd736053e20" prot="public" static="no" mutable="no">
        <type>std::list&lt; double &gt;</type>
        <definition>std::list&lt;double&gt; class_algorithm_finite::V_mpo_slopes</definition>
        <argsstring></argsstring>
        <name>V_mpo_slopes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="71" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a713af9a4ad66b29338ededfb17279774" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::list&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::list&lt;double&gt; &gt; class_algorithm_finite::S_mat</definition>
        <argsstring></argsstring>
        <name>S_mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="74" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1a3907217095a878d781f55a6771b9c0ca" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::list&lt; int &gt; &gt;</type>
        <definition>std::vector&lt;std::list&lt;int&gt; &gt; class_algorithm_finite::X_mat</definition>
        <argsstring></argsstring>
        <name>X_mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="75" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__finite_1ad59eb289e48ceb53003be230375f914c" prot="public" static="no" mutable="no">
        <type>std::list&lt; double &gt;</type>
        <definition>std::list&lt;double&gt; class_algorithm_finite::S_slopes</definition>
        <argsstring></argsstring>
        <name>S_slopes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="77" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classclass__algorithm__finite_1a400c889ba19892c299f1ae049d3a07bb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_finite::class_algorithm_finite</definition>
        <argsstring>(std::shared_ptr&lt; h5pp::File &gt; h5ppFile_, std::string sim_name, SimulationType sim_type, size_t num_sites)</argsstring>
        <name>class_algorithm_finite</name>
        <param>
          <type>std::shared_ptr&lt; h5pp::File &gt;</type>
          <declname>h5ppFile_</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>sim_name</declname>
        </param>
        <param>
          <type><ref refid="enums_8h_1ad69f3cf5fdb6ef307d85180c346e7921" kindref="member">SimulationType</ref></type>
          <declname>sim_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_sites</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="18" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="14" bodyend="45"/>
        <references refid="classclass__algorithm__finite_1a400c889ba19892c299f1ae049d3a07bb" compoundref="class__algorithm__finite_8cpp" startline="14" endline="45">class_algorithm_finite</references>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594ada1e23852820b9154316c7c06e2b7ba051">NORMAL</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a0ce48333412bf3d6ee639d09c46e8a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_finite::run_simulation</definition>
        <argsstring>()=0</argsstring>
        <name>run_simulation</name>
        <reimplementedby refid="classclass__f_d_m_r_g_1a08fe1cb78f4ba42593dac8d1ca7c73c9">run_simulation</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a3986f9f47360d4c52cd4b44a9e87fb3e">run_simulation</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1aef508b162680eadb951cf3811642fce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::run_preprocessing</definition>
        <argsstring>()</argsstring>
        <name>run_preprocessing</name>
        <reimplementedby refid="classclass__x_d_m_r_g_1a30d7f435a132a1b91becb184a17f9aec">run_preprocessing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="45" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="121" bodyend="129"/>
        <references refid="classclass__algorithm__base_1a5b284e854a8debc108cdd078c7f2b6a9" compoundref="class__algorithm__base_8h" startline="77">class_algorithm_base::t_pre</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a37993b5dd8c0999078d23f699d533efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::run_postprocessing</definition>
        <argsstring>()</argsstring>
        <name>run_postprocessing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="46" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="148" bodyend="168"/>
        <references refid="classclass__algorithm__base_1a15d39ee8a896d1142c354fe947c95386" compoundref="class__algorithm__base_8h" startline="79">class_algorithm_base::t_pos</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__algorithm__finite_1ac996a89d34ba9c9323e04c8e1fad54e2" compoundref="class__algorithm__finite_8cpp" startline="596" endline="624">print_status_update</references>
        <references refid="classclass__algorithm__finite_1a56fa115bbb861cb586ba78ef0624978b" compoundref="class__algorithm__finite_8cpp" startline="432" endline="469">write_state</references>
        <references refid="classclass__algorithm__finite_1aa96d6f71f47d67fe96153659fc98b677" compoundref="class__algorithm__finite_8cpp" startline="472" endline="521">write_measurements</references>
        <references refid="classclass__algorithm__finite_1a586a8ac4f8036c870b826485a42bd6d8" compoundref="class__algorithm__finite_8cpp" startline="525" endline="558">write_sim_status</references>
        <references refid="classclass__algorithm__finite_1ab5734a8b4a609be5f402b87bae2c4f64" compoundref="class__algorithm__finite_8cpp" startline="561" endline="573">write_profiling</references>
        <references refid="classclass__algorithm__finite_1a31460024ef07df92bc57719b2234a725" compoundref="class__algorithm__finite_8cpp" startline="628" endline="658">print_status_full</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a54acaecd0069e1c586e060cdfe41c67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::single_DMRG_step</definition>
        <argsstring>(std::string ritz)</argsstring>
        <name>single_DMRG_step</name>
        <param>
          <type>std::string</type>
          <declname>ritz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="47" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="134" bodyend="-1"/>
        <references refid="classclass__algorithm__base_1af4a24c9c727620185761c1d30e453b53" compoundref="class__algorithm__base_8h" startline="78">class_algorithm_base::t_run</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="43">class_algorithm_base::sim_status</references>
        <references refid="structstatus__data_1a1cec36cfaf69539fb67413fe14af5c7e" compoundref="class__simulation__status_8h" startline="35">status_data::wall_time</references>
        <references refid="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" compoundref="class__algorithm__base_8h" startline="76">class_algorithm_base::t_tot</references>
        <references refid="classclass__tic__toc_1abdb3f46902102c328384e6160d733124" compoundref="class__tic__toc_8cpp" startline="103" endline="105">class_tic_toc::get_age</references>
        <references refid="structstatus__data_1a2ee8432e8b3a4b14f9b8fb16cf73a06d" compoundref="class__simulation__status_8h" startline="36">status_data::simu_time</references>
        <references refid="classclass__tic__toc_1ac743e885a66900cd82645c5bb07d2f73" compoundref="class__tic__toc_8cpp" startline="33" endline="35">class_tic_toc::get_measured_time</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1ab10abda24e7005f8b35a2d05e9cc7921" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool class_algorithm_finite::store_wave_function</definition>
        <argsstring>()=0</argsstring>
        <name>store_wave_function</name>
        <reimplementedby refid="classclass__f_d_m_r_g_1a1494c07358752254c4dd739c160698f4">store_wave_function</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1aa3e2f1e9f0a0a01471b2f0833acfad3e">store_wave_function</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a8dcbb27105c5e5623050c545d8b5f3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::move_center_point</definition>
        <argsstring>()</argsstring>
        <name>move_center_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="49" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="171" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1af95402763a137d45e2b25ceecc9252af" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::update_bond_dimension_limit</definition>
        <argsstring>(std::optional&lt; long &gt; tmp_bond_limit=std::nullopt) final</argsstring>
        <name>update_bond_dimension_limit</name>
        <reimplements refid="classclass__algorithm__base_1a9a60e6393090895c4960d04b83621c62">update_bond_dimension_limit</reimplements>
        <param>
          <type>std::optional&lt; long &gt;</type>
          <declname>tmp_bond_limit</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="50" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="190" bodyend="275"/>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="43">class_algorithm_base::sim_status</references>
        <references refid="structstatus__data_1a563478860bb43be3e9c4a00325372c34" compoundref="class__simulation__status_8h" startline="45">status_data::chi_lim_has_reached_chi_max</references>
        <references refid="structstatus__data_1abe15010ddc3fee2d541b521bb23dfdb5" compoundref="class__simulation__status_8h" startline="43">status_data::simulation_has_stuck_for</references>
        <references refid="classclass__algorithm__finite_1a5f272b18fd4eb5fee0f35f231b2dfb89" compoundref="class__algorithm__finite_8h" startline="35">max_stuck_iters</references>
        <references refid="classclass__algorithm__finite_1a56fa115bbb861cb586ba78ef0624978b" compoundref="class__algorithm__finite_8cpp" startline="432" endline="469">write_state</references>
        <references refid="classclass__algorithm__finite_1aa96d6f71f47d67fe96153659fc98b677" compoundref="class__algorithm__finite_8cpp" startline="472" endline="521">write_measurements</references>
        <references refid="classclass__algorithm__finite_1a586a8ac4f8036c870b826485a42bd6d8" compoundref="class__algorithm__finite_8cpp" startline="525" endline="558">write_sim_status</references>
        <references refid="classclass__algorithm__finite_1ab5734a8b4a609be5f402b87bae2c4f64" compoundref="class__algorithm__finite_8cpp" startline="561" endline="573">write_profiling</references>
        <references refid="classclass__algorithm__finite_1a453b5c2fb7cbbce1e3572259bc81c7d8" compoundref="class__algorithm__finite_8cpp" startline="402" endline="429">clear_saturation_status</references>
        <references refid="classclass__algorithm__finite_1a72b4aa7bd0e8d16a2a98a13d8770dd58" compoundref="class__algorithm__finite_8h" startline="40">has_projected</references>
        <references refid="namespacesettings_1_1model_1ae14bbe9ea2acf3d3905f97a21dc9b7d3" compoundref="nmspc__settings_8h" startline="58">settings::model::projection_when_growing_chi</references>
        <references refid="classclass__algorithm__finite_1a6383a637d4b518f378b1d666d50c6206" compoundref="class__algorithm__finite_8cpp" startline="588" endline="594">copy_from_tmp</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a9bc7b209ddc5b1c246038d33ca327640" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::run</definition>
        <argsstring>() final</argsstring>
        <name>run</name>
        <reimplements refid="classclass__algorithm__base_1a41b199782e43aeaccf607b8191c3a027">run</reimplements>
        <briefdescription>
<para>Dispatches finite DMRG stages. This function manages the stages of simulation differently depending on whether the data already existed in hdf5 storage or not. </para>        </briefdescription>
        <detaileddescription>
<para>There can be two main scenarios that split into cases: 1) The hdf5 file existed already and contains a) nothing recognizeable (previous crash?) <ndash/> run full simulation from scratch. b) a converged simulation but no MPS <ndash/> run full simulation from scratch. c) a not-yet-converged MPS <ndash/> resume simulation, reset the number of sweeps first. d) a converged MPS <ndash/> not much to do... run postprocessing 2) The hdf5 file did not exist <ndash/> run full simulation from scratch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="51" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="48" bodyend="118"/>
        <references refid="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" compoundref="class__algorithm__base_8h" startline="76">class_algorithm_base::t_tot</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__algorithm__finite_1aef508b162680eadb951cf3811642fce9" compoundref="class__algorithm__finite_8cpp" startline="121" endline="129">run_preprocessing</references>
        <references refid="classclass__algorithm__finite_1a0ce48333412bf3d6ee639d09c46e8a51">run_simulation</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
        <references refid="classclass__algorithm__finite_1a37993b5dd8c0999078d23f699d533efc" compoundref="class__algorithm__finite_8cpp" startline="148" endline="168">run_postprocessing</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a453b5c2fb7cbbce1e3572259bc81c7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::clear_saturation_status</definition>
        <argsstring>() override</argsstring>
        <name>clear_saturation_status</name>
        <reimplements refid="classclass__algorithm__base_1adae1b7c6678d8c52304a3bcf64c1b521">clear_saturation_status</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="52" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="402" bodyend="429"/>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="43">class_algorithm_base::sim_status</references>
        <references refid="structstatus__data_1a05425f160264fc7b0aa9f5bea0bc461a" compoundref="class__simulation__status_8h" startline="46">status_data::entanglement_has_converged</references>
        <references refid="structstatus__data_1a461992519f52cb575b5411b8be38ef1c" compoundref="class__simulation__status_8h" startline="47">status_data::entanglement_has_saturated</references>
        <references refid="structstatus__data_1a621237449da0c96f46a4d97f9e3078b9" compoundref="class__simulation__status_8h" startline="54">status_data::entanglement_saturated_for</references>
        <references refid="structstatus__data_1a04f287ba8285d95324bdb568f5e60057" compoundref="class__simulation__status_8h" startline="48">status_data::variance_mpo_has_converged</references>
        <references refid="structstatus__data_1addb896a29a85c3a50a6a4a6ed8f8472e" compoundref="class__simulation__status_8h" startline="49">status_data::variance_mpo_has_saturated</references>
        <references refid="structstatus__data_1a756b1a37d89d85dd571232acdc7e9131" compoundref="class__simulation__status_8h" startline="55">status_data::variance_mpo_saturated_for</references>
        <references refid="structstatus__data_1a563478860bb43be3e9c4a00325372c34" compoundref="class__simulation__status_8h" startline="45">status_data::chi_lim_has_reached_chi_max</references>
        <references refid="structstatus__data_1ad492e1e0419f6a35924cfa7fafa8e9c3" compoundref="class__simulation__status_8h" startline="44">status_data::simulation_has_to_stop</references>
        <references refid="structstatus__data_1ad1888c88421c43a27431329438801788" compoundref="class__simulation__status_8h" startline="42">status_data::simulation_has_got_stuck</references>
        <references refid="structstatus__data_1a66507c5502dd9342583929e5a0953321" compoundref="class__simulation__status_8h" startline="39">status_data::simulation_has_converged</references>
        <references refid="structstatus__data_1af54b3e221c66558f5f564f48d9974958" compoundref="class__simulation__status_8h" startline="40">status_data::simulation_has_saturated</references>
        <references refid="structstatus__data_1a682a441660e6bf83604320835ee6c20d" compoundref="class__simulation__status_8h" startline="41">status_data::simulation_has_succeeded</references>
        <references refid="structstatus__data_1abe15010ddc3fee2d541b521bb23dfdb5" compoundref="class__simulation__status_8h" startline="43">status_data::simulation_has_stuck_for</references>
        <references refid="classclass__algorithm__finite_1a72b4aa7bd0e8d16a2a98a13d8770dd58" compoundref="class__algorithm__finite_8h" startline="40">has_projected</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a52ad711d5cc01fa67e7db4190d748ffb" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::reset_to_random_state</definition>
        <argsstring>(const std::string parity_sector=&quot;random&quot;, int seed_state=-1) final</argsstring>
        <name>reset_to_random_state</name>
        <reimplements refid="classclass__algorithm__base_1a4db893602692d81b4cce5e197b5a5238">reset_to_random_state</reimplements>
        <param>
          <type>const std::string</type>
          <declname>parity_sector</declname>
          <defval>&quot;random&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seed_state</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="53" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="279" bodyend="289"/>
        <references refid="classclass__algorithm__finite_1a453b5c2fb7cbbce1e3572259bc81c7d8" compoundref="class__algorithm__finite_8cpp" startline="402" endline="429">clear_saturation_status</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a56fa115bbb861cb586ba78ef0624978b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::write_state</definition>
        <argsstring>(bool result=false) final</argsstring>
        <name>write_state</name>
        <reimplements refid="classclass__algorithm__base_1acd6001b7e51cc59ad9c81309cf6fabf8">write_state</reimplements>
        <param>
          <type>bool</type>
          <declname>result</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="55" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="432" bodyend="469"/>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="classclass__algorithm__finite_1ab10abda24e7005f8b35a2d05e9cc7921">store_wave_function</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adaba7de5bc6888294e5884b024a4c894f1">FULL</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1aa96d6f71f47d67fe96153659fc98b677" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::write_measurements</definition>
        <argsstring>(bool result=false) final</argsstring>
        <name>write_measurements</name>
        <reimplements refid="classclass__algorithm__base_1a6ad92368ba8eb1bd460926505b09285c">write_measurements</reimplements>
        <param>
          <type>bool</type>
          <declname>result</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="56" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="472" bodyend="521"/>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adaf8589806bbf66241917092b2a6e18c6f">LIGHT</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adaba7de5bc6888294e5884b024a4c894f1">FULL</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a586a8ac4f8036c870b826485a42bd6d8" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::write_sim_status</definition>
        <argsstring>(bool result=false) final</argsstring>
        <name>write_sim_status</name>
        <reimplements refid="classclass__algorithm__base_1a9efb7f72aae3c265865f61f7bd398517">write_sim_status</reimplements>
        <param>
          <type>bool</type>
          <declname>result</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="57" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="525" bodyend="558"/>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adaf8589806bbf66241917092b2a6e18c6f">LIGHT</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1ab5734a8b4a609be5f402b87bae2c4f64" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::write_profiling</definition>
        <argsstring>(bool result=false) final</argsstring>
        <name>write_profiling</name>
        <reimplements refid="classclass__algorithm__base_1a7e6cdf8946219f3faba2c2e8791235ca">write_profiling</reimplements>
        <param>
          <type>bool</type>
          <declname>result</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="58" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="561" bodyend="573"/>
        <references refid="namespacesettings_1_1profiling_1abc2a7232a0529e490a87f5b7b4a22aa7" compoundref="nmspc__settings_8h" startline="175">settings::profiling::on</references>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adaf8589806bbf66241917092b2a6e18c6f">LIGHT</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a6383a637d4b518f378b1d666d50c6206" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::copy_from_tmp</definition>
        <argsstring>(bool result=false) final</argsstring>
        <name>copy_from_tmp</name>
        <reimplements refid="classclass__algorithm__base_1a12a713db549861c7293191b92bf75c08">copy_from_tmp</reimplements>
        <param>
          <type>bool</type>
          <declname>result</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="59" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="588" bodyend="594"/>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1ac996a89d34ba9c9323e04c8e1fad54e2" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::print_status_update</definition>
        <argsstring>() final</argsstring>
        <name>print_status_update</name>
        <reimplements refid="classclass__algorithm__base_1a803b366e66ffaef47479278cbdb1a738">print_status_update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="60" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="596" bodyend="624"/>
        <references refid="namespacetools_1_1finite_1_1measure_1a6b0ef492a7f7af947258638f60e9a08b" compoundref="finite_2measure_8cpp" startline="310" endline="348">tools::finite::measure::mps_wavefn</references>
        <references refid="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" compoundref="class__algorithm__base_8h" startline="80">class_algorithm_base::t_prt</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__algorithm__base_1a7ee19b5bbea7bb4dca809914690039a8" compoundref="class__algorithm__base_8h" startline="42">class_algorithm_base::sim_type</references>
        <references refid="enums_8h_1ad69f3cf5fdb6ef307d85180c346e7921ab5612e395f07bd6a022360eb707e73ae">xDMRG</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a31460024ef07df92bc57719b2234a725" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::print_status_full</definition>
        <argsstring>() final</argsstring>
        <name>print_status_full</name>
        <reimplements refid="classclass__algorithm__base_1a96f34d67e881abd4d1ec4dd2d89728ad">print_status_full</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="61" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="628" bodyend="658"/>
        <references refid="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" compoundref="class__algorithm__base_8h" startline="80">class_algorithm_base::t_prt</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__algorithm__base_1a7ee19b5bbea7bb4dca809914690039a8" compoundref="class__algorithm__base_8h" startline="42">class_algorithm_base::sim_type</references>
        <references refid="enums_8h_1ad69f3cf5fdb6ef307d85180c346e7921ab5612e395f07bd6a022360eb707e73ae">xDMRG</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1adb9ddcca8ca3a07a687c1abd370dec4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::check_convergence_variance</definition>
        <argsstring>(double threshold=quietNaN, double slope_threshold=quietNaN)</argsstring>
        <name>check_convergence_variance</name>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval><ref refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" kindref="member">quietNaN</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>slope_threshold</declname>
          <defval><ref refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" kindref="member">quietNaN</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="62" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="294" bodyend="331"/>
        <references refid="namespacesettings_1_1precision_1ae7fb706e3fd5e6c63bd9ed074313224a" compoundref="nmspc__settings_8h" startline="99">settings::precision::variance_convergence_threshold</references>
        <references refid="namespacesettings_1_1precision_1a49cdd22328092db2e3177579db139c0a" compoundref="nmspc__settings_8h" startline="100">settings::precision::variance_slope_threshold</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a8fe25d66a89a7ca074476f410c62524c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::check_convergence_entg_entropy</definition>
        <argsstring>(double slope_threshold=quietNaN)</argsstring>
        <name>check_convergence_entg_entropy</name>
        <param>
          <type>double</type>
          <declname>slope_threshold</declname>
          <defval><ref refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" kindref="member">quietNaN</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="63" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="334" bodyend="399"/>
        <references refid="namespacesettings_1_1precision_1a12df3196d374b7629dd3e3362b9ab2b8" compoundref="nmspc__settings_8h" startline="101">settings::precision::entropy_slope_threshold</references>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="43">class_algorithm_base::sim_status</references>
        <references refid="structstatus__data_1a461992519f52cb575b5411b8be38ef1c" compoundref="class__simulation__status_8h" startline="47">status_data::entanglement_has_saturated</references>
        <references refid="structstatus__data_1a621237449da0c96f46a4d97f9e3078b9" compoundref="class__simulation__status_8h" startline="54">status_data::entanglement_saturated_for</references>
        <references refid="structstatus__data_1a05425f160264fc7b0aa9f5bea0bc461a" compoundref="class__simulation__status_8h" startline="46">status_data::entanglement_has_converged</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__finite_1a00b510706001a64633d113f6ec212e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_finite::write_projection</definition>
        <argsstring>(const class_state_finite &amp;state_projected, std::string parity_sector)</argsstring>
        <name>write_projection</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state_projected</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>parity_sector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="64" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp" bodystart="575" bodyend="585"/>
        <references refid="namespacesettings_1_1output_1ab20505a535a2ff1d83979273a3fadf5e" compoundref="nmspc__settings_8h" startline="46">settings::output::storage_level</references>
        <references refid="enums_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="51">
        <label>class_fDMRG</label>
        <link refid="classclass__f_d_m_r_g"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>class_xDMRG</label>
        <link refid="classclass__x_d_m_r_g"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>class_algorithm_finite</label>
        <link refid="classclass__algorithm__finite"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="70">
        <label>std::unique_ptr&lt; class_model_base &gt;</label>
        <childnode refid="71" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>std::vector&lt; std::list&lt; double &gt; &gt;</label>
        <childnode refid="60" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>class_environment_base</label>
        <link refid="classclass__environment__base"/>
        <childnode refid="55" relation="usage">
          <edgelabel>side</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="60">
        <label>std::list&lt; double &gt;</label>
      </node>
      <node id="71">
        <label>class_model_base</label>
        <link refid="classclass__model__base"/>
      </node>
      <node id="65">
        <label>std::list&lt; class_mps_site &gt;</label>
        <childnode refid="66" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>std::list&lt; class_environment_var &gt;</label>
        <childnode refid="74" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>class_environment_var</label>
        <link refid="classclass__environment__var"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>std::list&lt; size_t &gt;</label>
      </node>
      <node id="56">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="62">
        <label>std::list&lt; int &gt;</label>
      </node>
      <node id="67">
        <label>class_state_finite::Cache</label>
        <link refid="structclass__state__finite_1_1_cache"/>
      </node>
      <node id="77">
        <label>std::list&lt; class_environment &gt;</label>
        <childnode refid="78" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>class_mps_site</label>
        <link refid="classclass__mps__site"/>
      </node>
      <node id="78">
        <label>class_environment</label>
        <link refid="classclass__environment"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>class_state_finite</label>
        <link refid="classclass__state__finite"/>
        <childnode refid="65" relation="usage">
          <edgelabel>MPS_L</edgelabel>
          <edgelabel>MPS_R</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>cache</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>active_sites</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>MPO_L</edgelabel>
          <edgelabel>MPO_R</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>measurements</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>ENV2_L</edgelabel>
          <edgelabel>ENV2_R</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>site_update_tags</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>ENV_L</edgelabel>
          <edgelabel>ENV_R</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>truncation_error</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>class_tic_toc</label>
        <link refid="classclass__tic__toc"/>
        <childnode refid="55" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>status_data</label>
        <link refid="structstatus__data"/>
      </node>
      <node id="72">
        <label>class_state_finite::Measurements</label>
        <link refid="structclass__state__finite_1_1_measurements"/>
      </node>
      <node id="53">
        <label>class_algorithm_finite</label>
        <link refid="classclass__algorithm__finite"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>V_mpo_vec</edgelabel>
          <edgelabel>S_slopes</edgelabel>
          <edgelabel>V_mpo_slopes</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>X_mat</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>X_mpo_vec</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>S_mat</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>class_simulation_status</label>
        <link refid="classclass__simulation__status"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
        <childnode refid="55" relation="usage">
          <edgelabel>sim_name</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>sim_status</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>t_con</edgelabel>
          <edgelabel>t_pos</edgelabel>
          <edgelabel>t_pre</edgelabel>
          <edgelabel>t_tot</edgelabel>
          <edgelabel>t_run</edgelabel>
          <edgelabel>t_prt</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>std::unique_ptr&lt; class_state_finite &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="69">
        <label>std::list&lt; std::unique_ptr&lt; class_model_base &gt; &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::string</label>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>std::vector&lt; std::list&lt; int &gt; &gt;</label>
        <childnode refid="62" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" line="14" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.h" bodystart="14" bodyend="79"/>
    <listofallmembers>
      <member refid="classclass__algorithm__base_1a6d37e1472c3e74f8e50a11c71a8b03ee" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>check_convergence</name></member>
      <member refid="classclass__algorithm__finite_1a8fe25d66a89a7ca074476f410c62524c" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>check_convergence_entg_entropy</name></member>
      <member refid="classclass__algorithm__finite_1adb9ddcca8ca3a07a687c1abd370dec4a" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>check_convergence_variance</name></member>
      <member refid="classclass__algorithm__base_1aa374f4bdc5b96a72e96688ac874bfe62" prot="protected" virt="non-virtual"><scope>class_algorithm_finite</scope><name>check_saturation_using_slope</name></member>
      <member refid="classclass__algorithm__base_1a6c3102d68422740613902d7d16604f63" prot="protected" virt="non-virtual"><scope>class_algorithm_finite</scope><name>check_saturation_using_slope2</name></member>
      <member refid="classclass__algorithm__base_1a77520add9ead85c0b5a98cdbb46edaf6" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>chi_grow</name></member>
      <member refid="classclass__algorithm__base_1a43b93d906ce8263b7436c4758231ba5e" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>chi_init</name></member>
      <member refid="classclass__algorithm__base_1a76ef69cebc415e32298214af4cf9003b" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>chi_max</name></member>
      <member refid="classclass__algorithm__base_1a35e482872c1dec9372c74c40a82208d0" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__base_1a790233233d4352402e651a312e7ae76a" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__finite_1a400c889ba19892c299f1ae049d3a07bb" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>class_algorithm_finite</name></member>
      <member refid="classclass__algorithm__finite_1a453b5c2fb7cbbce1e3572259bc81c7d8" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>clear_saturation_status</name></member>
      <member refid="classclass__algorithm__finite_1a6383a637d4b518f378b1d666d50c6206" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>copy_from_tmp</name></member>
      <member refid="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>h5pp_file</name></member>
      <member refid="classclass__algorithm__finite_1a09b6d44725ae3d32093c37580b59626d" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>h5tbuf_measurements</name></member>
      <member refid="classclass__algorithm__base_1ab0712c1f7e09a4ffcac2d8df99bf4b6b" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>h5tbuf_profiling</name></member>
      <member refid="classclass__algorithm__base_1a068eedc09bbb4355bb691d2aeb48d48d" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>h5tbuf_sim_status</name></member>
      <member refid="classclass__algorithm__finite_1a72b4aa7bd0e8d16a2a98a13d8770dd58" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>has_projected</name></member>
      <member refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" prot="protected" virt="non-virtual"><scope>class_algorithm_finite</scope><name>log</name></member>
      <member refid="classclass__algorithm__finite_1a8908aad72db98c88a37d4d0696c1a330" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>max_saturation_iters</name></member>
      <member refid="classclass__algorithm__finite_1a5f272b18fd4eb5fee0f35f231b2dfb89" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>max_stuck_iters</name></member>
      <member refid="classclass__algorithm__finite_1a72360228d7c045aee8c2ae3b7c7a8a4f" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>min_saturation_iters</name></member>
      <member refid="classclass__algorithm__finite_1ad171a763b608bcfe1054ce56bf5ea7d2" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>min_stuck_iters</name></member>
      <member refid="classclass__algorithm__finite_1a8dcbb27105c5e5623050c545d8b5f3cf" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>move_center_point</name></member>
      <member refid="classclass__algorithm__base_1a0f6c17cedfeb0baba3df055e87655ea8" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>num_sites</name></member>
      <member refid="classclass__algorithm__base_1a5d6af987e476e9a93a2bab9261ac16bb" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>print_freq</name></member>
      <member refid="classclass__algorithm__base_1ad0c595a0722179ffa0a478052e9f7c39" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>print_profiling</name></member>
      <member refid="classclass__algorithm__finite_1a31460024ef07df92bc57719b2234a725" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>print_status_full</name></member>
      <member refid="classclass__algorithm__finite_1ac996a89d34ba9c9323e04c8e1fad54e2" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>print_status_update</name></member>
      <member refid="classclass__algorithm__base_1ada828b1dc778d6c547a8c03875a26b9a" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>process_memory_in_mb</name></member>
      <member refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>quietNaN</name></member>
      <member refid="classclass__algorithm__finite_1a52ad711d5cc01fa67e7db4190d748ffb" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>reset_to_random_state</name></member>
      <member refid="classclass__algorithm__finite_1a9bc7b209ddc5b1c246038d33ca327640" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>run</name></member>
      <member refid="classclass__algorithm__finite_1a37993b5dd8c0999078d23f699d533efc" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>run_postprocessing</name></member>
      <member refid="classclass__algorithm__finite_1aef508b162680eadb951cf3811642fce9" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>run_preprocessing</name></member>
      <member refid="classclass__algorithm__finite_1a0ce48333412bf3d6ee639d09c46e8a51" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>run_simulation</name></member>
      <member refid="classclass__algorithm__finite_1a713af9a4ad66b29338ededfb17279774" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>S_mat</name></member>
      <member refid="classclass__algorithm__finite_1ad59eb289e48ceb53003be230375f914c" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>S_slopes</name></member>
      <member refid="classclass__algorithm__base_1ac2a5042c5337ef3b8c6d29a115e25843" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>Scalar</name></member>
      <member refid="classclass__algorithm__base_1a539f089e4d2c8d121fbd0b9765529f72" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>set_profiling_labels</name></member>
      <member refid="classclass__algorithm__base_1a64e1bbd06c9d036b60d1cd9536e8f0c8" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>sim_name</name></member>
      <member refid="classclass__algorithm__base_1ae08aa4b8e9bbd286c9ec76f15553a037" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>sim_on</name></member>
      <member refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>sim_status</name></member>
      <member refid="classclass__algorithm__base_1a7ee19b5bbea7bb4dca809914690039a8" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>sim_type</name></member>
      <member refid="classclass__algorithm__finite_1a54acaecd0069e1c586e060cdfe41c67a" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>single_DMRG_step</name></member>
      <member refid="classclass__algorithm__finite_1ac14b36df7eb86c0a8ccb05dec4c0eec9" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>state</name></member>
      <member refid="classclass__algorithm__base_1af36e30da0595f116629422821e1e4ced" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>stop_reason</name></member>
      <member refid="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>StopReason</name></member>
      <member refid="classclass__algorithm__finite_1ab10abda24e7005f8b35a2d05e9cc7921" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>store_wave_function</name></member>
      <member refid="classclass__algorithm__base_1a41e28970ec5e7a0cf2a1700b217f5152" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_con</name></member>
      <member refid="classclass__algorithm__base_1a15d39ee8a896d1142c354fe947c95386" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_pos</name></member>
      <member refid="classclass__algorithm__base_1a5b284e854a8debc108cdd078c7f2b6a9" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_pre</name></member>
      <member refid="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_prt</name></member>
      <member refid="classclass__algorithm__base_1af4a24c9c727620185761c1d30e453b53" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_run</name></member>
      <member refid="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>t_tot</name></member>
      <member refid="classclass__algorithm__finite_1af95402763a137d45e2b25ceecc9252af" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>update_bond_dimension_limit</name></member>
      <member refid="classclass__algorithm__finite_1a8a2b8f64844a71351f9a9bd736053e20" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>V_mpo_slopes</name></member>
      <member refid="classclass__algorithm__finite_1a924c4a4f29db461ca496470cc93fc157" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>V_mpo_vec</name></member>
      <member refid="classclass__algorithm__base_1a14c1cf2ee0f07ec3d4d3acd55ac213a7" prot="public" virt="pure-virtual"><scope>class_algorithm_finite</scope><name>write_freq</name></member>
      <member refid="classclass__algorithm__finite_1aa96d6f71f47d67fe96153659fc98b677" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>write_measurements</name></member>
      <member refid="classclass__algorithm__finite_1ab5734a8b4a609be5f402b87bae2c4f64" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>write_profiling</name></member>
      <member refid="classclass__algorithm__finite_1a00b510706001a64633d113f6ec212e6a" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>write_projection</name></member>
      <member refid="classclass__algorithm__finite_1a586a8ac4f8036c870b826485a42bd6d8" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>write_sim_status</name></member>
      <member refid="classclass__algorithm__finite_1a56fa115bbb861cb586ba78ef0624978b" prot="public" virt="virtual"><scope>class_algorithm_finite</scope><name>write_state</name></member>
      <member refid="classclass__algorithm__finite_1a3907217095a878d781f55a6771b9c0ca" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>X_mat</name></member>
      <member refid="classclass__algorithm__finite_1aaf142efbc8a5964f4741510ab7028c91" prot="public" virt="non-virtual"><scope>class_algorithm_finite</scope><name>X_mpo_vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
