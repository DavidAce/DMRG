<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ceres__subspace_8cpp" kind="file" language="C++">
    <compoundname>ceres_subspace.cpp</compoundname>
    <includes refid="ceres__subspace__functor_8h" local="yes">ceres_subspace_functor.h</includes>
    <includes local="no">iostream</includes>
    <includes refid="class__simulation__status_8h" local="no">simulation/class_simulation_status.h</includes>
    <includes refid="class__eigsolver_8h" local="no">math/class_eigsolver.h</includes>
    <includes refid="matrix__product__stl_8h" local="no">math/arpack_extra/matrix_product_stl.h</includes>
    <includes refid="class__state__finite_8h" local="no">state/class_state_finite.h</includes>
    <includes refid="nmspc__settings_8h" local="no">simulation/nmspc_settings.h</includes>
    <includes refid="nmspc__random_8h" local="no">math/nmspc_random.h</includes>
    <incdepgraph>
      <node id="3699">
        <label>Eigen/SparseLU</label>
      </node>
      <node id="3669">
        <label>list</label>
      </node>
      <node id="3724">
        <label>locale</label>
      </node>
      <node id="3695">
        <label>iomanip</label>
      </node>
      <node id="3721">
        <label>limits</label>
      </node>
      <node id="3696">
        <label>Eigen/LU</label>
      </node>
      <node id="3705">
        <label>iterator</label>
      </node>
      <node id="3729">
        <label>cstdint</label>
      </node>
      <node id="3682">
        <label>ceres/ceres.h</label>
      </node>
      <node id="3701">
        <label>state/class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3702" relation="include">
        </childnode>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3709" relation="include">
        </childnode>
        <childnode refid="3710" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
      </node>
      <node id="3720">
        <label>cassert</label>
      </node>
      <node id="3706">
        <label>general/nmspc_type_check.h</label>
        <link refid="nmspc__type__check_8h"/>
        <childnode refid="3707" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
      </node>
      <node id="3726">
        <label>stdexcept</label>
      </node>
      <node id="3679">
        <label>Eigen/Core</label>
      </node>
      <node id="3713">
        <label>math/nmspc_random.h</label>
        <link refid="nmspc__random_8h"/>
        <childnode refid="3714" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3715" relation="include">
        </childnode>
      </node>
      <node id="3667">
        <label>string</label>
      </node>
      <node id="3686">
        <label>hdf5_hl.h</label>
      </node>
      <node id="3674">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="3675" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
      </node>
      <node id="3671">
        <label>io/nmspc_logger.h</label>
        <link refid="nmspc__logger_8h"/>
        <childnode refid="3672" relation="include">
        </childnode>
        <childnode refid="3673" relation="include">
        </childnode>
      </node>
      <node id="3716">
        <label>cinttypes</label>
      </node>
      <node id="3690">
        <label>map</label>
      </node>
      <node id="3683">
        <label>simulation/class_simulation_status.h</label>
        <link refid="class__simulation__status_8h"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3684" relation="include">
        </childnode>
        <childnode refid="3685" relation="include">
        </childnode>
        <childnode refid="3686" relation="include">
        </childnode>
      </node>
      <node id="3707">
        <label>experimental/type_traits</label>
      </node>
      <node id="3665">
        <label>tools/nmspc_tools.h</label>
        <link refid="nmspc__tools_8h"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3669" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3671" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3677" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
      </node>
      <node id="3680">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="3688">
        <label>math/arpack_extra/arpackpp_solver.h</label>
        <link refid="arpackpp__solver_8h"/>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
      </node>
      <node id="3694">
        <label>matrix_product_dense.h</label>
        <link refid="matrix__product__dense_8h"/>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3695" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3664" relation="include">
        </childnode>
        <childnode refid="3696" relation="include">
        </childnode>
      </node>
      <node id="3703">
        <label>state/class_environment.h</label>
        <link refid="class__environment_8h"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3708" relation="include">
        </childnode>
      </node>
      <node id="3673">
        <label>spdlog/fmt/bundled/ranges.h</label>
      </node>
      <node id="3715">
        <label>pcg/pcg_random.hpp</label>
        <link refid="pcg__random_8hpp"/>
        <childnode refid="3716" relation="include">
        </childnode>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3718" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
        <childnode refid="3720" relation="include">
        </childnode>
        <childnode refid="3721" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3722" relation="include">
        </childnode>
        <childnode refid="3723" relation="include">
        </childnode>
        <childnode refid="3724" relation="include">
        </childnode>
        <childnode refid="3725" relation="include">
        </childnode>
        <childnode refid="3726" relation="include">
        </childnode>
        <childnode refid="3727" relation="include">
        </childnode>
      </node>
      <node id="3710">
        <label>model/class_model_base.h</label>
        <link refid="class__model__base_8h"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
        <childnode refid="3671" relation="include">
        </childnode>
      </node>
      <node id="3692">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="3698">
        <label>Eigen/Sparse</label>
      </node>
      <node id="3714">
        <label>random</label>
      </node>
      <node id="3700">
        <label>math/arpack_extra/matrix_product_stl.h</label>
        <link refid="matrix__product__stl_8h"/>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3695" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
      </node>
      <node id="3712">
        <label>simulation/enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="3730">
        <label>cstdio</label>
      </node>
      <node id="3677">
        <label>tools/finite/opt-internals/enum_classes.h</label>
        <link refid="enum__classes_8h"/>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3678" relation="include">
        </childnode>
      </node>
      <node id="3672">
        <label>spdlog/logger.h</label>
      </node>
      <node id="3709">
        <label>state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3702" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
      </node>
      <node id="3681">
        <label>general/nmspc_omp.h</label>
        <link refid="nmspc__omp_8h"/>
        <childnode refid="3680" relation="include">
        </childnode>
      </node>
      <node id="3702">
        <label>optional</label>
      </node>
      <node id="3670">
        <label>vector</label>
      </node>
      <node id="3708">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="3663">
        <label>tools/finite/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="3664" relation="include">
        </childnode>
        <childnode refid="3665" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3681" relation="include">
        </childnode>
        <childnode refid="3682" relation="include">
        </childnode>
      </node>
      <node id="3727">
        <label>pcg_extras.hpp</label>
        <link refid="pcg__extras_8hpp"/>
        <childnode refid="3716" relation="include">
        </childnode>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3718" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
        <childnode refid="3720" relation="include">
        </childnode>
        <childnode refid="3721" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3722" relation="include">
        </childnode>
        <childnode refid="3723" relation="include">
        </childnode>
        <childnode refid="3724" relation="include">
        </childnode>
        <childnode refid="3705" relation="include">
        </childnode>
        <childnode refid="3728" relation="include">
        </childnode>
      </node>
      <node id="3664">
        <label>complex.h</label>
      </node>
      <node id="3725">
        <label>new</label>
      </node>
      <node id="3691">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="3723">
        <label>utility</label>
      </node>
      <node id="3684">
        <label>array</label>
      </node>
      <node id="3678">
        <label>sstream</label>
      </node>
      <node id="3728">
        <label>pcg_uint128.hpp</label>
        <link refid="pcg__uint128_8hpp"/>
        <childnode refid="3729" relation="include">
        </childnode>
        <childnode refid="3730" relation="include">
        </childnode>
        <childnode refid="3720" relation="include">
        </childnode>
        <childnode refid="3731" relation="include">
        </childnode>
        <childnode refid="3723" relation="include">
        </childnode>
        <childnode refid="3732" relation="include">
        </childnode>
        <childnode refid="3722" relation="include">
        </childnode>
      </node>
      <node id="3697">
        <label>matrix_product_sparse.h</label>
        <link refid="matrix__product__sparse_8h"/>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3695" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3698" relation="include">
        </childnode>
        <childnode refid="3699" relation="include">
        </childnode>
      </node>
      <node id="3685">
        <label>hdf5.h</label>
      </node>
      <node id="3693">
        <label>math/arpack_extra/matrix_recast.h</label>
        <link refid="matrix__recast_8h"/>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3694" relation="include">
        </childnode>
        <childnode refid="3697" relation="include">
        </childnode>
      </node>
      <node id="3718">
        <label>cstdlib</label>
      </node>
      <node id="3676">
        <label>iostream</label>
      </node>
      <node id="3661">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp</label>
        <link refid="ceres__subspace_8cpp"/>
        <childnode refid="3662" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3683" relation="include">
        </childnode>
        <childnode refid="3687" relation="include">
        </childnode>
        <childnode refid="3700" relation="include">
        </childnode>
        <childnode refid="3701" relation="include">
        </childnode>
        <childnode refid="3711" relation="include">
        </childnode>
        <childnode refid="3713" relation="include">
        </childnode>
      </node>
      <node id="3717">
        <label>cstddef</label>
      </node>
      <node id="3689">
        <label>math/nmspc_eigutils.h</label>
        <link refid="nmspc__eigutils_8h"/>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3684" relation="include">
        </childnode>
        <childnode refid="3690" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3691" relation="include">
        </childnode>
        <childnode refid="3692" relation="include">
        </childnode>
      </node>
      <node id="3731">
        <label>climits</label>
      </node>
      <node id="3675">
        <label>chrono</label>
      </node>
      <node id="3687">
        <label>math/class_eigsolver.h</label>
        <link refid="class__eigsolver_8h"/>
        <childnode refid="3688" relation="include">
        </childnode>
        <childnode refid="3693" relation="include">
        </childnode>
        <childnode refid="3689" relation="include">
        </childnode>
      </node>
      <node id="3662">
        <label>ceres_subspace_functor.h</label>
        <link refid="ceres__subspace__functor_8h"/>
        <childnode refid="3663" relation="include">
        </childnode>
      </node>
      <node id="3722">
        <label>type_traits</label>
      </node>
      <node id="3668">
        <label>complex</label>
      </node>
      <node id="3711">
        <label>simulation/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3712" relation="include">
        </childnode>
      </node>
      <node id="3704">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3681" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3698" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
        <childnode refid="3705" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3695" relation="include">
        </childnode>
        <childnode refid="3706" relation="include">
        </childnode>
      </node>
      <node id="3719">
        <label>cstring</label>
      </node>
      <node id="3666">
        <label>memory</label>
      </node>
      <node id="3732">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ceres__subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" prot="public" static="no">
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using MatrixType =  Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="17" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ceres__subspace_8cpp_1ae7dd60b97be137131ac96a20f8f727ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd, Eigen::VectorXd, double &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd,Eigen::VectorXd,Eigen::VectorXd,double&gt; filter_states</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;eigvecs, const Eigen::VectorXd &amp;eigvals, Eigen::VectorXd &amp;overlaps, double maximum_subspace_error, size_t max_accept)</argsstring>
        <name>filter_states</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>eigvecs</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>eigvals</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maximum_subspace_error</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="41" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="41" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1a44e4c5ba3e9d3317929786bec5118f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, int &gt;</type>
        <definition>std::pair&lt;double,int&gt; get_best_variance_in_window</definition>
        <argsstring>(const class_state_finite &amp;state, const Eigen::MatrixXcd &amp;eigvecs, const Eigen::VectorXd &amp;energies_per_site, double lbound, double ubound)</argsstring>
        <name>get_best_variance_in_window</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>eigvecs</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>energies_per_site</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="87" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="87" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, int &gt;</type>
        <definition>std::pair&lt;double,int&gt; get_best_overlap_in_window</definition>
        <argsstring>(const Eigen::VectorXd &amp;overlaps, const Eigen::VectorXd &amp;energies_per_site, double lbound, double ubound)</argsstring>
        <name>get_best_overlap_in_window</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>energies_per_site</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="108" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="108" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1aa4a9edd4ac9e5d1b3cbec215a963e325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; double, int &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;double,int&gt; &gt; get_best_candidates_in_window</definition>
        <argsstring>(const Eigen::VectorXd &amp;overlaps, const Eigen::VectorXd &amp;energies_per_site, double lbound, double ubound)</argsstring>
        <name>get_best_candidates_in_window</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>energies_per_site</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="129" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="129" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_full</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log)</argsstring>
        <name>find_subspace_full</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1aa8cc0fb86f571fb919948fcd4741c4c8" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="164" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="164" bodyend="203"/>
        <references refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" compoundref="nmspc__tools_8h" startline="379">tools::common::profile::t_eig</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_part</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, double energy_target, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log, OptMode optMode)</argsstring>
        <name>find_subspace_part</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>energy_target</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1aa8cc0fb86f571fb919948fcd4741c4c8" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <param>
          <type><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode" kindref="compound">OptMode</ref></type>
          <declname>optMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="209" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="209" bodyend="258"/>
        <references refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" compoundref="nmspc__tools_8h" startline="379">tools::common::profile::t_eig</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1ac7ad0d99f7728d8a754f0055e8403fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace</definition>
        <argsstring>(const class_state_finite &amp;state, OptMode optMode)</argsstring>
        <name>find_subspace</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode" kindref="compound">OptMode</ref></type>
          <declname>optMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="266" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="266" bodyend="310"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-07-15.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ceres__subspace__functor_8h" kindref="compound">ceres_subspace_functor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__simulation__status_8h" kindref="compound">simulation/class_simulation_status.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__eigsolver_8h" kindref="compound">math/class_eigsolver.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix__product__stl_8h" kindref="compound">math/arpack_extra/matrix_product_stl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__finite_8h" kindref="compound">state/class_state_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">simulation/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__random_8h" kindref="compound">math/nmspc_random.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt" kindref="compound">tools::finite::opt</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internal" kindref="compound">tools::finite::opt::internal</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="ceres__subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref><sp/>=<sp/>Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="namespacetools_1_1finite_1_1opt_1_1internal_1aea0b5cf7e49905cefb8efed498ace3d1" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aea0b5cf7e49905cefb8efed498ace3d1" kindref="member">tools::finite::opt::internal::generate_size_list</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>shape){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_nev<sp/>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(shape<sp/>&lt;=<sp/>512)<sp/><sp/>{max_nev<sp/>=<sp/>shape/2;}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>512<sp/><sp/>and<sp/>shape<sp/>&lt;=<sp/>1024)<sp/>{max_nev<sp/>=<sp/>shape/4;}<sp/></highlight><highlight class="comment">//<sp/>should<sp/>do<sp/>full<sp/>diag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>1024<sp/>and<sp/>shape<sp/>&lt;=<sp/>2048)<sp/>{max_nev<sp/>=<sp/>shape/4;}<sp/></highlight><highlight class="comment">//<sp/>should<sp/>do<sp/>full<sp/>diag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>2048<sp/>and<sp/>shape<sp/>&lt;=<sp/>4096)<sp/>{max_nev<sp/>=<sp/>64;}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>4096<sp/>and<sp/>shape<sp/>&lt;=<sp/>8192)<sp/>{max_nev<sp/>=<sp/>32;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{max_nev<sp/>=<sp/>16;}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_nev<sp/>=<sp/>std::min(std::min(8,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)shape),max_nev);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nev_list<sp/>=<sp/>{min_nev};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_nev<sp/>=<sp/>min_nev;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp_nev<sp/>&lt;<sp/>max_nev){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_nev<sp/>=<sp/>std::min(4*tmp_nev,<sp/>max_nev);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nev_list.push_back(tmp_nev);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nev_list;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="ceres__subspace_8cpp_1ae7dd60b97be137131ac96a20f8f727ed" refkind="member"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,Eigen::VectorXd,Eigen::VectorXd,double&gt;<sp/><ref refid="ceres__subspace_8cpp_1ae7dd60b97be137131ac96a20f8f727ed" kindref="member">filter_states</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXcd<sp/>&amp;eigvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>eigvals,<sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maximum_subspace_error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_accept){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_accept<sp/>=<sp/>std::min(8ul,(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)eigvals.size());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>max_accept<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::min(max_accept,(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)eigvals.size());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_accept<sp/>==<sp/>max_accept)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,<sp/>eigvals,overlaps,<sp/>1.0<sp/>-<sp/>overlaps.cwiseAbs2().sum());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/><sp/><sp/><sp/>overlaps_filtered<sp/>=<sp/>overlaps;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/><sp/>overlaps_accepted_idx;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>overlaps_accepted;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error<sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>maximum_subspace_error<sp/><sp/><sp/>=<sp/>epsilon<sp/>+<sp/>std::min(subspace_error,<sp/>maximum_subspace_error);<sp/></highlight><highlight class="comment">//Make<sp/>sure<sp/>you<sp/>don&apos;t<sp/>actually<sp/>increase<sp/>the<sp/>allowed<sp/>subspace<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Filtering<sp/>states<sp/>keeping<sp/>between<sp/>{}<sp/>to<sp/>{},<sp/>max<sp/>subspace<sp/>error<sp/>(log10)<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>min_accept,max_accept,<sp/>std::log10(maximum_subspace_error));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1ops_1a465b189c211d37ae93982966c8baf98c" kindref="member">overlap</ref><sp/>=<sp/>overlaps_filtered.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_accepted_idx.push_back(idx);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_accepted<sp/><sp/><sp/><sp/>.push_back(overlap);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXd&gt;<sp/>overlaps_map(overlaps_accepted.data(),overlaps_accepted.size());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_error<sp/><sp/>=<sp/>1.0<sp/>-<sp/>overlaps_map.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_accepted.size()<sp/>&gt;=<sp/>min_accept){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_error<sp/>&lt;<sp/>maximum_subspace_error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_accepted.size()<sp/>&gt;=<sp/>max_accept)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_filtered(idx)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_filtered.sum()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs_filtered(eigvecs.rows(),overlaps_accepted.size());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals_filtered(overlaps_accepted.size());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>overlaps_filtered.resize(overlaps_accepted.size());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>:<sp/>overlaps_accepted_idx){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs_filtered.col(col_num)<sp/>=<sp/>eigvecs.col(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_filtered<sp/><sp/><sp/><sp/>(col_num)<sp/>=<sp/>eigvals(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_filtered<sp/><sp/><sp/>(col_num)<sp/>=<sp/>overlaps(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col_num++;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Filtered<sp/>from<sp/>{}<sp/>down<sp/>to<sp/>{}<sp/>states&quot;</highlight><highlight class="normal">,<sp/>eigvals.size(),<sp/>eigvals_filtered.size());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>error<sp/>after<sp/>filter<sp/>log10(1-eps)<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>std::log10(epsilon<sp/>+<sp/>subspace_error));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs_filtered,<sp/>eigvals_filtered,overlaps_filtered,<sp/>subspace_error);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">std::pair&lt;double,int&gt;</highlight></codeline>
<codeline lineno="87" refid="ceres__subspace_8cpp_1a44e4c5ba3e9d3317929786bec5118f38" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1a44e4c5ba3e9d3317929786bec5118f38" kindref="member">get_best_variance_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXcd<sp/>&amp;eigvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>energies_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>variances(eigvecs.cols());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>&lt;<sp/>eigvecs.cols();<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>++){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>&lt;=<sp/><sp/>ubound<sp/>and<sp/>energies_per_site(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>&gt;=<sp/>lbound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multitheta<sp/>=<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(eigvecs.col(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>),<sp/>state.<ref refid="classclass__state__finite_1a27ca02fe2eeb1918576973124bbf7b82" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variances(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variances(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variances.minCoeff()<sp/>==<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>eigenstates<sp/>in<sp/>with<sp/>good<sp/>variance<sp/>in<sp/>given<sp/>energy<sp/>window<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>lbound,ubound);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>energy<sp/>range<sp/>is<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>energies_per_site.minCoeff(),<sp/>energies_per_site.maxCoeff());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::numeric_limits&lt;double&gt;::quiet_NaN(),<sp/>-1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>min_variance_idx;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_variance_val<sp/>=<sp/>variances.minCoeff(&amp;min_variance_idx);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(min_variance_val,<sp/>min_variance_idx);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" refkind="member"><highlight class="normal">std::pair&lt;double,int&gt;<sp/><ref refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" kindref="member">get_best_overlap_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>energies_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(overlaps.size()<sp/>==<sp/>energies_per_site.size()<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;get_best_overlap_in_window:<sp/>Mismatch<sp/>in<sp/>overlaps<sp/>and<sp/>energies_per_site<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps_in_window<sp/>=<sp/>overlaps;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>overlaps.size();<sp/>i++){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(i)<sp/>&gt;<sp/>ubound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(i)<sp/>&lt;<sp/>lbound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlaps_in_window.maxCoeff()<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>overlapping<sp/>eigenstates<sp/>in<sp/>given<sp/>energy<sp/>window<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>lbound,ubound);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>energy<sp/>range<sp/>is<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>energies_per_site.minCoeff(),<sp/>energies_per_site.maxCoeff());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::numeric_limits&lt;double&gt;::quiet_NaN()<sp/>,<sp/>-1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>max_overlap_idx;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps_in_window.maxCoeff(&amp;max_overlap_idx);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(max_overlap,max_overlap_idx);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="ceres__subspace_8cpp_1aa4a9edd4ac9e5d1b3cbec215a963e325" refkind="member"><highlight class="normal">std::vector&lt;std::pair&lt;double,int&gt;&gt;<sp/><ref refid="ceres__subspace_8cpp_1aa4a9edd4ac9e5d1b3cbec215a963e325" kindref="member">get_best_candidates_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>energies_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(overlaps.size()<sp/>==<sp/>energies_per_site.size()<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;get_best_overlap_in_window:<sp/>Mismatch<sp/>in<sp/>overlaps<sp/>and<sp/>energies_per_site<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;double,int&gt;&gt;<sp/>overlaps_in_window;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>overlaps.size();<sp/>i++){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(i)<sp/>&lt;<sp/>ubound<sp/>and<sp/>energies_per_site(i)<sp/>&gt;<sp/>lbound)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_in_window.emplace_back(std::make_pair(overlaps(i),i));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlaps_in_window.empty()){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>candidate<sp/>eigenstates<sp/>in<sp/>given<sp/>energy<sp/>window<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>lbound,ubound);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>energy<sp/>range<sp/>is<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>energies_per_site.minCoeff(),<sp/>energies_per_site.maxCoeff());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overlaps_in_window;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(overlaps_in_window.begin(),overlaps_in_window.end());<sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>in<sp/>ascending<sp/>order<sp/>of<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;double,int&gt;&gt;<sp/>candidates;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda_sq_sum<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acc,<sp/>std::pair&lt;double,int&gt;<sp/>&amp;<sp/>p){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>+<sp/>p.first<sp/>*<sp/>p.first;<sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_in_window.empty())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/>=<sp/>std::accumulate(candidates.begin(),candidates.end(),<sp/>0.0,<sp/>lambda_sq_sum);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Sq_sum_overlap:<sp/><sp/>{}&quot;</highlight><highlight class="normal">,sq_sum_overlap);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sq_sum_overlap<sp/><sp/>&gt;<sp/>0.55)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Just<sp/>a<sp/>bit<sp/>more<sp/>than<sp/>half,<sp/>to<sp/>catch<sp/>near<sp/>cat<sp/>states.<sp/>Half<sp/>means<sp/>cat<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidates.emplace_back(overlaps_in_window.back());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_in_window.pop_back();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Found<sp/>{}<sp/>candidates.&quot;</highlight><highlight class="normal">,candidates.size());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidates;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="164" refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/><sp/>eigvecs;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(!std::is_same&lt;Scalar,<sp/>double&gt;::value)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>eigensolver<sp/>--<sp/>reason:<sp/>Full<sp/>diagonalization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error<sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nev<sp/>=<sp/>eigvecs.cols();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_error),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>0);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="209" refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" kindref="member">find_subspace_part</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log,<ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode" kindref="compound">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>partial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>StlMatrixProduct,<sp/>because<sp/>the<sp/>PartialPivLU<sp/>will<sp/>overwrite<sp/>the<sp/>data<sp/>in<sp/>H_local<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_stl_matrix_product" kindref="compound">StlMatrixProduct&lt;Scalar&gt;</ref><sp/>hamiltonian(H_local.data(),H_local.rows(),Form::SYMMETRIC,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.<ref refid="class_stl_matrix_product_1a9e4bb7514f7e50cef962ce232cf3728d" kindref="member">set_shift</ref>(energy_target);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.FactorOP();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_lu<sp/>=<sp/>hamiltonian.t_factorOp.get_last_time_interval();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap_threshold<sp/>=<sp/>optMode.<ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_enum_base_1aac4e872b873faefdc5bef1184688227e" kindref="member">option</ref><sp/>==<sp/><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode_1af6ceddf328f9ada747dd06117ca6ecda" kindref="member">OptMode::OVERLAP</ref><sp/>?<sp/>1.0/std::sqrt(2.0)<sp/>:<sp/>1.0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a919a47b6fd75d48e821eb46f8fac085c" kindref="member">solverConf</ref>.<ref refid="classeigutils_1_1eig_config_1ae1fe3585b18c19cc2478fb387225eca9" kindref="member">eigThreshold</ref><sp/>=<sp/><ref refid="namespacesettings_1_1precision_1a33fddd896c5264ff17a8d973fec4ba1a" kindref="member">settings::precision::eig_threshold</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;exhausted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nev<sp/>:<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aea0b5cf7e49905cefb8efed498ace3d1" kindref="member">generate_size_list</ref>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size())){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa09d98b6edc6986cf4e905cf2527165f" kindref="member">eigs_stl</ref>(hamiltonian,nev,-1,<sp/>energy_target,Form::SYMMETRIC,Ritz::LM,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd<sp/>&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data()<sp/><sp/><sp/><sp/><sp/><sp/>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;std::complex&lt;double&gt;,<sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>&gt;::value){</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error<sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_error),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a35ee857d14946312cdb143d4f94055b4" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>t_lu);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_lu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-6)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;max_overlap<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>+<sp/>std::to_string(max_overlap));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sq_sum_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-6)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;eps<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(sq_sum_overlap));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>0.0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;min_overlap<sp/>smaller<sp/>than<sp/>zero:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_overlap));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>max_overlap_threshold<sp/>)<sp/><sp/><sp/><sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;overlap<sp/>is<sp/>good<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_error<sp/>&lt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;subspace<sp/>error<sp/>is<sp/>low<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>partial<sp/>eigensolver<sp/>--<sp/>reason:<sp/>{}&quot;</highlight><highlight class="normal">,reason);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="266" refid="ceres__subspace_8cpp_1ac7ad0d99f7728d8a754f0055e8403fad" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1ac7ad0d99f7728d8a754f0055e8403fad" kindref="member">find_subspace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>state,<sp/><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode" kindref="compound">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a50890ed92dde9137470ada59dc2dfb60" kindref="member">t_ham</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>H_local<sp/>=<sp/>tools::finite::opt::internal::get_multi_hamiltonian_matrix&lt;Scalar&gt;(state);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a50890ed92dde9137470ada59dc2dfb60" kindref="member">t_ham</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multitheta<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a75c2e8572efd17c8d4bf2948f4bfebc3" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>eig_log;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>multitheta<sp/>is<sp/>small<sp/>enough<sp/>you<sp/>can<sp/>afford<sp/>full<sp/>diag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)multitheta.size()<sp/>&lt;=<sp/><ref refid="namespacesettings_1_1precision_1a08350baa897c7ddaa09c478182e0f818" kindref="member">settings::precision::max_size_full_diag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(H_local,<sp/>multitheta,<sp/>eig_log);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.<ref refid="classclass__state__finite_1ae9674e542cf36b0b22d4d85abf0b733b" kindref="member">isReduced</ref>())<sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4b34b079f086d27e33b97635b469943c" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1af68ec1bfec44e2ebd09751dbcc46439b" kindref="member">tools::finite::measure::energy</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Energy<sp/>target,<sp/>per<sp/>site:<sp/>{}&quot;,energy_target/state.get_length());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>target<sp/>+<sp/>energy<sp/>reduced<sp/>=<sp/>energy<sp/>per<sp/>site:<sp/>{}<sp/>+<sp/>{}<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_target/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>()/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(energy_target<sp/>+<sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" kindref="member">find_subspace_part</ref>(H_local,<sp/>multitheta,<sp/>energy_target,<sp/>eig_log,<sp/>optMode);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Eigenvalue<sp/>range:<sp/>{}<sp/>--&gt;<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eigvals.minCoeff()<sp/>+<sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eigvals.maxCoeff()<sp/>+<sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>eigvals.array()<sp/>+<sp/>state.get_energy_reduced();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Eigenvalue<sp/>range:<sp/>{}<sp/>--&gt;<sp/>{}&quot;,<sp/>eigvals.minCoeff()/state.get_length(),eigvals.maxCoeff()/state.get_length());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1aa8e95624c729e891a1ff9c755a26446c" kindref="member">reports::print_report</ref>(eig_log);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,double&gt;::value){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">Textra::subtract_phase</ref>(eigvecs);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;truncating<sp/>imag<sp/>of<sp/>eigvecs,<sp/>sum:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>eigvecs.imag().cwiseAbs().sum()<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>eigvecs.real();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,<sp/>eigvals);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;</highlight></codeline>
<codeline lineno="323" refid="namespacetools_1_1finite_1_1opt_1_1internal_1a3a33e74e9df3aa34c3ceccfa589c1cf1" refkind="member"><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a3a33e74e9df3aa34c3ceccfa589c1cf1" kindref="member">tools::finite::opt::internal::ceres_subspace_optimization</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__simulation__status" kindref="compound">class_simulation_status</ref><sp/>&amp;sim_status,<sp/><ref refid="classtools_1_1finite_1_1opt_1_1_opt_type" kindref="compound">OptType</ref><sp/>optType,<sp/><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode" kindref="compound">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>in<sp/>SUBSPACE<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ab1cc211efd9f963d899d378e4660be72" kindref="member">tools::common::profile::t_opt</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__state__finite_1a5d7668429213b903702461426ee3fa98" kindref="member">class_state_finite::Scalar</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1af98ed8738849042e8bd79a77c8a783db" kindref="member">ceres_default_options</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_num_iterations<sp/>=<sp/>2000;<sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>a<sp/>lot<sp/>of<sp/>iterations<sp/>to<sp/>recover<sp/>from<sp/>initial<sp/>guesses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>options.function_tolerance<sp/>=<sp/>1e-12;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta_old_variance<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacesettings_1_1precision_1ad074bc89d66adfe8a255421dc981cdd2" kindref="member">settings::precision::subspace_error_factor</ref><sp/>*<sp/>theta_old_variance;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>std::min(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref>,<sp/><ref refid="namespacesettings_1_1precision_1abb0be16f39f773d6453e35d151450191" kindref="member">settings::precision::max_subspace_error</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>std::max(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref>,<sp/><ref refid="namespacesettings_1_1precision_1a9d89b844f40c612f7f37d7f0b873382c" kindref="member">settings::precision::min_subspace_error</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>theta_old<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a75c2e8572efd17c8d4bf2948f4bfebc3" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_old_vec<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/><sp/>(theta_old.data(),<sp/>theta_old.size());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType.<ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_enum_base_1aac4e872b873faefdc5bef1184688227e" kindref="member">option</ref>){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a958448d4909b92010c81d52d3e6ad8f1" kindref="member">opt::TYPE::CPLX</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;Scalar&gt;(state,optMode);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">opt::TYPE::REAL</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;double&gt;(state,optMode);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(state.get_position()<sp/>&lt;<sp/>2){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;eigvals:<sp/>\n&quot;<sp/>&lt;&lt;<sp/>eigvals_per_site_unreduced<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>found<sp/>with<sp/>{}<sp/>eigenvectors&quot;</highlight><highlight class="normal">,<sp/>eigvecs.cols());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_old_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap_energy<sp/><sp/><sp/>=<sp/>eigvals_per_site_unreduced(idx);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>max_overlap_inwindow<sp/>=<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref><sp/>&lt;<sp/>max_overlap_energy<sp/>and<sp/>max_overlap_energy<sp/>&lt;<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Max<sp/>overlap:<sp/>{}<sp/>--<sp/>Energy<sp/>per<sp/>site:<sp/>{}<sp/>--<sp/>Idx:<sp/>{}<sp/>--<sp/>inside<sp/>of<sp/>window:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>max_overlap,<sp/>max_overlap_energy,<sp/>idx,max_overlap_inwindow<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>options<sp/>LC<sp/>-<sp/>E<sp/>we<sp/>need<sp/>to<sp/>filter<sp/>down<sp/>the<sp/>set<sp/>of<sp/>states<sp/>in<sp/>case<sp/>we<sp/>do<sp/>subspace<sp/>optimization,<sp/>otherwise<sp/>we<sp/>can<sp/>easily<sp/>run<sp/>out<sp/>of<sp/>memory.<sp/>64<sp/>candidates<sp/>should<sp/>do<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>subspace_error_unfiltered<sp/>=<sp/>1.0<sp/>-<sp/>overlaps.cwiseAbs2().sum();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error_filtered;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,overlaps,subspace_error_filtered)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae7dd60b97be137131ac96a20f8f727ed" kindref="member">filter_states</ref>(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a2249f3765bcb5866af4926949fb36273" kindref="member">subspace_error_threshold</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.<ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bool<sp/>force_accept<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Current<sp/>energy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref>(state));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Current<sp/>energy<sp/>(2site)<sp/><sp/>:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1twosite_1ab6ec7489e8a30af7cfff61b1fe4af8b0" kindref="member">tools::finite::measure::twosite::energy_per_site</ref>(state,state.<ref refid="classclass__state__finite_1a5b4d41aa8fd51633e490fe64e7d162a0" kindref="member">get_theta</ref>()));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Current<sp/>energy<sp/>(multi)<sp/><sp/>:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1multisite_1a95b9337d770483a28e7176bfbca93bfc" kindref="member">tools::finite::measure::multisite::energy_per_site</ref>(state,state.<ref refid="classclass__state__finite_1a75c2e8572efd17c8d4bf2948f4bfebc3" kindref="member">get_multitheta</ref>()));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Current<sp/>variance:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>std::log10(theta_old_variance)<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/>get_best_overlap_in_window(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optMode<sp/>==<sp/><ref refid="classtools_1_1finite_1_1opt_1_1_opt_mode_1af6ceddf328f9ada747dd06117ca6ecda" kindref="member">OptMode::OVERLAP</ref>){</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[best_overlap,best_overlap_idx]<sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" kindref="member">get_best_overlap_in_window</ref>(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_overlap_idx<sp/><sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Option<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;trace(&quot;No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>best<sp/>overlap<sp/>out<sp/>of<sp/>window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/><sp/><sp/>best_overlap_theta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Textra::MatrixTensorMap(eigvecs.col(0),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>best_overlap_theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta_old;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_overlap<sp/>&lt;<sp/>0.0){</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Overlap<sp/>is<sp/>too,<sp/>bad,<sp/>just<sp/>go<sp/>to<sp/>the<sp/>next<sp/>site<sp/>and<sp/>hope<sp/>for<sp/>something<sp/>better<sp/>to<sp/>come<sp/>along</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Turn<sp/>this<sp/>option<sp/>off<sp/>with<sp/>best_overlap<sp/>&lt;<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Overlap<sp/>too<sp/>low,<sp/>returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta_old;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>best_overlap_theta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(eigvecs.col(best_overlap_idx),<sp/>state.<ref refid="classclass__state__finite_1a27ca02fe2eeb1918576973124bbf7b82" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best_overlap_energy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eigvals_per_site_unreduced(best_overlap_idx);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best_overlap_variance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,<sp/>best_overlap_theta);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Candidate<sp/>{:&lt;2}<sp/>has<sp/>highest<sp/>overlap:<sp/>Overlap:<sp/>{:.16f}<sp/>Energy:<sp/>{:&gt;20.16f}<sp/>Variance:<sp/>{:&gt;20.16f}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_overlap_idx<sp/>,overlaps(best_overlap_idx)<sp/>,best_overlap_energy<sp/><sp/>,std::log10(best_overlap_variance)<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_overlap_theta;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_of_candidates<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1aa4a9edd4ac9e5d1b3cbec215a963e325" kindref="member">get_best_candidates_in_window</ref>(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_of_candidates.empty()){</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Option<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Went<sp/>for<sp/>option<sp/>A<sp/>--<sp/>No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1ad56a434a1225baa9302e97cee2b7a50b" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta_old;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,3&gt;&gt;<sp/>initial_guess_thetas;</highlight><highlight class="comment">//<sp/>=<sp/>{theta_old};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;candidate<sp/>:<sp/>list_of_candidates){</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>candidate_theta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(eigvecs.col(candidate.second),<sp/>state.<ref refid="classclass__state__finite_1a27ca02fe2eeb1918576973124bbf7b82" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>candidate_energy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eigvals_per_site_unreduced(candidate.second);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>candidate_variance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,<sp/>candidate_theta);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Candidate<sp/>{:&lt;2}<sp/>has<sp/>good<sp/>overlap:<sp/>Overlap:<sp/>{:.16f}<sp/>Energy:<sp/>{:&gt;20.16f}<sp/>Variance:<sp/>{:&gt;20.16f}&quot;</highlight><highlight class="normal">,candidate.second<sp/>,candidate.first<sp/>,candidate_energy<sp/><sp/>,std::log10(candidate_variance)<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_guess_thetas.emplace_back(candidate_theta);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::subspc_opt_tuple&gt;<sp/>opt_log;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::debug){</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_old<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref>(state);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_old<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Current<sp/>state&quot;</highlight><highlight class="normal">,<sp/>theta_old.size(),<sp/>energy_old,<sp/>std::log10(variance_old),<sp/>1.0<sp/>,<sp/>theta_old_vec.norm(),<sp/>0,<sp/>0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Optimizing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>H2_subspace<sp/>=<sp/>tools::finite::opt::internal::get_multi_hamiltonian_squared_subspace_matrix_new&lt;Scalar&gt;(state,<sp/>eigvecs);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optType.<ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_enum_base_1aac4e872b873faefdc5bef1184688227e" kindref="member">option</ref><sp/>==<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">opt::TYPE::REAL</ref>)<sp/>H2_subspace<sp/>=<sp/>H2_subspace.real();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_H2_subspace<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;double,Eigen::Tensor&lt;Scalar,3&gt;&gt;&gt;<sp/>optimized_results;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;theta_initial:<sp/>initial_guess_thetas){</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_initial_map<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/><sp/>(theta_initial.data(),theta_initial.size());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_new;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_new<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_new,variance_new;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>alpha_i<sp/>=<sp/>&lt;theta_initial<sp/>|<sp/>theta_new_i&gt;<sp/>is<sp/>not<sp/>supposed<sp/>to<sp/>be<sp/>squared!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_start<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(theta_initial_map.adjoint()<sp/>*<sp/>eigvecs).normalized()<sp/><sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_start<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eigvecs.adjoint()<sp/>*<sp/>theta_initial_map).normalized()<sp/><sp/>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::debug){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_0<sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.conjugate().asDiagonal()<sp/>).rowwise().sum().normalized();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_0<sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.asDiagonal()<sp/>).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_0_tensor<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(theta_0,state.active_dimensions());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref>(state,theta_0_tensor);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,theta_0_tensor);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(theta_old_vec.dot(theta_0));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Initial<sp/>guess&quot;</highlight><highlight class="normal">,<sp/>theta_old.size(),<sp/>energy_0,<sp/>std::log10(variance_0),<sp/>overlap_0,<sp/>theta_0.norm(),<sp/>0,<sp/>0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt-&gt;tic();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>H2_subspace_old<sp/>=<sp/>tools::finite::opt::internal::get_multi_hamiltonian2_subspace_matrix(state,<sp/>eigvecs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>Hv<sp/>=<sp/>eigvals.asDiagonal()<sp/>*<sp/>theta_start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>H2v<sp/>=<sp/>H2_subspace_old<sp/>*<sp/>theta_start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>vHv<sp/>=<sp/>theta_start.dot(Hv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>vH2v<sp/>=<sp/>theta_start.dot(H2v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>vv<sp/>=<sp/>theta_start.squaredNorm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>ene<sp/>=<sp/>vHv<sp/>/<sp/>vv;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>var<sp/>=<sp/>vH2v<sp/>/<sp/>vv<sp/>-<sp/>ene<sp/>*<sp/>ene;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>ene_init_san<sp/>=<sp/>std::real(ene<sp/>+<sp/>state.get_energy_reduced())<sp/>/<sp/>state.get_length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>var_init_san<sp/>=<sp/>std::real(var)<sp/>/<sp/>state.get_length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt-&gt;toc();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(&quot;Initial<sp/>(matrix)<sp/>old&quot;,<sp/>theta_start.size(),<sp/>ene_init_san,<sp/>std::log10(var_init_san),overlap_0,<sp/>theta_start.norm(),<sp/>0,<sp/>0,<sp/>t_opt-&gt;get_last_time_interval());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>Hv<sp/><sp/>=<sp/>eigvals.asDiagonal()<sp/>*<sp/>theta_start;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>H2v<sp/>=<sp/>H2_subspace.template<sp/>selfadjointView&lt;Eigen::Upper&gt;()*theta_start;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>vHv<sp/><sp/>=<sp/>theta_start.dot(Hv);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>vH2v<sp/>=<sp/>theta_start.dot(H2v);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vv<sp/><sp/><sp/>=<sp/>theta_start.squaredNorm();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>ene<sp/><sp/>=<sp/>vHv/vv;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>var<sp/><sp/>=<sp/>vH2v/vv<sp/>-<sp/>ene*ene;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ene_init_san<sp/>=<sp/>std::real(ene+state.get_energy_reduced())/state.get_length();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var_init_san<sp/>=<sp/>std::real(var)/state.get_length();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Initial<sp/>(matrix)<sp/>new&quot;</highlight><highlight class="normal">,theta_start.size(),<sp/>ene_init_san,<sp/>std::log10(var_init_san),<sp/>overlap_0,theta_start.norm(),<sp/>0,0,<sp/>t_H2_subspace+<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>H2_subspace.isApprox(H2_subspace_old,1e-4)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;H2<sp/>new<sp/>=<sp/>\n&quot;<sp/>&lt;&lt;<sp/>H2_subspace.topLeftCorner(6,6)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;H2<sp/>old<sp/>=<sp/>\n&quot;<sp/>&lt;&lt;<sp/>H2_subspace_old.topLeftCorner(6,6)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;warn(&quot;H2<sp/>subspace<sp/>mismatch:<sp/>{:.16f}&quot;,<sp/>(H2_subspace<sp/>-<sp/>H2_subspace_old).cwiseAbs().sum());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblemSolver::Summary<sp/>summary;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internal" kindref="compound">tools::finite::opt::internal</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter,iter;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(optType.<ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_enum_base_1aac4e872b873faefdc5bef1184688227e" kindref="member">option</ref>){</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a958448d4909b92010c81d52d3e6ad8f1" kindref="member">opt::TYPE::CPLX</ref>:{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start.data()),<sp/>2*theta_start.size());</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>functor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;std::complex&lt;double&gt;</ref>&gt;(state,<sp/>sim_status,H2_subspace,eigvals);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>L-BFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>theta_start_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int)summary.iterations.size();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_count();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_norm();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor-&gt;get_energy();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor-&gt;get_variance();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXcd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start_cast.data()),<sp/>theta_start_cast.size()/2).normalized();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.conjugate().asDiagonal()).rowwise().sum().normalized();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>functor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aef1fe7d7e3b77a23922b15a40a224991a8cf125b0e31559ba75a9d9b4f818a554" kindref="member">opt::TYPE::REAL</ref>:{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>theta_start.real();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>H2_subspace_real<sp/>=<sp/>H2_subspace.real();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>functor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;double&gt;</ref>(state,<sp/>sim_status,H2_subspace_real,eigvals);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>theta_start_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int)summary.iterations.size();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_count();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_norm();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor-&gt;get_energy();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor-&gt;get_variance();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>theta_start_cast.normalized().cast&lt;<ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>&gt;();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs.real()<sp/>*<sp/>theta_start.real().asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>functor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::debug){</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>results<sp/>of<sp/>Ceres<sp/>LBFGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_new<sp/>=<sp/>(theta_old_vec.adjoint()<sp/>*<sp/>theta_new).cwiseAbs().sum();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Ceres<sp/>L-BFGS&quot;</highlight><highlight class="normal">,<sp/>theta_old.size(),<sp/>energy_new,<sp/>std::log10(variance_new),<sp/>overlap_new,<sp/>theta_new.norm(),<sp/>iter,<sp/>counter,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_san<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(theta_new,<sp/>state.active_dimensions());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_san<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref>(state,theta_san);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_san<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,theta_san);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs((variance_san<sp/>-<sp/>variance_new)<sp/>/<sp/>variance_san<sp/>)<sp/>&gt;<sp/>0.01<sp/>)<sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Variance<sp/>mismatch<sp/>in<sp/>sanity<sp/>check:<sp/>{:.16f}<sp/>!=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>variance_san,<sp/>variance_new);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Sanity<sp/>check&quot;</highlight><highlight class="normal">,theta_san.size(),<sp/>energy_san,<sp/>std::log10(variance_san),<sp/>overlap_new,theta_new.norm(),<sp/>0,0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>LBFGS<sp/>after<sp/>{}<sp/>seconds<sp/>({}<sp/>iters).<sp/>Exit<sp/>status:<sp/>{}.<sp/>Message:<sp/>{}&quot;</highlight><highlight class="normal">,summary.total_time_in_seconds,<sp/>summary.iterations.size(),<sp/>ceres::TerminationTypeToString(summary.termination_type)<sp/>,<sp/>summary.message.c_str());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>summary.FullReport()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ab1cc211efd9f963d899d378e4660be72" kindref="member">tools::common::profile::t_opt</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Fine<sp/>tuning<sp/>new<sp/>theta<sp/>after<sp/>SUBSPACE<sp/>optimization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimized_theta<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a0abb0adb09b25c3dee510da447c09678" kindref="member">ceres_direct_optimization</ref>(state,<sp/><ref refid="namespace_textra_1a1ee11e2d4410760ed26158c27a38d2b0" kindref="member">Textra::MatrixTensorMap</ref>(theta_new,<sp/>state.active_dimensions())<sp/>,sim_status,<sp/>optType);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimized_energy<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref>(state,optimized_theta);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimized_variance<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,optimized_theta);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimized_vec<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/><sp/>(optimized_theta.data(),optimized_theta.size());</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimized_overlap<sp/><sp/>=<sp/>std::abs(theta_old_vec.dot(optimized_vec));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Ceres<sp/>L-BFGS<sp/>(direct)<sp/>&quot;</highlight><highlight class="normal">,optimized_theta.size(),<sp/>optimized_energy,<sp/>std::log10(optimized_variance),<sp/>optimized_overlap,optimized_vec.norm(),<sp/>0,0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aed9abe9539378a8b85014a980566781b" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_results.emplace_back(std::make_pair(optimized_variance,optimized_theta));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>up<sp/>and<sp/>print<sp/>reports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1aa8e95624c729e891a1ff9c755a26446c" kindref="member">reports::print_report</ref>(opt_log);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>thetas<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::sort(optimized_results.begin(),optimized_results.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(optimized_results.begin(),<sp/>optimized_results.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;left,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;right)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left.first<sp/>&lt;<sp/>right.first;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Return<sp/>the<sp/>best<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optimized_results.back().second;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>theta_direct_fine_tuned<sp/><sp/><sp/><sp/>=<sp/><sp/>ceres_direct_optimization(state,<sp/>Textra::Matrix_to_Tensor(theta_new,<sp/>state.active_dimensions())<sp/>,sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>theta_direct_best_overlap<sp/><sp/>=<sp/><sp/>ceres_direct_optimization(state,<sp/>best_overlap_theta<sp/>,sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>theta_direct_current_theta<sp/>=<sp/><sp/>ceres_direct_optimization(state,<sp/>theta_old<sp/>,sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>variance_direct_fine_tuned<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>tools::finite::measure::energy_variance_per_site(state,theta_direct_fine_tuned<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>variance_direct_best_overlap<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>tools::finite::measure::energy_variance_per_site(state,theta_direct_best_overlap<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>variance_direct_current_theta<sp/><sp/><sp/><sp/>=<sp/><sp/>tools::finite::measure::energy_variance_per_site(state,theta_direct_current_theta);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>spin_components<sp/>=<sp/>tools::finite::measure::spin_components(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;spin<sp/>component<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>spin_components[0]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;spin<sp/>component<sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>spin_components[1]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;spin<sp/>component<sp/>z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>spin_components[2]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;suspace_error<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(std::numeric_limits&lt;double&gt;::epsilon()<sp/>+<sp/>subspace_error_filtered)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;best_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;variance_original<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(theta_old_variance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;variance_subspace_optimized<sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(variance_new<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;variance_direct_fine_tuned<sp/><sp/><sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(variance_direct_fine_tuned<sp/><sp/><sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;variance_direct_best_overlap<sp/><sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(variance_direct_best_overlap<sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;variance_direct_current_theta<sp/>=<sp/>{:.16f}&quot;,<sp/>std::log10(variance_direct_current_theta));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(variance_new<sp/>&lt;<sp/>1.0<sp/>*<sp/>tools::finite::measure::energy_variance_per_site(state)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>new<sp/>(better)<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Made<sp/>it<sp/>worse.<sp/>Sending<sp/>initial<sp/>guess<sp/>to<sp/>DIRECT&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perhaps<sp/>send<sp/>theta<sp/>initial<sp/>to<sp/>direct<sp/>if<sp/>worse?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/><sp/>Textra::Matrix_to_Tensor(theta_new,<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(variance_new<sp/>&lt;<sp/>1.0<sp/>*<sp/>tools::finite::measure::energy_variance_per_site(state)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>an<sp/>improvement<sp/>of<sp/>1%<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>an<sp/>actual<sp/>improvement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>new<sp/>(better)<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/><sp/>Textra::Matrix_to_Tensor(theta_new,<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(variance_new<sp/>&lt;<sp/>10.0<sp/>*<sp/>tools::finite::measure::energy_variance_per_site(state))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Allow<sp/>for<sp/>variance<sp/>to<sp/>increase<sp/>a<sp/>bit<sp/>to<sp/>come<sp/>out<sp/>of<sp/>local<sp/>minima</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>new<sp/>(but<sp/>not<sp/>good<sp/>enough)<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/><sp/>Textra::Matrix_to_Tensor(theta_new,<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Subspace<sp/>optimization<sp/>didn&apos;t<sp/>improve<sp/>variance.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(variance_new<sp/>&lt;=<sp/>settings::precision::variance_convergence_threshold)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/><sp/>theta_old;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explanation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>theta_initial:<sp/>The<sp/>starting<sp/>point<sp/>,<sp/>or<sp/>initial<sp/>guess,<sp/>for<sp/>the<sp/>gradient<sp/>descent<sp/>(L-BFGS)<sp/>optimization<sp/>routine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default<sp/>theta_initial<sp/>=<sp/>theta_old,<sp/>i.e.<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>candidate<sp/><sp/><sp/><sp/>:<sp/>One<sp/>of<sp/>the<sp/>eigenvectors<sp/>obtained<sp/>from<sp/>either<sp/>full<sp/>or<sp/>partial<sp/>diagonalization,<sp/>i.e.<sp/>lapack<sp/>or<sp/>arpack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>relevant<sp/>candidate<sp/>:<sp/>Eigenvectors<sp/>inside<sp/>of<sp/>the<sp/>energy<sp/>window<sp/>with<sp/>high<sp/>enough<sp/>overlap<sp/>with<sp/>the<sp/>old<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subspace_error<sp/>=<sp/>1<sp/>-<sp/>Σ_i<sp/>|&lt;theta_new_i|theta_old&gt;|^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>==<sp/>0,<sp/>it<sp/>means<sp/>that<sp/>the<sp/>set<sp/>of<sp/>candidate<sp/>theta_old&apos;s<sp/>span<sp/>the<sp/>old<sp/>theta_old,<sp/>i.e.<sp/>the<sp/>set<sp/>can<sp/>describe<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subspace<sp/>error<sp/>is<sp/>&quot;low<sp/>enough&quot;<sp/>when<sp/>subspace_error<sp/>&lt;<sp/>subspace_error_threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>best_overlap<sp/>:<sp/>The<sp/>highest<sp/>overlap<sp/>to<sp/>the<sp/>old<sp/>theta_old<sp/>achieved<sp/>by<sp/>any<sp/>candidate<sp/>inside<sp/>of<sp/>the<sp/>energy<sp/>window,<sp/>i.e.<sp/>|&lt;candidate_i<sp/>|<sp/>theta_old&gt;|_max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>best_overlap_idx:<sp/>The<sp/>index<sp/>of<sp/>the<sp/>best<sp/>overlapping<sp/>candidate<sp/>in<sp/>the<sp/>energy<sp/>window.<sp/>If<sp/>-1,<sp/>it<sp/>means<sp/>that<sp/>no<sp/>state<sp/>is<sp/>in<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>best_variance:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overlap_high<sp/>=<sp/>0.9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overlap_cat<sp/><sp/>=<sp/>1/sqrt(2)<sp/>=<sp/>0.707..<sp/>(cat<sp/>state<sp/>or<sp/>worse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>Decision<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>1)<sp/><sp/>Start<sp/>by<sp/>filtering<sp/>eigenvectors<sp/>down<sp/>to<sp/>a<sp/><sp/>smaller<sp/>set<sp/>of<sp/>&quot;relevant&quot;<sp/>candidates<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doing<sp/>subspace<sp/>optimization.<sp/>Allowing<sp/>a<sp/>maximum<sp/>of<sp/>64<sp/>candidates<sp/>keeps<sp/>ram<sp/>below<sp/>2GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>theta_old.size()<sp/>==<sp/>4096.<sp/>This<sp/>means<sp/>that<sp/>we<sp/>filter<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>outside<sp/>of<sp/>the<sp/>energy<sp/>window,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>with<sp/>little<sp/>or<sp/>no<sp/>overlap<sp/>to<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute<sp/>subspace_error_filtered<sp/>=<sp/>1<sp/>-<sp/>Σ_i<sp/>|&lt;candidate_i|theta_old&gt;|^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>subspace_error_filtered<sp/>&gt;<sp/>subspace_error_threshold,<sp/>set<sp/>optSpace<sp/>=<sp/>DIRECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Else,<sp/>set<sp/>optSpace<sp/>=<sp/>SUBSPACE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>2)<sp/><sp/>Find<sp/>the<sp/>best<sp/>overlapping<sp/>state<sp/>among<sp/>the<sp/>relevant<sp/>candidates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>3)<sp/><sp/>We<sp/>can<sp/>now<sp/>make<sp/>different<sp/>decisions<sp/>based<sp/>on<sp/>the<sp/>overlap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A)<sp/><sp/>If<sp/>best_overlap_idx<sp/>==<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No<sp/>state<sp/>is<sp/>in<sp/>energy<sp/>window<sp/>-&gt;<sp/>discard!<sp/>Return<sp/>old<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B)<sp/><sp/>If<sp/>overlap_high<sp/>&lt;=<sp/>best_overlap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>environments<sp/>have<sp/>been<sp/>modified<sp/>just<sp/>slightly<sp/>since<sp/>the<sp/>last<sp/>time<sp/>considered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>these<sp/>sites,<sp/>but<sp/>the<sp/>signal<sp/>is<sp/>still<sp/>clear<sp/>--<sp/>we<sp/>are<sp/>still<sp/>targeting<sp/>the<sp/>same<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>However<sp/>we<sp/>can&apos;t<sp/>be<sp/>sure<sp/>that<sp/>the<sp/>contributions<sp/>from<sp/>nearby<sp/>states<sp/>is<sp/>just<sp/>noise.<sp/>Instead<sp/>of<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keeping<sp/>the<sp/>state<sp/>we<sp/>should<sp/>optimize<sp/>its<sp/>variance.<sp/>This<sp/>is<sp/>important<sp/>in<sp/>the<sp/>later<sp/>stages<sp/>when<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>low<sp/>and<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>ruin<sp/>those<sp/>last<sp/>decimals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>just<sp/>need<sp/>to<sp/>decide<sp/>which<sp/>initial<sp/>guess<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B1)<sp/>If<sp/>best_overlap_variance<sp/>&lt;=<sp/>theta_variance:<sp/>set<sp/>theta_initial<sp/>=<sp/>best_overlap_theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B2)<sp/>Else,<sp/>set<sp/>theta_initial<sp/>=<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LC)<sp/><sp/>If<sp/>overlap_cat<sp/>&lt;=<sp/>best_overlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>overlap_high</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>for<sp/>one<sp/>reasons:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>There<sp/>are<sp/>a<sp/>few<sp/>candidate<sp/>states<sp/>with<sp/>significant<sp/>overlap<sp/>(superposition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It&apos;s<sp/>clear<sp/>that<sp/>we<sp/>need<sp/>to<sp/>optimize,<sp/>but<sp/>we<sp/>have<sp/>to<sp/>think<sp/>carefully<sp/>about<sp/>the<sp/>initial<sp/>guess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Right<sp/>now<sp/>it<sp/>makes<sp/>sense<sp/>to<sp/>always<sp/>choose<sp/>best<sp/>overlap<sp/>theta,<sp/>since<sp/>that<sp/>forces<sp/>the<sp/>algorithm<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>choose<sp/>a<sp/>particular<sp/>state<sp/>and<sp/>not<sp/>get<sp/>stuck<sp/>in<sp/>superposition.<sp/>Choosing<sp/>the<sp/>old<sp/>theta<sp/>may<sp/>not<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>just<sp/>entrench<sp/>the<sp/>algorithm<sp/>into<sp/>a<sp/>local<sp/>minima.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D)<sp/><sp/>If<sp/>0<sp/>&lt;=<sp/>best_overlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>overlap_cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>for<sp/>three<sp/>reasons,<sp/>most<sp/>often<sp/>early<sp/>in<sp/>the<sp/>simulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>There<sp/>are<sp/>several<sp/>candidate<sp/>states<sp/>with<sp/>significant<sp/>overlap<sp/>(superposition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>The<sp/>highest<sp/>overlapping<sp/>states<sp/>were<sp/>outside<sp/>of<sp/>the<sp/>energy<sp/>window,<sp/>leaving<sp/>just<sp/>these<sp/>candidates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>The<sp/>energy<sp/>targeting<sp/>of<sp/>states<sp/>has<sp/>failed<sp/>for<sp/>some<sp/>reason,<sp/>perhaps<sp/>the<sp/>spectrum<sp/>is<sp/>particularly<sp/>dense.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>any<sp/>case,<sp/>it<sp/>is<sp/>clear<sp/>we<sp/>are<sp/>lost<sp/>Hilbert<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Also,<sp/>the<sp/>subspace_error<sp/>is<sp/>no<sp/>longer<sp/>a<sp/>good<sp/>measure<sp/>of<sp/>how<sp/>useful<sp/>the<sp/>subspace<sp/>is<sp/>to<sp/>us,<sp/>since<sp/>it&apos;s<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measuring<sp/>how<sp/>well<sp/>the<sp/>old<sp/>state<sp/>can<sp/>be<sp/>described,<sp/>but<sp/>the<sp/>old<sp/>state<sp/>is<sp/>likely<sp/>very<sp/>different<sp/>from<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we&apos;re<sp/>looking<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>So<sp/>to<sp/>address<sp/>all<sp/>three<sp/>cases,<sp/>do<sp/>DIRECT<sp/>optimization<sp/>with<sp/>best_overlap_theta<sp/>as<sp/>initial<sp/>guess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>particular,<sp/>notice<sp/>that<sp/>we<sp/>never<sp/>use<sp/>the<sp/>candidate<sp/>that<sp/>happens<sp/>to<sp/>have<sp/>the<sp/>best<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decision<sp/>tree:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>1)<sp/><sp/>Start<sp/>by<sp/>filtering<sp/>eigenvectors<sp/>down<sp/>to<sp/>a<sp/><sp/>smaller<sp/>set<sp/>of<sp/>&quot;relevant&quot;<sp/>candidates<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doing<sp/>subspace<sp/>optimization.<sp/>Allowing<sp/>a<sp/>maximum<sp/>of<sp/>64<sp/>candidates<sp/>keeps<sp/>ram<sp/>below<sp/>2GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>theta_old.size()<sp/>==<sp/>4096.<sp/>This<sp/>means<sp/>that<sp/>we<sp/>filter<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>outside<sp/>of<sp/>the<sp/>energy<sp/>window,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>with<sp/>little<sp/>or<sp/>no<sp/>overlap<sp/>to<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>Filter<sp/>states<sp/>which<sp/>have<sp/>high<sp/>variance?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute<sp/>subspace_error_filtered<sp/>=<sp/>1<sp/>-<sp/>Σ_i<sp/>|&lt;candidate_i|theta_old&gt;|^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>2)<sp/><sp/>Find<sp/>the<sp/>best<sp/>overlapping<sp/>state<sp/>among<sp/>the<sp/>relevant<sp/>candidates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Step<sp/>3)<sp/><sp/>We<sp/>can<sp/>now<sp/>make<sp/>decisions<sp/>A-F<sp/>based<sp/>on<sp/>the<sp/>overlaps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A)<sp/><sp/>If<sp/>best_overlap_idx<sp/>==<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No<sp/>state<sp/>is<sp/>in<sp/>energy<sp/>window<sp/>-&gt;<sp/>discard!<sp/>Return<sp/>old<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B)<sp/><sp/>If<sp/>best_overlap<sp/>&gt;=<sp/>overlap_high.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTE:<sp/>When<sp/>variance<sp/>is<sp/>low<sp/>we<sp/>need<sp/>to<sp/>be<sp/>more<sp/>careful<sp/>about<sp/>defining<sp/>overlap_high.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>good<sp/>estimate<sp/>may<sp/>be<sp/>overlap_high<sp/>=<sp/>1<sp/>-<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>happens<sp/>when<sp/>the<sp/>environments<sp/>haven&apos;t<sp/>changed<sp/>and<sp/>we<sp/>basically<sp/>just<sp/>found<sp/>the<sp/>old<sp/>theta_old<sp/>among<sp/>the<sp/>new<sp/>eigenvectors,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>other<sp/>eigenvectors<sp/>just<sp/>contribute<sp/>to<sp/>negligible<sp/>noise.<sp/>We<sp/>could<sp/>essentially<sp/>just<sp/>go<sp/>ahead<sp/>and<sp/>keep<sp/>it,<sp/>but<sp/>sometimes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>variance<sp/>is<sp/>low<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>ruin<sp/>those<sp/>last<sp/>decimals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B1)<sp/>If<sp/><sp/>best_overlap_variance<sp/>&lt;=<sp/>theta_old_variance:<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LC)<sp/>If<sp/>overlap_good<sp/>&lt;=<sp/>best_overlap<sp/>&lt;<sp/>overlap_high,<sp/>do<sp/>variance<sp/>optimization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>environments<sp/>have<sp/>been<sp/>modified<sp/>slightly<sp/>since<sp/>the<sp/>last<sp/>time<sp/>we<sp/>visited<sp/>this<sp/>site,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>the<sp/>signal<sp/>is<sp/>still<sp/>clear<sp/>--<sp/>we<sp/>are<sp/>still<sp/>targeting<sp/>the<sp/>same<sp/>state.<sp/>However<sp/>we<sp/>can&apos;t<sp/>be<sp/>sure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>contributions<sp/>from<sp/>nearby<sp/>states<sp/>is<sp/>just<sp/>noise<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First,<sp/>set<sp/>theta_initial<sp/>=<sp/>theta_best_overlap_candidate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//////First,<sp/>check<sp/>the<sp/>variance<sp/>ONLY<sp/>of<sp/>the<sp/>best<sp/>overlapping<sp/>relevant<sp/>candidate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//////If<sp/>the<sp/>candidate<sp/>has<sp/>lower<sp/>variance<sp/>than<sp/>the<sp/>current<sp/>one,<sp/>set<sp/>theta_initial<sp/>=<sp/>theta_best_overlap_candidate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TODO:<sp/>Which<sp/>makes<sp/>the<sp/>most<sp/>sense<sp/>in<sp/>the<sp/>two<sp/>options<sp/>above?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>best<sp/>course<sp/>of<sp/>action<sp/>now<sp/>is<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C1)<sp/>If<sp/>the<sp/>subspace<sp/>error<sp/>is<sp/>low<sp/>enough,<sp/>do<sp/>subspace<sp/>optimization,<sp/>with<sp/>initial<sp/>guess<sp/>theta_initial.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C2)<sp/>Else,<sp/>send<sp/>theta_initial<sp/>as<sp/>a<sp/>starting<sp/>guess<sp/>for<sp/>DIRECT<sp/>optimization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TODO)<sp/>Think<sp/>about<sp/>what<sp/>theta_initial<sp/>is<sp/>supposed<sp/>to<sp/>be.<sp/>Either<sp/>it<sp/>can<sp/>be<sp/>the<sp/>eigenvector<sp/>with<sp/>best<sp/>overlap,<sp/>or<sp/>just<sp/>the<sp/>old<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D)<sp/>If<sp/>overlap_ok<sp/>&lt;<sp/>best_overlap<sp/>&lt;<sp/>overlap_good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>happens<sp/>if<sp/>the<sp/>environments<sp/>have<sp/>changed<sp/>some<sp/>more<sp/>since<sp/>the<sp/>last<sp/>time<sp/>we<sp/>visited<sp/>this<sp/>site,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>instance<sp/>when<sp/>some<sp/>other<sp/>site<sp/>got<sp/>optimized<sp/>a<sp/>lot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>signal<sp/>is<sp/>less<sp/>clear,<sp/>but<sp/>we<sp/>are<sp/>probably<sp/>still<sp/>targeting<sp/>the<sp/>same<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>time<sp/>we<sp/>need<sp/>to<sp/>be<sp/>more<sp/>careful<sp/>though.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First,<sp/>check<sp/>the<sp/>variance<sp/>of<sp/>ALL<sp/>relevant<sp/>candidates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>candidate<sp/>theta_j<sp/>has<sp/>lower<sp/>variance<sp/>than<sp/>the<sp/>current<sp/>one,<sp/>set<sp/>theta_initial<sp/>=<sp/>theta_j.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D1)<sp/>If<sp/>the<sp/>subspace<sp/>quality<sp/>is<sp/>good<sp/>enough,<sp/>do<sp/>subspace<sp/>optimization<sp/>with<sp/>initial<sp/>guess<sp/>theta_initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D2)<sp/>Else,<sp/>send<sp/>theta_initial<sp/>as<sp/>a<sp/>starting<sp/>guess<sp/>for<sp/>DIRECT<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E)<sp/>If<sp/>overlap_low<sp/>&lt;<sp/>best_overlap<sp/>&lt;<sp/>overlap_ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>happens<sp/>if<sp/>the<sp/>environments<sp/>have<sp/>changed<sp/>a<sp/>lot<sp/>since<sp/>the<sp/>last<sp/>time<sp/>we<sp/>visited<sp/>this<sp/>site,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>is<sp/>usually<sp/>the<sp/>case<sp/>early<sp/>in<sp/>the<sp/>simulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>signal<sp/>is<sp/>not<sp/>clear<sp/>anymore,<sp/>in<sp/>fact<sp/>there<sp/>are<sp/>many<sp/>candidates<sp/>with<sp/>significant<sp/>overlap<sp/>to<sp/>the<sp/>old<sp/>theta_old.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>subspace_error<sp/>is<sp/>probably<sp/>not<sp/>a<sp/>good<sp/>measure<sp/>anymore,<sp/>since<sp/>we&apos;re<sp/>not<sp/>trying<sp/>to<sp/>find<sp/>a<sp/>new<sp/>theta<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>only<sp/>a<sp/>fine<sp/>tuning<sp/>away<sp/>from<sp/>of<sp/>the<sp/>old<sp/>one:<sp/>we<sp/>would<sp/>just<sp/>get<sp/>stuck<sp/>in<sp/>a<sp/>local<sp/>minima<sp/>far<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First,<sp/>check<sp/>the<sp/>variance<sp/>of<sp/>ALL<sp/>relevant<sp/>candidates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E1)<sp/>If<sp/>any<sp/>candidate<sp/>state<sp/>has<sp/>better<sp/>variance<sp/>than<sp/>the<sp/>current<sp/>one,<sp/>send<sp/>it<sp/>as<sp/>a<sp/>starting<sp/>guess<sp/>for<sp/>DIRECT<sp/>optimization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E2)<sp/>Else,<sp/>send<sp/>the<sp/>best<sp/>overlapping<sp/>state<sp/>as<sp/>a<sp/>starting<sp/>guess<sp/>for<sp/>DIRECT<sp/>optimization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F)<sp/>If<sp/>best_overlap<sp/>&lt;<sp/>overlap_low</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mayday!<sp/>We<sp/>are<sp/>lost<sp/>in<sp/>Hilbert<sp/>space!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Send<sp/>the<sp/>old<sp/>theta<sp/>as<sp/>a<sp/>starting<sp/>guess<sp/>for<sp/>DIRECT<sp/>optimization,<sp/>and<sp/>brace<sp/>for<sp/>impact.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/>get_best_overlap_in_window(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(best_overlap_idx<sp/>&lt;<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>A&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if(best_overlap<sp/>&gt;<sp/>settings::precision::overlap_high){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>B&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Overlap<sp/>of<sp/>candidate<sp/>{}<sp/>is<sp/>great:<sp/>{}<sp/>.<sp/>Keeping<sp/>it.&quot;,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if(best_overlap<sp/>&gt;<sp/>settings::precision::overlap_good<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>settings::precision::overlap_high<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(subspace_error<sp/>&lt;<sp/>subspace_error_threshold){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>C1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>optimization<sp/>anyway<sp/>then&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>C2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Switching<sp/>to<sp/>DIRECT<sp/>mode&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ceres_direct_optimization(state,<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions())<sp/>,sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if(best_overlap<sp/>&gt;<sp/>settings::precision::lowOverlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>settings::precision::overlap_good<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(subspace_error<sp/>&lt;<sp/>subspace_error_threshold){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>D1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>D1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>optimization<sp/>anyway<sp/>then&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>D2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>D2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Overlap<sp/>of<sp/>candidate<sp/>{}<sp/>is<sp/>low:<sp/>{}<sp/>.<sp/>Keeping<sp/>it.&quot;,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if(best_overlap<sp/>&lt;<sp/>settings::precision::lowOverlap<sp/>and<sp/>best_overlap<sp/>&gt;<sp/>settings::precision::badOverlap<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(subspace_error<sp/>&lt;<sp/>subspace_error_threshold){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>E1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>E1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>optimization<sp/>anyway<sp/>then&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>E2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>E2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Overlap<sp/>of<sp/>candidate<sp/>{}<sp/>is<sp/>low:<sp/>{}<sp/>.<sp/>Keeping<sp/>it.&quot;,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Nothing<sp/>matched&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(best_overlap<sp/>&gt;<sp/>settings::precision::overlap_good<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>settings::precision::overlap_high<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>C1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>fair<sp/>overlap<sp/>{}<sp/>and<sp/>variance<sp/>(log10):<sp/>{}&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>best_overlap_theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(best_overlap<sp/>&gt;<sp/>high_overlap<sp/>and<sp/>subspace_error<sp/>&lt;<sp/>100*subspace_error_threshold<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>D1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>D1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>anyway<sp/>then&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>switch<sp/>(optMode){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OptMode::OVERLAP:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/>get_best_overlap_in_window(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(best_overlap_idx<sp/>&lt;<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_overlap<sp/>&lt;<sp/>0.1){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Overlap<sp/>of<sp/>state<sp/>{}<sp/>is<sp/>too<sp/>low:<sp/>{}.<sp/>Checking<sp/>for<sp/>candidates<sp/>with<sp/>lower<sp/>variance&quot;,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>old_variance<sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_variance,<sp/>best_variance_idx]<sp/>=<sp/>get_best_variance_in_window(state,<sp/>eigvecs,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(best_variance_idx<sp/>&lt;<sp/>0<sp/>or<sp/>overlaps(best_variance_idx)<sp/>&lt;<sp/>0.01){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;No<sp/>better<sp/>variance<sp/>states<sp/>(with<sp/>sufficient<sp/>overlap<sp/>&gt;<sp/>0.01)<sp/>found<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_variance<sp/>&lt;<sp/>old_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Eigenstate<sp/>{}<sp/>had<sp/>better<sp/>(log10)<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}.<sp/>Energy:<sp/>{},<sp/>overlap:<sp/>{}.&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_variance_idx,<sp/>std::log10(best_variance),<sp/>std::log10(old_variance),<sp/>eigvals_per_site_unreduced(best_variance_idx),<sp/>overlaps(best_variance_idx));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_variance_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>No<sp/>found<sp/>state<sp/>had<sp/>good<sp/>enough<sp/>overlap<sp/>or<sp/>varaince,<sp/>returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight></codeline>
<codeline lineno="952"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Candidate<sp/>theta<sp/>{}<sp/>has<sp/>good<sp/>overlap<sp/>{}&quot;,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/><sp/><sp/>new_theta<sp/><sp/><sp/><sp/><sp/>=<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>old_variance<sp/><sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>new_variance<sp/><sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state,new_theta);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>that<sp/>the<sp/>new<sp/>state<sp/>is<sp/>smaller<sp/>than<sp/>at<sp/>least<sp/>twice<sp/>the<sp/>old<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(new_variance<sp/>&lt;=<sp/>2*old_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Kept<sp/>candidate<sp/>{}<sp/>--<sp/>it<sp/>has<sp/>good<sp/>enough<sp/>overlap<sp/>{}<sp/>and<sp/>variance<sp/>{}&quot;,<sp/>best_overlap_idx,<sp/>best_overlap,<sp/>std::log10(new_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new_theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;The<sp/>candidate<sp/>theta<sp/>has<sp/>worse<sp/>variance<sp/>than<sp/>before<sp/>[<sp/>idx<sp/>=<sp/>{}<sp/>|<sp/>overlap<sp/>=<sp/>{}<sp/>|<sp/>variance<sp/>=<sp/>{}<sp/>]...&quot;,<sp/>best_overlap_idx,<sp/>best_overlap,<sp/>std::log10(new_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Looking<sp/>for<sp/>a<sp/>candidate<sp/>with<sp/>lower<sp/>variance...&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>subspace_error;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_variance,<sp/>best_variance_idx]<sp/>=<sp/>get_best_variance_in_window(state,<sp/>eigvecs,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_variance<sp/>&lt;<sp/>old_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>better<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}.<sp/>Energy:<sp/>{},<sp/>overlap:<sp/>{}.&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_variance_idx,<sp/>std::log10(best_variance),<sp/>std::log10(old_variance),<sp/>eigvals_per_site_unreduced(best_variance_idx),<sp/>overlaps(best_variance_idx));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_variance_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>No<sp/>candidate<sp/>has<sp/>good<sp/>enough<sp/>overlap<sp/>or<sp/>variance,<sp/>returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OptMode::VARIANCE:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>preferKeepingLowOverlapCandidate<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/><sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/>get_best_overlap_in_window(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>subspace_error<sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>LC)<sp/>If<sp/>low_overlap<sp/>&lt;<sp/>best_overlap<sp/>&lt;<sp/>medium_overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Ooops,<sp/>the<sp/>subspace<sp/>error<sp/>is<sp/>too<sp/>high.<sp/>We<sp/>still<sp/>have<sp/>some<sp/>options.<sp/>In<sp/>order<sp/>of<sp/>priority:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>a)<sp/>If<sp/>no<sp/>state<sp/>is<sp/>inside<sp/>the<sp/>energy<sp/>window,<sp/>discard<sp/>all<sp/>and<sp/>return<sp/>old<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>b)<sp/>If<sp/>any<sp/>state<sp/>inside<sp/>the<sp/>energy<sp/>window<sp/>has<sp/>lower<sp/>variance,<sp/>keep<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Now<sp/>we<sp/>can<sp/>do<sp/>different<sp/>things<sp/>depending<sp/>on<sp/>the<sp/>variable<sp/>preferKeepingLowOverlapCandidate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>reasoning<sp/>is<sp/>that<sp/>if<sp/>the<sp/>maximum<sp/>overlap<sp/>is<sp/>too<sp/>low,<sp/>perhaps<sp/>we&apos;re<sp/>at<sp/>a<sp/>local<sp/>minima<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>it&apos;s<sp/>not<sp/>worth<sp/>it<sp/>to<sp/>keep<sp/>optimizing<sp/>there.<sp/>Better<sp/>then<sp/>to<sp/>keep<sp/>that<sp/>candidate<sp/>and<sp/>escape<sp/>the<sp/>minima.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So<sp/>then,<sp/>if<sp/>preferKeepingLowOverlapCandidate<sp/>==<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>c1)<sp/>If<sp/>the<sp/>maximum<sp/>overlap<sp/>in<sp/>energy<sp/>window<sp/>is<sp/>intermediate,<sp/>say<sp/>between<sp/>0.1<sp/>and<sp/>0.9,<sp/>and<sp/>its<sp/>variance<sp/>isn&apos;t<sp/>too<sp/>bad,<sp/>then<sp/>keep<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>d1)<sp/>If<sp/>the<sp/>maximum<sp/>overlap<sp/>in<sp/>energy<sp/>window<sp/>is<sp/>high,<sp/>say<sp/>higher<sp/>than<sp/>0.9,<sp/>and<sp/>the<sp/>the<sp/>subspace<sp/>error<sp/>isn&apos;t<sp/>too<sp/>bad,<sp/>try<sp/>subspace<sp/>optimization<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>but<sp/>if<sp/>preferKeepingLowOverlapCandidate<sp/>==<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>c2)<sp/>If<sp/>the<sp/>maximum<sp/>overlap<sp/>in<sp/>energy<sp/>window<sp/>is<sp/>high<sp/>enough,<sp/>say<sp/>higher<sp/>than<sp/>0.9,<sp/>and<sp/>its<sp/>variance<sp/>isn&apos;t<sp/>too<sp/>bad,<sp/>then<sp/>keep<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>d2)<sp/>If<sp/>the<sp/>maximum<sp/>overlap<sp/>in<sp/>energy<sp/>window<sp/>is<sp/>low,<sp/>say<sp/>lower<sp/>than<sp/>0.99,<sp/>and<sp/>the<sp/>the<sp/>subspace<sp/>error<sp/>isn&apos;t<sp/>too<sp/>bad,<sp/>try<sp/>subspace<sp/>optimization<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>e)<sp/>If<sp/>any<sp/>state<sp/>is<sp/>inside<sp/>the<sp/>energy<sp/>window,<sp/>but<sp/>none<sp/>of<sp/>the<sp/>above<sp/>applies,<sp/>switch<sp/>to<sp/>DIRECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(subspace_error<sp/>&gt;<sp/>subspace_error_threshold)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Subspace<sp/>error<sp/>is<sp/>too<sp/>high<sp/>(log10):<sp/>{}<sp/>&gt;<sp/>{}.<sp/>Deciding<sp/>what<sp/>to<sp/>do...&quot;,<sp/>std::log10(subspace_error),<sp/>std::log10(subspace_error_threshold));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>prev_variance<sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_variance,<sp/>best_variance_idx]<sp/>=<sp/>get_best_variance_in_window(state,<sp/>eigvecs,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(best_variance_idx<sp/>&lt;<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Option<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>A&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>No<sp/>candidate<sp/>in<sp/>energy<sp/>window,<sp/>returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>lowest<sp/>variance<sp/>(log10):<sp/>{}&quot;,<sp/>best_variance_idx,<sp/>std::log10(best_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_variance<sp/>&lt;<sp/>prev_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Option<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>B&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>better<sp/>variance<sp/>(log10):<sp/>{}<sp/>&lt;<sp/>{}&quot;,<sp/>best_variance_idx,<sp/>std::log10(best_variance),<sp/>std::log10(prev_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_variance_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/>get_best_overlap_in_window(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.energy_lbound,<sp/>sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>best_overlap_theta<sp/>=<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>best_overlap_variance<sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state,<sp/>best_overlap_theta);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>highest<sp/>overlap:<sp/>{}<sp/>and<sp/>variance(log10):<sp/>{}&quot;,<sp/>best_overlap_idx,<sp/>best_overlap<sp/>,std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(preferKeepingLowOverlapCandidate){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_overlap<sp/>&gt;<sp/>low_overlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>high_overlap<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>C1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>C1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>fair<sp/>overlap<sp/>{}<sp/>and<sp/>variance<sp/>(log10):<sp/>{}&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>best_overlap_theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_overlap<sp/>&gt;<sp/>high_overlap<sp/>and<sp/>subspace_error<sp/>&lt;<sp/>100*subspace_error_threshold<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>D1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>D1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>anyway<sp/>then&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_overlap<sp/>&gt;<sp/>high_overlap<sp/>and<sp/>best_overlap_variance<sp/>&lt;<sp/>100.0<sp/>*<sp/>prev_variance<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>C2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>C2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>fair<sp/>overlap<sp/>{}<sp/>and<sp/>variance<sp/>(log10):<sp/>{}&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>best_overlap_theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(best_overlap<sp/>&lt;<sp/>high_overlap<sp/>and<sp/>subspace_error<sp/>&lt;<sp/>100*subspace_error_threshold<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Option<sp/>D2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>D2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>We<sp/>can<sp/>try<sp/>subspace<sp/>anyway<sp/>then&quot;,<sp/>best_variance_idx,<sp/>best_overlap,<sp/>std::log10(best_overlap_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Option<sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;info(&quot;Went<sp/>for<sp/>option<sp/>E&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Switching<sp/>to<sp/>DIRECT<sp/>mode&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ceres_direct_optimization(state,<sp/>sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//////////////////////////////</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_error)<sp/>=<sp/>filter_states(eigvecs,<sp/>eigvals,<sp/>overlaps,<sp/>subspace_error_threshold,<sp/>64);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.get_energy_reduced())/state.get_length();<sp/>//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>prev_variance<sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_variance,<sp/>idx_variance]<sp/>=<sp/>get_best_variance_in_window(state,eigvecs,eigvals_per_site_unreduced,sim_status.energy_lbound,sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(idx_variance<sp/>&lt;<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(best_variance<sp/>&lt;<sp/>prev_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Eigenstate<sp/>{}<sp/>has<sp/>better<sp/>(log10)<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}&quot;,idx_variance,<sp/>std::log10(best_variance),<sp/>std::log10(prev_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(idx_variance),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>discarding<sp/>subspace<sp/>and<sp/>switching<sp/>to<sp/>direct<sp/>mode&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ceres_direct_optimization(state,<sp/>sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp"/>
  </compounddef>
</doxygen>
