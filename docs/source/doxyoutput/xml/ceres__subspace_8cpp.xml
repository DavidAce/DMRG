<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ceres__subspace_8cpp" kind="file" language="C++">
    <compoundname>ceres_subspace.cpp</compoundname>
    <includes refid="ceres__subspace__functor_8h" local="yes">ceres_subspace_functor.h</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">iostream</includes>
    <includes refid="class__simulation__status_8h" local="no">simulation/class_simulation_status.h</includes>
    <includes refid="class__eigsolver_8h" local="no">math/class_eigsolver.h</includes>
    <includes refid="matrix__product__stl_8h" local="no">math/arpack_extra/matrix_product_stl.h</includes>
    <includes refid="matrix__product__sparse_8h" local="no">math/arpack_extra/matrix_product_sparse.h</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes refid="opt_8h" local="no">tools/finite/opt.h</includes>
    <includes refid="class__finite__state_8h" local="no">state/class_finite_state.h</includes>
    <includes refid="nmspc__settings_8h" local="no">simulation/nmspc_settings.h</includes>
    <includes refid="nmspc__random__numbers_8h" local="no">general/nmspc_random_numbers.h</includes>
    <includes local="no">spdlog/fmt/bundled/ranges.h</includes>
    <includes local="no">ceres/ceres.h</includes>
    <incdepgraph>
      <node id="2797">
        <label>Eigen/SparseLU</label>
      </node>
      <node id="2807">
        <label>general/nmspc_random_numbers.h</label>
        <link refid="nmspc__random__numbers_8h"/>
        <childnode refid="2808" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2791" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
      </node>
      <node id="2770">
        <label>iomanip</label>
      </node>
      <node id="2795">
        <label>Eigen/LU</label>
      </node>
      <node id="2768">
        <label>iterator</label>
      </node>
      <node id="2781">
        <label>glog/logging.h</label>
      </node>
      <node id="2779">
        <label>LBFGS.h</label>
      </node>
      <node id="2780">
        <label>ceres/ceres.h</label>
      </node>
      <node id="2771">
        <label>general/nmspc_type_check.h</label>
        <link refid="nmspc__type__check_8h"/>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2767" relation="include">
        </childnode>
      </node>
      <node id="2765">
        <label>Eigen/Core</label>
      </node>
      <node id="2763">
        <label>string</label>
      </node>
      <node id="2786">
        <label>hdf5_hl.h</label>
      </node>
      <node id="2777">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="2778" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
      </node>
      <node id="2773">
        <label>io/nmspc_logger.h</label>
        <link refid="nmspc__logger_8h"/>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2776" relation="include">
        </childnode>
      </node>
      <node id="2790">
        <label>map</label>
      </node>
      <node id="2782">
        <label>simulation/class_simulation_status.h</label>
        <link refid="class__simulation__status_8h"/>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2763" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
      </node>
      <node id="2772">
        <label>experimental/type_traits</label>
      </node>
      <node id="2761">
        <label>tools/nmspc_tools.h</label>
        <link refid="nmspc__tools_8h"/>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2763" relation="include">
        </childnode>
        <childnode refid="2764" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
      </node>
      <node id="2806">
        <label>unordered_set</label>
      </node>
      <node id="2767">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="2788">
        <label>math/arpack_extra/arpackpp_solver.h</label>
        <link refid="arpackpp__solver_8h"/>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2791" relation="include">
        </childnode>
      </node>
      <node id="2793">
        <label>matrix_product_dense.h</label>
        <link refid="matrix__product__dense_8h"/>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2794" relation="include">
        </childnode>
        <childnode refid="2795" relation="include">
        </childnode>
      </node>
      <node id="2801">
        <label>state/class_environment.h</label>
        <link refid="class__environment_8h"/>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2764" relation="include">
        </childnode>
        <childnode refid="2802" relation="include">
        </childnode>
      </node>
      <node id="2809">
        <label>spdlog/fmt/bundled/ranges.h</label>
      </node>
      <node id="2804">
        <label>model/class_model_base.h</label>
        <link refid="class__model__base_8h"/>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2767" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
      </node>
      <node id="2774">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="2766">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2808">
        <label>random</label>
      </node>
      <node id="2798">
        <label>math/arpack_extra/matrix_product_stl.h</label>
        <link refid="matrix__product__stl_8h"/>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
      </node>
      <node id="2799">
        <label>state/class_finite_state.h</label>
        <link refid="class__finite__state_8h"/>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2791" relation="include">
        </childnode>
        <childnode refid="2800" relation="include">
        </childnode>
        <childnode refid="2764" relation="include">
        </childnode>
        <childnode refid="2801" relation="include">
        </childnode>
        <childnode refid="2803" relation="include">
        </childnode>
        <childnode refid="2804" relation="include">
        </childnode>
      </node>
      <node id="2800">
        <label>optional</label>
      </node>
      <node id="2783">
        <label>vector</label>
      </node>
      <node id="2802">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="2760">
        <label>tools/finite/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="2761" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2781" relation="include">
        </childnode>
      </node>
      <node id="2794">
        <label>complex.h</label>
      </node>
      <node id="2775">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="2784">
        <label>array</label>
      </node>
      <node id="2796">
        <label>matrix_product_sparse.h</label>
        <link refid="matrix__product__sparse_8h"/>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2797" relation="include">
        </childnode>
      </node>
      <node id="2785">
        <label>hdf5.h</label>
      </node>
      <node id="2792">
        <label>math/arpack_extra/matrix_recast.h</label>
        <link refid="matrix__recast_8h"/>
        <childnode refid="2791" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2793" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
      </node>
      <node id="2769">
        <label>iostream</label>
      </node>
      <node id="2758">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp</label>
        <link refid="ceres__subspace_8cpp"/>
        <childnode refid="2759" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2760" relation="include">
        </childnode>
        <childnode refid="2799" relation="include">
        </childnode>
        <childnode refid="2805" relation="include">
        </childnode>
        <childnode refid="2807" relation="include">
        </childnode>
        <childnode refid="2809" relation="include">
        </childnode>
        <childnode refid="2780" relation="include">
        </childnode>
      </node>
      <node id="2789">
        <label>math/nmspc_eigutils.h</label>
        <link refid="nmspc__eigutils_8h"/>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
        <childnode refid="2790" relation="include">
        </childnode>
        <childnode refid="2791" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2778">
        <label>chrono</label>
      </node>
      <node id="2787">
        <label>math/class_eigsolver.h</label>
        <link refid="class__eigsolver_8h"/>
        <childnode refid="2788" relation="include">
        </childnode>
        <childnode refid="2792" relation="include">
        </childnode>
        <childnode refid="2789" relation="include">
        </childnode>
      </node>
      <node id="2759">
        <label>ceres_subspace_functor.h</label>
        <link refid="ceres__subspace__functor_8h"/>
        <childnode refid="2760" relation="include">
        </childnode>
      </node>
      <node id="2791">
        <label>complex</label>
      </node>
      <node id="2805">
        <label>simulation/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="2763" relation="include">
        </childnode>
        <childnode refid="2806" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
      </node>
      <node id="2764">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2767" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2771" relation="include">
        </childnode>
      </node>
      <node id="2776">
        <label>spdlog/sinks/stdout_sinks.h</label>
      </node>
      <node id="2762">
        <label>memory</label>
      </node>
      <node id="2803">
        <label>state/class_vidal_site.h</label>
        <link refid="class__vidal__site_8h"/>
        <childnode refid="2764" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ceres__subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" prot="public" static="no">
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using MatrixType =  Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="23" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ceres__subspace_8cpp_1a6a2bfd25450cd30f4a16b1f164161a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd, double &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd,Eigen::VectorXd,double&gt; filter_states</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;eigvecs, const Eigen::VectorXd &amp;eigvals, Eigen::VectorXd &amp;overlaps, double quality_threshold, size_t max_accept)</argsstring>
        <name>filter_states</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>eigvecs</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>eigvals</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>quality_threshold</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="47" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="47" bodyend="88"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, int &gt;</type>
        <definition>std::pair&lt;double,int&gt; get_best_state_in_window</definition>
        <argsstring>(const class_finite_state &amp;state, const Eigen::MatrixXcd &amp;eigvecs, const Eigen::VectorXd &amp;energies_per_site, double lbound, double ubound)</argsstring>
        <name>get_best_state_in_window</name>
        <param>
          <type>const <ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>eigvecs</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>energies_per_site</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="92" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="92" bodyend="112"/>
        <references refid="namespace_textra_1a1a713f14010c8216f87e9f33dcf9ca64" compoundref="nmspc__tensor__extra_8h" startline="185" endline="189">Textra::Matrix_to_Tensor</references>
        <references refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" compoundref="class__finite__state_8cpp" startline="331" endline="333">class_finite_state::active_dimensions</references>
        <references refid="namespacetools_1_1finite_1_1measure_1aaa1031a1ee8192ca3c85a349a04c2e62" compoundref="nmspc__tools_8h" startline="172" endline="178">tools::finite::measure::energy_variance_per_site</references>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, int &gt;</type>
        <definition>std::pair&lt;double,int&gt; get_best_overlap_in_window</definition>
        <argsstring>(const Eigen::VectorXd &amp;overlaps, const Eigen::VectorXd &amp;energies_per_site, double lbound, double ubound)</argsstring>
        <name>get_best_overlap_in_window</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>energies_per_site</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="114" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="114" bodyend="131"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_full</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log)</argsstring>
        <name>find_subspace_full</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a1b1e34bbc7b531b1addad1633519ebe0" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="135" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="135" bodyend="174"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" compoundref="opt_8h" startline="84">tools::finite::opt::internals::t_eig</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" compoundref="nmspc__tools_8h" startline="311">tools::common::profile::t_eig</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a9ac877abbc395683ef9e2b49cce8507ca958448d4909b92010c81d52d3e6ad8f1">eigutils::eigSetting::CPLX</references>
        <references refid="namespaceeigutils_1_1eig_setting_1ab3540d4cdfdd84861825cc2a89135306a161b3d9016563aba9ac190fc02ada9bb">eigutils::eigSetting::SYMMETRIC</references>
        <references refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" compoundref="class__eigsolver_8h" startline="28">class_eigsolver::solution</references>
        <references refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" compoundref="nmspc__eigutils_8h" startline="163" endline="167">eigutils::eigSolution::get_eigvals</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" compoundref="nmspc__eigutils_8h" startline="172">eigutils::eigSolution::Meta::cols</references>
        <references refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" compoundref="nmspc__eigutils_8h" startline="135" endline="147">eigutils::eigSolution::get_eigvecs</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" compoundref="nmspc__eigutils_8h" startline="171">eigutils::eigSolution::Meta::rows</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a9ac877abbc395683ef9e2b49cce8507ca8cf125b0e31559ba75a9d9b4f818a554">eigutils::eigSetting::REAL</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
        <references refid="classclass__tic__toc_1a4ed784d7ebfbe0ccbbc8118bd5e56fae" compoundref="class__tic__toc_8cpp" startline="107" endline="109">class_tic_toc::get_last_time_interval</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_part</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, double energy_target, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log, OptMode optMode)</argsstring>
        <name>find_subspace_part</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>energy_target</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a1b1e34bbc7b531b1addad1633519ebe0" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <param>
          <type><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref></type>
          <declname>optMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="180" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="180" bodyend="229"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" compoundref="opt_8h" startline="84">tools::finite::opt::internals::t_eig</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" compoundref="nmspc__tools_8h" startline="311">tools::common::profile::t_eig</references>
        <references refid="namespaceeigutils_1_1eig_setting_1ab3540d4cdfdd84861825cc2a89135306a161b3d9016563aba9ac190fc02ada9bb">eigutils::eigSetting::SYMMETRIC</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a7b4469c018633b8c2c2d596b5e38de74ae1e1d3d40573127e9ee0480caf1283d6">eigutils::eigSetting::R</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
        <references refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6a8c009c8dd4d4f9dde7515c00d5cd4661">tools::finite::opt::OVERLAP</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" compoundref="ceres__subspace_8cpp" startline="26" endline="44">tools::finite::opt::internals::generate_size_list</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a03696695037235bbb52d88102d75b69dadfd5b430bc4db2c2836d0227ad9ac0c4">eigutils::eigSetting::LM</references>
        <references refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" compoundref="class__eigsolver_8h" startline="28">class_eigsolver::solution</references>
        <references refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" compoundref="nmspc__eigutils_8h" startline="163" endline="167">eigutils::eigSolution::get_eigvals</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" compoundref="nmspc__eigutils_8h" startline="172">eigutils::eigSolution::Meta::cols</references>
        <references refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" compoundref="nmspc__eigutils_8h" startline="135" endline="147">eigutils::eigSolution::get_eigvecs</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a9ac877abbc395683ef9e2b49cce8507ca958448d4909b92010c81d52d3e6ad8f1">eigutils::eigSetting::CPLX</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" compoundref="nmspc__eigutils_8h" startline="171">eigutils::eigSolution::Meta::rows</references>
        <references refid="namespaceeigutils_1_1eig_setting_1a9ac877abbc395683ef9e2b49cce8507ca8cf125b0e31559ba75a9d9b4f818a554">eigutils::eigSetting::REAL</references>
        <references refid="classclass__tic__toc_1a4ed784d7ebfbe0ccbbc8118bd5e56fae" compoundref="class__tic__toc_8cpp" startline="107" endline="109">class_tic_toc::get_last_time_interval</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" compoundref="opt_8h" startline="33">tools::finite::opt::internals::subspace_quality_threshold</references>
      </memberdef>
      <memberdef kind="function" id="ceres__subspace_8cpp_1ae08f7be68a32274a415a3f1387df45fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace</definition>
        <argsstring>(const class_finite_state &amp;state, OptMode optMode)</argsstring>
        <name>find_subspace</name>
        <param>
          <type>const <ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref></type>
          <declname>optMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" line="237" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp" bodystart="237" bodyend="295"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" compoundref="opt_8h" startline="85">tools::finite::opt::internals::t_ham</references>
        <references refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" compoundref="class__tic__toc_8cpp" startline="37" endline="41">class_tic_toc::tic</references>
        <references refid="classclass__finite__state_1a530fd15693c27d806187774e661707db" compoundref="class__finite__state_8cpp" startline="443" endline="457">class_finite_state::get_multi_hamiltonian_matrix</references>
        <references refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" compoundref="class__tic__toc_8cpp" startline="43" endline="48">class_tic_toc::toc</references>
        <references refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" compoundref="class__finite__state_8cpp" startline="340" endline="364">class_finite_state::get_multitheta</references>
        <references refid="namespacesettings_1_1precision_1a8161050773e553d9b1e4e416a0289508" compoundref="nmspc__settings_8h" startline="100">settings::precision::MaxSizeFullDiag</references>
        <references refid="classclass__finite__state_1a3a7052caca98bd5c1b2d99aa8582e3c3" compoundref="class__finite__state_8cpp" startline="298" endline="303">class_finite_state::isReduced</references>
        <references refid="namespacetools_1_1finite_1_1measure_1a52873a04d8760e045da8cf5419b2ab70" compoundref="nmspc__tools_8h" startline="144" endline="149">tools::finite::measure::energy_minus_energy_reduced</references>
        <references refid="namespacetools_1_1finite_1_1measure_1a7ef3a851c77b06e6a210cce958447ea1" compoundref="nmspc__tools_8h" startline="151" endline="156">tools::finite::measure::energy</references>
        <references refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" compoundref="class__finite__state_8cpp" startline="90" endline="90">class_finite_state::get_length</references>
        <references refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" compoundref="class__finite__state_8cpp" startline="306" endline="313">class_finite_state::get_energy_reduced</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a1ea3179701e726a6a5d58b553f2a2a4f" compoundref="report_8cpp" startline="76" endline="103">tools::finite::opt::internals::reports::print_report</references>
        <references refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" compoundref="nmspc__tensor__extra_8h" startline="305" endline="324">Textra::subtract_phase</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-07-15.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ceres__subspace__functor_8h" kindref="compound">ceres_subspace_functor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__simulation__status_8h" kindref="compound">simulation/class_simulation_status.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__eigsolver_8h" kindref="compound">math/class_eigsolver.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix__product__stl_8h" kindref="compound">math/arpack_extra/matrix_product_stl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix__product__sparse_8h" kindref="compound">math/arpack_extra/matrix_product_sparse.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt_8h" kindref="compound">tools/finite/opt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__finite__state_8h" kindref="compound">state/class_finite_state.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">simulation/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__random__numbers_8h" kindref="compound">general/nmspc_random_numbers.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/fmt/bundled/ranges.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ceres/ceres.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt" kindref="compound">tools::finite::opt</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals" kindref="compound">tools::finite::opt::internals</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="ceres__subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref><sp/>=<sp/>Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" kindref="member">tools::finite::opt::internals::generate_size_list</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>shape){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_nev<sp/>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(shape<sp/>&lt;=<sp/>512)<sp/><sp/>{max_nev<sp/>=<sp/>shape/4;}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>512<sp/><sp/>and<sp/>shape<sp/>&lt;=<sp/>1024)<sp/>{max_nev<sp/>=<sp/>128;}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>1024<sp/>and<sp/>shape<sp/>&lt;=<sp/>2048)<sp/>{max_nev<sp/>=<sp/>128;}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>2048<sp/>and<sp/>shape<sp/>&lt;=<sp/>4096)<sp/>{max_nev<sp/>=<sp/>64;}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>4096<sp/>and<sp/>shape<sp/>&lt;=<sp/>8192)<sp/>{max_nev<sp/>=<sp/>32;}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{max_nev<sp/>=<sp/>8;}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_nev<sp/>=<sp/>std::min(std::min(8,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)shape),max_nev);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nev_list<sp/>=<sp/>{min_nev};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_nev<sp/>=<sp/>min_nev;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp_nev<sp/>&lt;<sp/>max_nev){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_nev<sp/>=<sp/>std::min(4*tmp_nev,<sp/>max_nev);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nev_list.push_back(tmp_nev);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nev_list;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="ceres__subspace_8cpp_1a6a2bfd25450cd30f4a16b1f164161a1c" refkind="member"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,Eigen::VectorXd,double&gt;<sp/><ref refid="ceres__subspace_8cpp_1a6a2bfd25450cd30f4a16b1f164161a1c" kindref="member">filter_states</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXcd<sp/>&amp;eigvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>eigvals,<sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quality_threshold,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_accept){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_accept<sp/>=<sp/>std::min(8ul,(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)eigvals.size());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>max_accept<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::min(max_accept,(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)eigvals.size());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_accept<sp/>==<sp/>max_accept)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,<sp/>eigvals,<sp/>1.0<sp/>-<sp/>overlaps.cwiseAbs2().sum());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/><sp/><sp/><sp/>overlaps_filtered<sp/>=<sp/>overlaps;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/><sp/>overlaps_accepted_idx;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>overlaps_accepted;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/>=<sp/>1.0<sp/>-<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>quality_threshold<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>epsilon<sp/>+<sp/>std::min(subspace_quality,<sp/>quality_threshold);<sp/></highlight><highlight class="comment">//Make<sp/>sure<sp/>you<sp/>don&apos;t<sp/>actually<sp/>lessen<sp/>the<sp/>subspace<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Filtering<sp/>states<sp/>keeping<sp/>between<sp/>{}<sp/>to<sp/>{},<sp/>log10<sp/>quality<sp/>threshold<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>min_accept,max_accept,<sp/>std::log10(quality_threshold));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1ops_1ab0cdc843131076ca538724438171b6a1" kindref="member">overlap</ref><sp/>=<sp/>overlaps_filtered.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_accepted_idx.push_back(idx);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_accepted<sp/><sp/><sp/><sp/>.push_back(overlap);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXd&gt;<sp/>overlaps_map(overlaps_accepted.data(),overlaps_accepted.size());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>overlaps_map.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_accepted.size()<sp/>&gt;=<sp/>min_accept){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_quality<sp/>&lt;<sp/>quality_threshold)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_accepted.size()<sp/>&gt;=<sp/>max_accept)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps_filtered(idx)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(overlaps_filtered.sum()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs_filtered(eigvecs.rows(),overlaps_accepted.size());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals_filtered(overlaps_accepted.size());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>:<sp/>overlaps_accepted_idx){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs_filtered.col(col_num)<sp/>=<sp/>eigvecs.col(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_filtered<sp/><sp/><sp/><sp/>(col_num)<sp/>=<sp/>eigvals(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col_num++;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Filtered<sp/>from<sp/>{}<sp/>down<sp/>to<sp/>{}<sp/>states&quot;</highlight><highlight class="normal">,<sp/>eigvals.size(),<sp/>eigvals_filtered.size());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Filtered<sp/>quality:<sp/>log10(1-eps)<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>std::log10(epsilon<sp/>+<sp/>subspace_quality));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs_filtered,eigvals_filtered,<sp/>subspace_quality);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">std::pair&lt;double,int&gt;</highlight></codeline>
<codeline lineno="92" refid="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" kindref="member">get_best_state_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXcd<sp/>&amp;eigvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>energies_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>variances(eigvecs.cols());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__finite__state_1a49d4b1815a40a9fdfacd105696ab56e4" kindref="member">class_finite_state::Scalar</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>&lt;<sp/>eigvecs.cols();<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>++){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>&lt;=<sp/><sp/>ubound<sp/>and<sp/>energies_per_site(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>&gt;=<sp/>lbound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multitheta<sp/>=<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variances(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variances(<ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>)<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variances.minCoeff()<sp/>==<sp/>std::numeric_limits&lt;double&gt;::infinity())<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>eigenstates<sp/>in<sp/>with<sp/>good<sp/>variance<sp/>in<sp/>given<sp/>energy<sp/>window<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>lbound,ubound);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>energy<sp/>range<sp/>is<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>energies_per_site.minCoeff(),<sp/>energies_per_site.maxCoeff());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::numeric_limits&lt;double&gt;::quiet_NaN(),<sp/>-1);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>min_variance_idx;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_variance_val<sp/>=<sp/>variances.minCoeff(&amp;min_variance_idx);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(min_variance_val,<sp/>min_variance_idx);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" refkind="member"><highlight class="normal">std::pair&lt;double,int&gt;<sp/><ref refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" kindref="member">get_best_overlap_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>energies_per_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(overlaps.size()<sp/>==<sp/>energies_per_site.size()<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;get_best_overlap_in_window:<sp/>Mismatch<sp/>in<sp/>overlaps<sp/>and<sp/>energies_per_site<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps_in_window<sp/>=<sp/>overlaps;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>overlaps.size();<sp/>i++){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(i)<sp/>&gt;<sp/>ubound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(energies_per_site(i)<sp/>&lt;<sp/>lbound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlaps_in_window.maxCoeff()<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>overlapping<sp/>eigenstates<sp/>in<sp/>given<sp/>energy<sp/>window<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>lbound,ubound);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>energy<sp/>range<sp/>is<sp/>{}<sp/>to<sp/>{}.&quot;</highlight><highlight class="normal">,<sp/>energies_per_site.minCoeff(),<sp/>energies_per_site.maxCoeff());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::numeric_limits&lt;double&gt;::quiet_NaN()<sp/>,<sp/>-1);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/>=<sp/>overlaps_in_window.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(max_overlap,idx);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="135" refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/><sp/>eigvecs;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(!std::is_same&lt;Scalar,<sp/>double&gt;::value)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>eigensolver<sp/>--<sp/>reason:<sp/>Full<sp/>diagonalization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nev<sp/>=<sp/>eigvecs.cols();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_quality),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>0);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="180" refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" kindref="member">find_subspace_part</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log,<ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>partial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>StlMatrixProduct,<sp/>because<sp/>the<sp/>PartialPivLU<sp/>will<sp/>overwrite<sp/>the<sp/>data<sp/>in<sp/>H_local<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_stl_matrix_product" kindref="compound">StlMatrixProduct&lt;Scalar&gt;</ref><sp/>hamiltonian(H_local.data(),H_local.rows(),Form::SYMMETRIC,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.<ref refid="class_stl_matrix_product_1a9e4bb7514f7e50cef962ce232cf3728d" kindref="member">set_shift</ref>(energy_target);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.FactorOP();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_lu<sp/>=<sp/>hamiltonian.t_factorOp.get_last_time_interval();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap_threshold<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>optMode<sp/>==<sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6a8c009c8dd4d4f9dde7515c00d5cd4661" kindref="member">OptMode::OVERLAP</ref><sp/>?<sp/>0.9<sp/>:<sp/>1;<sp/></highlight><highlight class="comment">//1.0/std::sqrt(2);<sp/>//Slightly<sp/>less<sp/>than<sp/>1/sqrt(2),<sp/>in<sp/>case<sp/>that<sp/>the<sp/>choice<sp/>is<sp/>between<sp/>cat<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;exhausted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nev<sp/>:<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" kindref="member">generate_size_list</ref>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size())){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa09d98b6edc6986cf4e905cf2527165f" kindref="member">eigs_stl</ref>(hamiltonian,nev,-1,<sp/>energy_target,Form::SYMMETRIC,Ritz::LM,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd<sp/>&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data()<sp/><sp/><sp/><sp/><sp/><sp/>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;std::complex&lt;double&gt;,<sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>&gt;::value){</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_quality),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>t_lu);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_lu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-6)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;max_overlap<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>+<sp/>std::to_string(max_overlap));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sq_sum_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-6)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;eps<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(sq_sum_overlap));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>0.0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;min_overlap<sp/>smaller<sp/>than<sp/>zero:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_overlap));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>max_overlap_threshold<sp/>)<sp/><sp/><sp/><sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;overlap<sp/>is<sp/>good<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_quality<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>)<sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;subspace<sp/>quality<sp/>is<sp/>good<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>partial<sp/>eigensolver<sp/>--<sp/>reason:<sp/>{}&quot;</highlight><highlight class="normal">,reason);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ac3910b10ef8cf578fe3197de44f4db5d" kindref="member">tools::common::profile::t_eig</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="237" refid="ceres__subspace_8cpp_1ae08f7be68a32274a415a3f1387df45fe" refkind="member"><highlight class="normal"><ref refid="ceres__subspace_8cpp_1ae08f7be68a32274a415a3f1387df45fe" kindref="member">find_subspace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref><sp/>&amp;<sp/>state,<ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" kindref="member">t_ham</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>H_local;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,double&gt;::value){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H_local<sp/>=<sp/>state.<ref refid="classclass__finite__state_1a530fd15693c27d806187774e661707db" kindref="member">get_multi_hamiltonian_matrix</ref>().real();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,std::complex&lt;double&gt;&gt;::value){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H_local<sp/>=<sp/>state.<ref refid="classclass__finite__state_1a530fd15693c27d806187774e661707db" kindref="member">get_multi_hamiltonian_matrix</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>H_local.isApprox(H_local.adjoint(),<sp/>1e-14)){</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;H_local<sp/>is<sp/>not<sp/>hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>(H_local<sp/>-<sp/>H_local.adjoint()).cwiseAbs().sum()));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sparcity<sp/>=<sp/>(H_local.array().cwiseAbs2()<sp/>!=<sp/>0.0).count()/(double)H_local.size();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;H_local<sp/>nonzeros:<sp/>{:.8f}<sp/>%&quot;</highlight><highlight class="normal">,<sp/>sparcity*100);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" kindref="member">t_ham</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multitheta<sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>eig_log;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>multitheta<sp/>is<sp/>small<sp/>enough<sp/>you<sp/>can<sp/>afford<sp/>full<sp/>diag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)multitheta.size()<sp/>&lt;=<sp/><ref refid="namespacesettings_1_1precision_1a8161050773e553d9b1e4e416a0289508" kindref="member">settings::precision::MaxSizeFullDiag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(H_local,<sp/>multitheta,<sp/>eig_log);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.<ref refid="classclass__finite__state_1a3a7052caca98bd5c1b2d99aa8582e3c3" kindref="member">isReduced</ref>())<sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a52873a04d8760e045da8cf5419b2ab70" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ad0bf82691db6ea773183f4f38c245636" kindref="member">tools::finite::measure::energy</ref>(state,<sp/>multitheta);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Energy<sp/>target,<sp/>per<sp/>site:<sp/>{}&quot;,energy_target/state.get_length());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>target<sp/>+<sp/>energy<sp/>reduced<sp/>=<sp/>energy<sp/>per<sp/>site:<sp/>{}<sp/>+<sp/>{}<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_target/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>()/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(energy_target<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae54e8776a0d3d3f400685f320d668bb9" kindref="member">find_subspace_part</ref>(H_local,<sp/>multitheta,<sp/>energy_target,<sp/>eig_log,<sp/>optMode);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Eigenvalue<sp/>range:<sp/>{}<sp/>--&gt;<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eigvals.minCoeff()<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>(),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eigvals.maxCoeff()<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>eigvals.array()<sp/>+<sp/>state.get_energy_reduced();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Eigenvalue<sp/>range:<sp/>{}<sp/>--&gt;<sp/>{}&quot;,<sp/>eigvals.minCoeff()/state.get_length(),eigvals.maxCoeff()/state.get_length());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a377466fe1d96e2eb2e2f9a4399cdfcb0" kindref="member">reports::print_report</ref>(eig_log);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,double&gt;::value){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">Textra::subtract_phase</ref>(eigvecs);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;truncating<sp/>imag<sp/>of<sp/>eigvecs,<sp/>sum:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>eigvecs.imag().cwiseAbs().sum()<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>eigvecs.real();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,<sp/>eigvals);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">Eigen::Tensor&lt;class_finite_state::Scalar,3&gt;</highlight></codeline>
<codeline lineno="302" refid="namespacetools_1_1finite_1_1opt_1_1internals_1a3a07b29376c4353abadb1848f43f4a45" refkind="member"><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a3a07b29376c4353abadb1848f43f4a45" kindref="member">tools::finite::opt::internals::ceres_subspace_optimization</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref><sp/>&amp;state,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__simulation__status" kindref="compound">class_simulation_status</ref><sp/>&amp;sim_status,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4e" kindref="member">OptType</ref><sp/>optType,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>in<sp/>SUBSPACE<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ab1cc211efd9f963d899d378e4660be72" kindref="member">tools::common::profile::t_opt</ref>.<ref refid="classclass__tic__toc_1a1924db6e1c9632114e713028e2beca74" kindref="member">tic</ref>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__finite__state_1a49d4b1815a40a9fdfacd105696ab56e4" kindref="member">class_finite_state::Scalar</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref><sp/>=<sp/><ref refid="namespacesettings_1_1precision_1afad83713588045b35c92b4128b4333c7" kindref="member">settings::precision::SubspaceQualityFactor</ref><sp/>*<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref><sp/>=<sp/>std::min(<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>,<sp/><ref refid="namespacesettings_1_1precision_1abf702bad979405cc3acd9423af31e4e0" kindref="member">settings::precision::MaxSubspaceQuality</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref><sp/>=<sp/>std::max(<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>,<sp/>1e-12);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_old<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_old_map<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::TensorMap&lt;Eigen::Tensor&lt;Scalar,3&gt;&gt;(<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.data(),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType){</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;Scalar&gt;(state,optMode);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;double&gt;(state,optMode);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>found<sp/>with<sp/>{}<sp/>eigenvectors&quot;</highlight><highlight class="normal">,<sp/>eigvecs.cols());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_old.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap_energy<sp/><sp/><sp/>=<sp/>eigvals_per_site_unreduced(idx);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Max<sp/>overlap:<sp/>{}<sp/>--<sp/>Energy<sp/>per<sp/>site:<sp/>{}<sp/>--<sp/>Idx:<sp/>{}<sp/>--<sp/>outside<sp/>of<sp/>window:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>max_overlap,<sp/>max_overlap_energy,<sp/>idx,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_overlap_energy<sp/>&lt;<sp/><sp/>sim_status.energy_lbound<sp/>or<sp/>max_overlap_energy<sp/>&gt;<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref><sp/><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(optMode){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6a8c009c8dd4d4f9dde7515c00d5cd4661" kindref="member">OptMode::OVERLAP</ref>:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[best_overlap,best_overlap_idx]<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a033c2cd4ff249b3ce57bcf4f9bebf8b9" kindref="member">get_best_overlap_in_window</ref>(overlaps,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_overlap_idx<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(best_overlap<sp/>&lt;<sp/>0.1){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Overlap<sp/>of<sp/>state<sp/>{}<sp/>too<sp/>low:<sp/>{}.<sp/>Checking<sp/>if<sp/>any<sp/>state<sp/>has<sp/>better<sp/>variance<sp/>than<sp/>current&quot;</highlight><highlight class="normal">,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_variance<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[best_variance,<sp/>best_variance_idx]<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" kindref="member">get_best_state_in_window</ref>(state,<sp/>eigvecs,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_variance_idx<sp/>&lt;<sp/>0<sp/>or<sp/>overlaps(best_variance_idx)<sp/>&lt;<sp/>0.01){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;No<sp/>better<sp/>variance<sp/>states<sp/>(with<sp/>sufficient<sp/>overlap<sp/>&gt;<sp/>0.01)<sp/>found<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(best_variance<sp/>&lt;<sp/>old_variance){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>Eigenstate<sp/>{}<sp/>had<sp/>better<sp/>(log10)<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}.<sp/>Energy:<sp/>{},<sp/>overlap:<sp/>{}.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_variance_idx,<sp/>std::log10(best_variance),<sp/>std::log10(old_variance),<sp/>eigvals_per_site_unreduced(best_variance_idx),<sp/>overlaps(best_variance_idx));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(best_variance_idx),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>No<sp/>found<sp/>state<sp/>had<sp/>good<sp/>enough<sp/>overlap<sp/>or<sp/>varaince,<sp/>returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>No<sp/>eigenstate<sp/>was<sp/>better,<sp/>keeping<sp/>badly<sp/>overlapping<sp/>state&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.unset_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(best_overlap_idx),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Candidate<sp/>theta<sp/>{}<sp/>has<sp/>good<sp/>overlap<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>best_overlap_idx,<sp/>best_overlap);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>new_theta<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(best_overlap_idx),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_variance<sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_variance<sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,new_theta);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>new<sp/>state<sp/>is<sp/>smaller<sp/>than<sp/>at<sp/>least<sp/>twice<sp/>the<sp/>old<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_variance<sp/>&lt;=<sp/>2*old_variance){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Kept<sp/>candidate<sp/>{}<sp/>--<sp/>it<sp/>has<sp/>good<sp/>enough<sp/>overlap<sp/>{}<sp/>and<sp/>variance<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>best_overlap_idx,<sp/>best_overlap,<sp/>std::log10(new_variance));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_theta;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;The<sp/>candidate<sp/>theta<sp/>has<sp/>worse<sp/>variance<sp/>than<sp/>before<sp/>[<sp/>idx<sp/>=<sp/>{}<sp/>|<sp/>overlap<sp/>=<sp/>{}<sp/>|<sp/>variance<sp/>=<sp/>{}<sp/>]...&quot;</highlight><highlight class="normal">,<sp/>best_overlap_idx,<sp/>best_overlap,<sp/>std::log10(new_variance));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Looking<sp/>for<sp/>a<sp/>candidate<sp/>with<sp/>lower<sp/>variance...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_quality)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a6a2bfd25450cd30f4a16b1f164161a1c" kindref="member">filter_states</ref>(eigvecs,eigvals,overlaps,<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>,<sp/>64);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[best_variance,<sp/>best_variance_idx]<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" kindref="member">get_best_state_in_window</ref>(state,<sp/>eigvecs,<sp/>eigvals_per_site_unreduced,<sp/>sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,<sp/>sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(best_variance<sp/>&lt;<sp/>old_variance){</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>Candidate<sp/>{}<sp/>has<sp/>better<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}.<sp/>Energy:<sp/>{},<sp/>overlap:<sp/>{}.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_variance_idx,<sp/>std::log10(best_variance),<sp/>std::log10(old_variance),<sp/>eigvals_per_site_unreduced(best_variance_idx),<sp/>overlaps(best_variance_idx));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(best_variance_idx),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>No<sp/>candidate<sp/>has<sp/>good<sp/>enough<sp/>overlap<sp/>or<sp/>variance,<sp/>returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6ace18bb9a2b22515d0cd36bca6b998bde" kindref="member">OptMode::VARIANCE</ref>:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_quality<sp/>&gt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Log<sp/>subspace<sp/>quality<sp/>is<sp/>poor:<sp/>{}<sp/>&gt;<sp/>{}.<sp/>Deciding<sp/>what<sp/>to<sp/>do...&quot;</highlight><highlight class="normal">,<sp/>std::log10(subspace_quality),<sp/>std::log10(<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prev_variance<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[best_variance,<sp/>idx_variance]<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1ae33f169391344d6f5e1421bb3468f1c0" kindref="member">get_best_state_in_window</ref>(state,eigvecs,eigvals_per_site_unreduced,sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx_variance<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(best_variance<sp/>&lt;<sp/>prev_variance){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>Eigenstate<sp/>{}<sp/>has<sp/>better<sp/>(log10)<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>idx_variance,<sp/>std::log10(best_variance),<sp/>std::log10(prev_variance));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(idx_variance),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;...<sp/>Switching<sp/>to<sp/>direct<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ab9f6fa872c8f3136ce5e0d5961a55991" kindref="member">ceres_direct_optimization</ref>(state,<sp/>sim_status,<sp/>optType);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,eigvals,subspace_quality)<sp/>=<sp/><ref refid="ceres__subspace_8cpp_1a6a2bfd25450cd30f4a16b1f164161a1c" kindref="member">filter_states</ref>(eigvecs,eigvals,overlaps,<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1ac4a810933ed04160f1126492b1fa28b1" kindref="member">subspace_quality_threshold</ref>,<sp/>64);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals_per_site_unreduced<sp/>=<sp/>(eigvals.array()<sp/>+<sp/>state.<ref refid="classclass__finite__state_1a9836c470ac6318f415b1df4034d6530e" kindref="member">get_energy_reduced</ref>())/state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>energy<sp/>reduction<sp/>for<sp/>energy<sp/>window<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_new;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_new<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_new,variance_new,<ref refid="namespacetools_1_1finite_1_1measure_1af8a40ef6c20e8ca83cdc5e8c238f9340" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>really<sp/>use<sp/>theta_start<sp/>as<sp/>the<sp/>projection<sp/>towards<sp/>the<sp/>previous<sp/>theta,<sp/>not<sp/>best<sp/>overlapping!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>alpha_i<sp/>=<sp/>&lt;theta_old<sp/>|<sp/>theta_new_i&gt;<sp/>is<sp/>not<sp/>supposed<sp/>to<sp/>be<sp/>squared!<sp/>The<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Between<sp/>theta_start<sp/>and<sp/>theta_old<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_start<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eigvecs.adjoint()<sp/><sp/>*<sp/>theta_old).normalized()<sp/><sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_start<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(theta_old.adjoint()<sp/>*<sp/>eigvecs).normalized()<sp/><sp/>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::subspc_opt_tuple&gt;<sp/>opt_log;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::debug){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_0<sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.conjugate().asDiagonal()<sp/>).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a81b06529556e68f882c591397b39ef2f" kindref="member">tools::finite::measure::energy_per_site</ref>(state,theta_old_map);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,theta_old_map);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(theta_old.dot(theta_0));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Initial&quot;</highlight><highlight class="normal">,<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size(),<sp/>energy_0,<sp/>std::log10(variance_0),<sp/>overlap_0,theta_0.norm(),<sp/>iter_0,0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>sanity<sp/>check<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt-&gt;tic();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>H2<sp/><sp/>=<sp/>state.get_multi_hamiltonian2_subspace_matrix(eigvecs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>Hv<sp/><sp/>=<sp/>eigvals.asDiagonal()<sp/>*<sp/>theta_start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>H2v<sp/>=<sp/>H2.template<sp/>selfadjointView&lt;Eigen::Upper&gt;()*theta_start;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>vHv<sp/><sp/>=<sp/>theta_start.dot(Hv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>vH2v<sp/>=<sp/>theta_start.dot(H2v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>vv<sp/><sp/><sp/>=<sp/>theta_start.squaredNorm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>ene<sp/><sp/>=<sp/>vHv/vv;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>var<sp/><sp/>=<sp/>vH2v/vv<sp/>-<sp/>ene*ene;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>ene_init_san<sp/>=<sp/>std::real(ene+state.get_energy_reduced())/state.get_length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>var_init_san<sp/>=<sp/>std::abs(var)/state.get_length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt-&gt;toc();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(&quot;Initial<sp/>(matrix)&quot;,theta_start.size(),<sp/>ene_init_san,<sp/>std::log10(var_init_san),<sp/>overlap_0,theta_start.norm(),<sp/>iter_0,0,<sp/>t_opt-&gt;get_last_time_interval());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>ceres::GradientProblemSolver::Options<sp/>options;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>options.line_search_type<sp/>=<sp/>ceres::LineSearchType::WOLFE;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>options.line_search_interpolation_type<sp/>=<sp/>ceres::LineSearchInterpolationType::CUBIC;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>options.line_search_direction_type<sp/>=<sp/>ceres::LineSearchDirectionType::LBFGS;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>options.nonlinear_conjugate_gradient_type<sp/>=<sp/>ceres::NonlinearConjugateGradientType::POLAK_RIBIERE;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_num_iterations<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_lbfgs_rank<sp/><sp/><sp/><sp/><sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>options.use_approximate_eigenvalue_bfgs_scaling<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_line_search_step_expansion<sp/>=<sp/>100;</highlight><highlight class="comment">//<sp/>100.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>options.min_line_search_step_size<sp/>=<sp/>1e-12;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_line_search_step_contraction<sp/>=<sp/>1e-3;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>options.min_line_search_step_contraction<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_num_line_search_step_size_iterations<sp/><sp/>=<sp/>30;</highlight><highlight class="comment">//20;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_num_line_search_direction_restarts<sp/><sp/><sp/><sp/>=<sp/>5;</highlight><highlight class="comment">//2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>options.line_search_sufficient_function_decrease<sp/><sp/>=<sp/>1e-2;</highlight><highlight class="comment">//<sp/>1e-2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>options.line_search_sufficient_curvature_decrease<sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_solver_time_in_seconds<sp/>=<sp/>60*5;</highlight><highlight class="comment">//60*2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>options.function_tolerance<sp/>=<sp/>1e-4;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>options.gradient_tolerance<sp/>=<sp/>1e-8;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>options.parameter_tolerance<sp/>=<sp/>1e-16;</highlight><highlight class="comment">//1e-12;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>options.minimizer_progress_to_stdout<sp/>=<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::trace;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>ceres::GradientProblemSolver::Summary<sp/>summary;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals" kindref="compound">tools::finite::opt::internals</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter,iter;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(optType){</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start.data()),<sp/>2*theta_start.size());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>functor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;std::complex&lt;double&gt;</ref>&gt;(state,<sp/>sim_status,eigvecs,eigvals);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>L-BFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>theta_start_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int)summary.iterations.size();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_count();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_norm();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor-&gt;get_energy();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor-&gt;get_variance();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXcd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start_cast.data()),<sp/>theta_start_cast.size()/2).normalized();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.conjugate().asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>functor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>theta_start.real();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>functor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;double&gt;</ref>(state,<sp/>sim_status,eigvecs.real(),eigvals);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>theta_start_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int)summary.iterations.size();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_count();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor-&gt;get_norm();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor-&gt;get_energy();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor-&gt;get_variance();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>theta_start_cast.normalized().cast&lt;<ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>&gt;();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs.real()<sp/>*<sp/>theta_start.real().asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>functor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/>spdlog::level::debug){</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>results<sp/>of<sp/>Ceres<sp/>LBFGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_new<sp/>=<sp/>(theta_old.adjoint()<sp/>*<sp/>theta_new).cwiseAbs().sum();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Ceres<sp/>L-BFGS&quot;</highlight><highlight class="normal">,<ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>.size(),<sp/>energy_new,<sp/>std::log10(variance_new),<sp/>overlap_new,theta_new.norm(),<sp/>iter,counter,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_san<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(theta_new,<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_san<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a81b06529556e68f882c591397b39ef2f" kindref="member">tools::finite::measure::energy_per_site</ref>(state,theta_san);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_san<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state,theta_san);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Sanity<sp/>check&quot;</highlight><highlight class="normal">,theta_san.size(),<sp/>energy_san,<sp/>std::log10(variance_san),<sp/>overlap_new,theta_new.norm(),<sp/>0,0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>up<sp/>and<sp/>print<sp/>reports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finished<sp/>Ceres.<sp/>Exit<sp/>status:<sp/>{}.<sp/>Message:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>ceres::TerminationTypeToString(summary.termination_type)<sp/>,<sp/>summary.message.c_str());</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>summary.FullReport()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a377466fe1d96e2eb2e2f9a4399cdfcb0" kindref="member">reports::print_report</ref>(opt_log);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1ab1cc211efd9f963d899d378e4660be72" kindref="member">tools::common::profile::t_opt</ref>.<ref refid="classclass__tic__toc_1afde905f387b29b69afd6940a2a8e2268" kindref="member">toc</ref>();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variance_new<sp/>&lt;<sp/>0.99<sp/>*<sp/>tools::finite::measure::energy_variance_per_site(state)){</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>an<sp/>improvement<sp/>of<sp/>1%<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>an<sp/>actual<sp/>improvement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>new<sp/>(better)<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(theta_new,<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variance_new<sp/>&lt;<sp/>10.0<sp/>*<sp/>tools::finite::measure::energy_variance_per_site(state))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>variance<sp/>to<sp/>increase<sp/>a<sp/>bit<sp/>to<sp/>come<sp/>out<sp/>of<sp/>local<sp/>minima</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>new<sp/>(worse)<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(theta_new,<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>optimization<sp/>didn&apos;t<sp/>improve<sp/>variance.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variance_new<sp/>&lt;=<sp/><ref refid="namespacesettings_1_1precision_1a8144c8c79b510717f340fff464e9a493" kindref="member">settings::precision::VarConvergenceThreshold</ref>)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>state.<ref refid="classclass__finite__state_1afcb0a1028025e0eed6a16af39e185753" kindref="member">tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="namespacetools_1_1common_1_1views_1a5e9c5e1d5bef73e833cbc054c7935af3" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>prev_variance<sp/>=<sp/>tools::finite::measure::energy_variance_per_site(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>[best_variance,<sp/>idx_variance]<sp/>=<sp/>get_best_state_in_window(state,eigvecs,eigvals_per_site_unreduced,sim_status.energy_lbound,sim_status.energy_ubound);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(idx_variance<sp/>&lt;<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;Returning<sp/>old<sp/>theta&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>theta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(best_variance<sp/>&lt;<sp/>prev_variance){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>Eigenstate<sp/>{}<sp/>has<sp/>better<sp/>(log10)<sp/>variance:<sp/>{}<sp/>&lt;<sp/>{}&quot;,idx_variance,<sp/>std::log10(best_variance),<sp/>std::log10(prev_variance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.tag_active_sites_have_been_updated(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Textra::Matrix_to_Tensor(eigvecs.col(idx_variance),<sp/>state.active_dimensions());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;...<sp/>discarding<sp/>subspace<sp/>and<sp/>switching<sp/>to<sp/>direct<sp/>mode&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ceres_direct_optimization(state,<sp/>sim_status,<sp/>optType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp"/>
  </compounddef>
</doxygen>
