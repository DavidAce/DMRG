<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ceres__subspace_8cpp" kind="file" language="C++">
    <compoundname>ceres_subspace.cpp</compoundname>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="ceres__subspace__functor_8h" local="yes">ceres_subspace_functor.h</includes>
    <includes refid="class__algorithm__status_8h" local="no">algorithms/class_algorithm_status.h</includes>
    <includes local="no">ceres/gradient_problem.h</includes>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="class__tensors__finite_8h" local="no">tensors/class_tensors_finite.h</includes>
    <includes refid="class__model__finite_8h" local="no">tensors/model/class_model_finite.h</includes>
    <includes refid="class__state__finite_8h" local="no">tensors/state/class_state_finite.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="prof_8h" local="no">tools/common/prof.h</includes>
    <includes refid="finite_2measure_8h" local="no">tools/finite/measure.h</includes>
    <includes refid="opt-internal_8h" local="no">tools/finite/opt-internal/opt-internal.h</includes>
    <includes refid="report_8h" local="no">tools/finite/opt-internal/report.h</includes>
    <includes refid="opt__mps_8h" local="no">tools/finite/opt_mps.h</includes>
    <incdepgraph>
      <node id="22">
        <label>ceres/iteration_callback.h</label>
      </node>
      <node id="40">
        <label>measure/state_measure_finite.h</label>
        <link refid="state__measure__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
      <node id="32">
        <label>tensors/class_tensors_finite.h</label>
        <link refid="class__tensors__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>tools/finite/measure.h</label>
        <link refid="finite_2measure_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="54">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="28">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="41">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>stdexcept</label>
      </node>
      <node id="30">
        <label>numeric</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace.cpp</label>
        <link refid="ceres__subspace_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="38">
        <label>tensors/model/class_model_finite.h</label>
        <link refid="class__model__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>measure/tensors_measure_finite.h</label>
        <link refid="tensors__measure__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="35">
        <label>tensors/edges/class_env_pair.h</label>
        <link refid="class__env__pair_8h"/>
      </node>
      <node id="18">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="36">
        <label>math/svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="51">
        <label>tools/finite/opt-internal/report.h</label>
        <link refid="report_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>fmt/core.h</label>
      </node>
      <node id="21">
        <label>ceres/first_order_function.h</label>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="34">
        <label>optional</label>
      </node>
      <node id="10">
        <label>ceres_subspace_functor.h</label>
        <link refid="ceres__subspace__functor_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="11">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>tools/common/prof.h</label>
        <link refid="prof_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="17">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="26">
        <label>ceres/gradient_problem.h</label>
      </node>
      <node id="48">
        <label>tools/finite/opt-internal/opt-internal.h</label>
        <link refid="opt-internal_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>tools/finite/opt_mps.h</label>
        <link refid="opt__mps_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstddef</label>
      </node>
      <node id="46">
        <label>chrono</label>
      </node>
      <node id="14">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="3">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>tools/finite/opt.h</label>
        <link refid="finite_2opt_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="53">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>ceres/gradient_problem_solver.h</label>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="39">
        <label>tensors/state/class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tools/finite/opt-internal/ceres_base.h</label>
        <link refid="ceres__base_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>memory</label>
      </node>
      <node id="29">
        <label>enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>algorithms/class_algorithm_status.h</label>
        <link refid="class__algorithm__status_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-07-15.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--<sp/>(textra<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ceres__subspace__functor_8h" kindref="compound">ceres_subspace_functor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__algorithm__status_8h" kindref="compound">algorithms/class_algorithm_status.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ceres/gradient_problem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__tensors__finite_8h" kindref="compound">tensors/class_tensors_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__model__finite_8h" kindref="compound">tensors/model/class_model_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__finite_8h" kindref="compound">tensors/state/class_state_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prof_8h" kindref="compound">tools/common/prof.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2measure_8h" kindref="compound">tools/finite/measure.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt-internal_8h" kindref="compound">tools/finite/opt-internal/opt-internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="report_8h" kindref="compound">tools/finite/opt-internal/report.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt__mps_8h" kindref="compound">tools/finite/opt_mps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt" kindref="compound">tools::finite::opt</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internal" kindref="compound">tools::finite::opt::internal</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="24" refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a99a93ee25d1e0092f31441c6edbb4dff" refkind="member"><highlight class="normal">std::vector&lt;opt_mps&gt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a99a93ee25d1e0092f31441c6edbb4dff" kindref="member">internal::subspace::find_candidates</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error_threshold,<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;state<sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref><sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edges<sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1precision_1af241365d45c25fd1f464b664f358e982" kindref="member">settings::precision::use_reduced_energy</ref><sp/>and<sp/><ref refid="namespacesettings_1_1precision_1aa5ebd91f50eca5c78963dd710966a417" kindref="member">settings::precision::use_shifted_mpo</ref>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_shift<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(tensors);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a1667265f25f87a16f31fca8a8a2fba93" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>H_local<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tools::finite::opt::internal::get_multisite_hamiltonian_matrix&lt;Scalar&gt;(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>energy_shift);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_tensor<sp/>=<sp/>state.get_multisite_mps();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_length<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state.get_length());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>eigvecs;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>multitheta<sp/>is<sp/>small<sp/>enough<sp/>you<sp/>can<sp/>afford<sp/>full<sp/>diag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multisite_tensor.size()<sp/>&lt;=<sp/><ref refid="namespacesettings_1_1precision_1a256ac8ea16a52b192d8e7078ac3d0e82" kindref="member">settings::precision::max_size_full_diag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1ae9d0498dcd8a4d5400a36a3bb88c46b0" kindref="member">find_subspace_full</ref>(H_local,<sp/>multisite_tensor);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigval_target;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(tensors);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.is_reduced())<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigval_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(tensors);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>reduce<sp/>=<sp/>{:.16f}<sp/>|<sp/>per<sp/>site<sp/>=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced(),<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_per_site_reduced());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>target<sp/>=<sp/>{:.16f}<sp/>|<sp/>per<sp/>site<sp/>=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>energy_target,<sp/>energy_target<sp/>/<sp/>dbl_length);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Eigval<sp/>target<sp/>=<sp/>{:.16f}<sp/>|<sp/>per<sp/>site<sp/>=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>eigval_target,<sp/>eigval_target<sp/>/<sp/>dbl_length);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Eigval<sp/>target<sp/>+<sp/>Energy<sp/>reduce<sp/>=<sp/>Energy:<sp/>{:.16f}<sp/>+<sp/>{:.16f}<sp/>=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>eigval_target<sp/>/<sp/>dbl_length,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_per_site_reduced(),<sp/>energy_target<sp/>/<sp/>dbl_length);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigval_target<sp/>=<sp/>energy_target;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1ac51d937dd49f98496e276c0d35af947d" kindref="member">find_subspace_part</ref>(H_local,<sp/>multisite_tensor,<sp/>eigval_target,<sp/>subspace_error_threshold,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Eigval<sp/>range<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{:.16f}<sp/>--&gt;<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>eigvals.minCoeff(),<sp/>eigvals.maxCoeff());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>range<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{:.16f}<sp/>--&gt;<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>eigvals.minCoeff()<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced(),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals.maxCoeff()<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Energy<sp/>range<sp/>per<sp/>site:<sp/>{:.16f}<sp/>--&gt;<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>eigvals.minCoeff()<sp/>/<sp/>dbl_length<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_per_site_reduced(),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals.maxCoeff()<sp/>/<sp/>dbl_length<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_per_site_reduced());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a8332162315fe72731f0868bde739d89b" kindref="member">reports::print_eigs_report</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,<sp/>double&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">Textra::subtract_phase</ref>(eigvecs);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trunc<sp/>=<sp/>eigvecs.imag().cwiseAbs().sum();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trunc<sp/>&gt;<sp/>1e-12)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;truncating<sp/>imag<sp/>of<sp/>eigvecs,<sp/>sum:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>trunc);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>eigvecs.real();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/>multisite_mps_tensor<sp/>=<sp/>state.get_multisite_mps();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps_vector<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;(multisite_mps_tensor.data(),<sp/>multisite_mps_tensor.size());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1adf8bc0e9cd41a987d462608c75a36b40" kindref="member">energy_reduced</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/>overlaps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(multisite_mps_vector.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>candidate_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;item<sp/>:<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1ad67da32c05b6f76b32e985e54c5523f6" kindref="member">reports::eigs_log</ref>)<sp/>{<sp/>candidate_time<sp/>+=<sp/>item.ham_time<sp/>+<sp/>item.lu_time<sp/>+<sp/>item.eig_time;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;opt_mps&gt;<sp/>candidate_list;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>candidate_list.reserve(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eigvals.size()));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/>eigvals.size();<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>to<sp/>normalize<sp/>the<sp/>eigenvectors<sp/>that<sp/>we<sp/>get<sp/>from<sp/>the<sp/>solver:<sp/>they<sp/>are<sp/>not<sp/>always<sp/>well<sp/>normalized<sp/>when<sp/>we<sp/>get<sp/>them!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eigvec_i<sp/>=<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>(eigvecs.col(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>).normalized(),<sp/>state.active_dimensions());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.emplace_back(fmt::format(</highlight><highlight class="stringliteral">&quot;eigenvector<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvec_i,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a44e973267db664b0bc453a3e0323d565" kindref="member">active_sites</ref>,<sp/>eigvals(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>),<sp/><ref refid="namespacetools_1_1finite_1_1measure_1adf8bc0e9cd41a987d462608c75a36b40" kindref="member">energy_reduced</ref>,<sp/>std::nullopt,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlaps(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>),<sp/>tensors.<ref refid="classclass__tensors__finite_1a2821ebade96b96a7ac4a8c26d0e64b8e" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.back().set_time(candidate_time);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.back().set_counter(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1ad67da32c05b6f76b32e985e54c5523f6" kindref="member">reports::eigs_log</ref>.size());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.back().set_iter(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1ad67da32c05b6f76b32e985e54c5523f6" kindref="member">reports::eigs_log</ref>.size());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.back().is_basis_vector<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list.back().validate_candidate();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidate_list;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>internal::subspace::find_candidates&lt;cplx&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error_threshold,<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>internal::subspace::find_candidates&lt;real&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_error_threshold,<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="namespacetools_1_1finite_1_1opt_1_1internal_1a75015495e753a8da26599e9c5bfbcdda" refkind="member"><highlight class="normal"><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a75015495e753a8da26599e9c5bfbcdda" kindref="member">tools::finite::opt::internal::ceres_optimize_subspace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/>&amp;initial_mps,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>&amp;candidate_list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;H2_subspace,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__algorithm__status" kindref="compound">class_algorithm_status</ref><sp/>&amp;status,<sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1e" kindref="member">OptType</ref><sp/>optType,<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,<sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handy<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;state<sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref><sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/>optimized_mps;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>candidate_best_idx<sp/>=</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af22b4e8592cc8ff191f403bef30741b7" kindref="member">internal::subspace::get_idx_to_candidate_with_highest_overlap</ref>(candidate_list,<sp/>status.<ref refid="classclass__algorithm__status_1a50ec138a23ad7ecc2d370487f94cad4f" kindref="member">energy_llim_per_site</ref>,<sp/>status.<ref refid="classclass__algorithm__status_1aa35aa4b05938ef80c45509eefde7a37a" kindref="member">energy_ulim_per_site</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(candidate_best_idx)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps<sp/>=<sp/>*std::next(candidate_list.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(candidate_best_idx.value()));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps<sp/>=<sp/>*candidate_list.begin();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullspace_dims<sp/><sp/>=<sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>().dimensions();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>subspace_vector<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a3d687316eb37f14cb8e3735c418f9cd0" kindref="member">internal::subspace::get_vector_in_subspace</ref>(candidate_list,<sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>with<sp/>initial<sp/>guess:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a9572f5c01a10ad36bbd1632e2f20670c" kindref="member">get_name</ref>());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>the<sp/>eigenvalues<sp/>in<sp/>a<sp/>convenient<sp/>format<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eigvals<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a2e8cd1f1f763714618c2e425dc6d31cf" kindref="member">internal::subspace::get_eigvals</ref>(candidate_list);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Sanity<sp/>checks</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/><ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">spdlog::level::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>using<sp/>explicit<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>initial_vector_sbsp<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a3d687316eb37f14cb8e3735c418f9cd0" kindref="member">internal::subspace::get_vector_in_subspace</ref>(candidate_list,<sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_sbsp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(subspace_vector.dot(initial_vector_sbsp));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>Hv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eigvals.asDiagonal()<sp/>*<sp/>subspace_vector;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>H2v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>H2_subspace.template<sp/>selfadjointView&lt;Eigen::Upper&gt;()<sp/>*<sp/>subspace_vector;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vHv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.dot(Hv);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vH2v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.dot(H2v);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.squaredNorm();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ene<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vHv<sp/>/<sp/>vv;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vH2v<sp/>/<sp/>vv<sp/>-<sp/>ene<sp/>*<sp/>ene;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ene_init_san<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(ene<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state.get_length());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_init_san<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(var)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state.get_length());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/>description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{:&lt;8}<sp/>{:&lt;16}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a9572f5c01a10ad36bbd1632e2f20670c" kindref="member">get_name</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;matrix<sp/>check&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_dbg.toc();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">internal::reports::bfgs_add_entry</ref>(description,<sp/>subspace_vector.size(),<sp/>subspace_vector.size(),<sp/>ene_init_san,<sp/>var_init_san,<sp/>overlap_sbsp,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector.norm(),<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),<sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;get_last_interval());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>current<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>theta_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af5f97012fc6ab8ad0a495a9fc407ce40" kindref="member">internal::subspace::get_vector_in_fullspace</ref>(candidate_list,<sp/>subspace_vector);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_0_tensor<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(theta_0,<sp/>state.active_dimensions());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(theta_0_tensor,<sp/>tensors);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_0<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(theta_0_tensor,<sp/>tensors);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>().dot(theta_0));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/>description<sp/><sp/><sp/><sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{:&lt;8}<sp/>{:&lt;16}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a9572f5c01a10ad36bbd1632e2f20670c" kindref="member">get_name</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;fullspace<sp/>check&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_dbg.toc();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">internal::reports::bfgs_add_entry</ref>(description,<sp/>theta_0.size(),<sp/>subspace_vector.size(),<sp/>energy_0,<sp/>variance_0,<sp/>overlap_0,<sp/>theta_0.norm(),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;get_last_interval());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Start<sp/>the<sp/>LBFGS<sp/>optimization<sp/>process<sp/>for<sp/>the<sp/>subspace</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1af98ed8738849042e8bd79a77c8a783db" kindref="member">internal::ceres_default_options</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>summary<sp/>=<sp/>ceres::GradientProblemSolver::Summary();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_bfgs<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_bfgs&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/>subspace_vector_cast<sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(subspace_vector.data()),<sp/>2<sp/>*<sp/>subspace_vector.size());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;std::complex&lt;double&gt;</ref>&gt;(tensors,<sp/>status,<sp/>H2_subspace,<sp/>eigvals);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_custom_log_callback" kindref="compound">CustomLogCallback</ref><sp/>ceres_logger(*functor);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.callbacks.emplace_back(&amp;ceres_logger);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS<sp/>subspace<sp/>cplx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>subspace_vector_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector<sp/>=</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXcd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(subspace_vector_cast.data()),<sp/>subspace_vector_cast.size()<sp/>/<sp/>2).normalized();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>results<sp/>from<sp/>the<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a76e54c37517b602a992736e509a2b33c" kindref="member">set_tensor</ref>(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a5864e3702405804a2e1b85011f68a81d" kindref="member">subspace::get_tensor_in_fullspace</ref>(candidate_list,<sp/>subspace_vector,<sp/>fullspace_dims));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a983ddbd3925c2774f0452811cbcbdb31" kindref="member">set_counter</ref>(functor-&gt;get_count());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_H2n;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2v&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nH2n;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_Hn;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vHv&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nHn;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_step&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_step;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_bfgs<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_bfgs&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/><sp/><sp/>subspace_vector_cast<sp/>=<sp/>subspace_vector.real();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/>H2_subspace_real<sp/><sp/><sp/><sp/><sp/>=<sp/>H2_subspace.real();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;double&gt;</ref>(tensors,<sp/>status,<sp/>H2_subspace_real,<sp/>eigvals);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_custom_log_callback" kindref="compound">CustomLogCallback</ref><sp/>ceres_logger(*functor);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.callbacks.emplace_back(&amp;ceres_logger);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS<sp/>subspace<sp/>real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>subspace_vector_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector<sp/>=<sp/>subspace_vector_cast.normalized().cast&lt;<ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref>&gt;();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a76e54c37517b602a992736e509a2b33c" kindref="member">set_tensor</ref>(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a5864e3702405804a2e1b85011f68a81d" kindref="member">subspace::get_tensor_in_fullspace</ref>(candidate_list,<sp/>subspace_vector,<sp/>fullspace_dims));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a983ddbd3925c2774f0452811cbcbdb31" kindref="member">set_counter</ref>(functor-&gt;get_count());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_H2n;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2v&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nH2n;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_Hn;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vHv&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nHn;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_step&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_step;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>and<sp/>set<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>tensor<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1aca8b22eb23cb0e8244fadbbfd55309c6" kindref="member">normalize</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a3b1d1adc0b58e547aca1d11b58fb458a" kindref="member">set_energy</ref>(<ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>(),<sp/>tensors));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4468144ec58b49357416b95f60ea6845" kindref="member">set_variance</ref>(<ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>(),<sp/>tensors));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a33efc5b4f6834730589bac118ee6daeb" kindref="member">set_overlap</ref>(std::abs(initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>().dot(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>())));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a67bc2222c30ec822e71a2a6f3f350559" kindref="member">set_iter</ref>(summary.iterations.size());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1acc447ad547335119e284feb1cea92433" kindref="member">set_time</ref>(summary.total_time_in_seconds);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>Ceres<sp/>results<sp/>are<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_check<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>(),<sp/>tensors);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_check<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>(),<sp/>tensors);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(1.0<sp/>-<sp/>std::abs(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1ae998f92a55c71fbf23b105fdf472c5a9" kindref="member">get_energy</ref>()<sp/>/<sp/>energy_check))<sp/>&gt;<sp/>1e-3)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Energy<sp/>mismatch:<sp/>Ceres:<sp/>{:.16f}<sp/>|<sp/>DMRG<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1ae998f92a55c71fbf23b105fdf472c5a9" kindref="member">get_energy</ref>(),<sp/>energy_check);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(1.0<sp/>-<sp/>std::abs(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a492cb8db5db83df11cd8110e9bfaba55" kindref="member">get_variance</ref>()<sp/>/<sp/>variance_check))<sp/>&gt;<sp/>1e-3)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Variance<sp/>mismatch:<sp/>Ceres:<sp/>{:.16f}<sp/>|<sp/>DMRG<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>std::log10(optimized_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a492cb8db5db83df11cd8110e9bfaba55" kindref="member">get_variance</ref>()),<sp/>std::log10(variance_check));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a235e00e178ffd59357cb44bae00dabba" kindref="member">reports::time_add_sub_entry</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>hrs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(summary.total_time_in_seconds<sp/>/<sp/>3600);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::fmod(summary.total_time_in_seconds,<sp/>3600)<sp/>/<sp/>60);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec<sp/>=<sp/>std::fmod(std::fmod(summary.total_time_in_seconds,<sp/>3600),<sp/>60);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>LBFGS<sp/>in<sp/>{:0&lt;2}:{:0&lt;2}:{:0&lt;.1f}<sp/>seconds<sp/>and<sp/>{}<sp/>iters.<sp/>Exit<sp/>status:<sp/>{}.<sp/>Message:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hrs,<sp/>min,<sp/>sec,<sp/>summary.iterations.size(),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::TerminationTypeToString(summary.termination_type),<sp/>summary.message.c_str());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>summary.FullReport()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/><ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">spdlog::level::debug</ref>)<sp/>{<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">reports::bfgs_add_entry</ref>(</highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;opt&quot;</highlight><highlight class="normal">,<sp/>optimized_mps,<sp/>subspace_vector.size());<sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optSpace<sp/>==<sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fababedda1fc613021aa4f8fe7a4c5f6fbd7" kindref="member">OptSpace::SUBSPACE_AND_DIRECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;SUBSPACE<sp/>optimization<sp/>done.<sp/>Starting<sp/>fine<sp/>tuning<sp/>with<sp/>DIRECT<sp/>optimization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt_sub.toc();</highlight><highlight class="comment">//<sp/>Suspend<sp/>subspace<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aad84fb8b220c9101812aa07c8ce70544" kindref="member">ceres_direct_optimization</ref>(tensors,<sp/>optimized_mps,<sp/>status,<sp/>optType,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt_sub.tic();<sp/></highlight><highlight class="comment">//<sp/>Resume<sp/>subspace<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>optimized<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optimized_mps;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="namespacetools_1_1finite_1_1opt_1_1internal_1a1930d70a629680d771eab0169e328d7d" refkind="member"><highlight class="normal"><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a1930d70a629680d771eab0169e328d7d" kindref="member">tools::finite::opt::internal::ceres_subspace_optimization</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__algorithm__status" kindref="compound">class_algorithm_status</ref><sp/>&amp;status,<sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1e" kindref="member">OptType</ref><sp/>optType,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,<sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>sites(tensors.<ref refid="classclass__tensors__finite_1a44e973267db664b0bc453a3e0323d565" kindref="member">active_sites</ref>.begin(),<sp/>tensors.<ref refid="classclass__tensors__finite_1a44e973267db664b0bc453a3e0323d565" kindref="member">active_sites</ref>.end());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_mps(</highlight><highlight class="stringliteral">&quot;current<sp/>state&quot;</highlight><highlight class="normal">,<sp/>tensors.<ref refid="classclass__tensors__finite_1aace591415af906bede6b14c4f27b21a0" kindref="member">get_multisite_mps</ref>(),<sp/>sites,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(tensors)<sp/>-<sp/>tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>-&gt;get_energy_reduced(),<sp/></highlight><highlight class="comment">//<sp/>Eigval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>-&gt;get_energy_reduced(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>reduced<sp/>for<sp/>full<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(tensors),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/></highlight><highlight class="comment">//<sp/>Overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensors.<ref refid="classclass__tensors__finite_1a2821ebade96b96a7ac4a8c26d0e64b8e" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1aebdd30df0702180cb9430b5993188191" kindref="member">validate_candidate</ref>();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a1930d70a629680d771eab0169e328d7d" kindref="member">ceres_subspace_optimization</ref>(tensors,<sp/>initial_mps,<sp/>status,<sp/>optType,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="namespacetools_1_1finite_1_1opt_1_1internal_1a06ef5464dc034b9d2ee48291313efc48" refkind="member"><highlight class="normal"><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a1930d70a629680d771eab0169e328d7d" kindref="member">tools::finite::opt::internal::ceres_subspace_optimization</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__tensors__finite" kindref="compound">class_tensors_finite</ref><sp/>&amp;tensors,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/>&amp;initial_mps,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__algorithm__status" kindref="compound">class_algorithm_status</ref><sp/>&amp;status,<sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1e" kindref="member">OptType</ref><sp/>optType,<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948" kindref="member">OptMode</ref><sp/>optMode,<sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fab" kindref="member">OptSpace</ref><sp/>optSpace)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>in<sp/>SUBSPACE<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Subspace<sp/>optimization</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Introduction</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>subspace<sp/>optimization<sp/>we<sp/>consider<sp/>a<sp/>&quot;local&quot;<sp/>subsection<sp/>of<sp/>the<sp/>&quot;global&quot;<sp/>L-site<sp/>system,</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>usually<sp/>this<sp/>corresponds<sp/>to<sp/>n=2<sp/>local<sp/>sites<sp/>but<sp/>in<sp/>multisite<sp/>dmrg<sp/>we<sp/>may<sp/>consider</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>any<sp/>n=[2,8]<sp/>adjacent<sp/>sites.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>point<sp/>here<sp/>is<sp/>to<sp/>minimize<sp/>the<sp/>global<sp/>energy<sp/>variance<sp/>Var<sp/>H_global,<sp/>by<sp/>tuning<sp/>only<sp/>the<sp/>parameters<sp/>of</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>local<sp/>wavefunction<sp/>|psi&gt;_local<sp/>corresponding<sp/>to<sp/>the<sp/>local<sp/>Hamiltonian<sp/>H_local<sp/>for<sp/>n<sp/>sites.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>other<sp/>words,<sp/>we<sp/>seek<sp/>the<sp/>local<sp/>vector<sp/>which<sp/>minimizes<sp/>the<sp/>global<sp/>energy<sp/>variance.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>worth<sp/>noting<sp/>some<sp/>properties<sp/>which<sp/>hold<sp/>when<sp/>the<sp/>DMRG<sp/>process<sp/>is<sp/>fully<sp/>converged:</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>{x}<sp/>are<sp/>all<sp/>the<sp/>eigenvectors<sp/>of<sp/>H_local,<sp/>only<sp/>one<sp/>of<sp/>them<sp/>has<sp/>overlap<sp/>&lt;x_i|y&gt;<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>y<sp/>is<sp/>the<sp/>current<sp/>local<sp/>vector<sp/>for<sp/>n<sp/>sites.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Since<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>overlaps<sp/>must<sp/>add<sp/>to<sp/>1,<sp/>the<sp/>rest<sp/>have<sp/>&lt;x_j|y&gt;<sp/>=<sp/>0<sp/>when<sp/>i<sp/>!=<sp/>j.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>particular<sp/>eigenvector<sp/>is<sp/>also<sp/>the<sp/>one<sp/>that<sp/>minimizes<sp/>the<sp/>Var<sp/>H_global,</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>no<sp/>further<sp/>optimization<sp/>should<sp/>be<sp/>needed.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>However,<sp/>before<sp/>the<sp/>DMRG<sp/>process<sp/>has<sp/>converged<sp/>this<sp/>is<sp/>not<sp/>true.<sp/>Instead:</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>{x}<sp/>are<sp/>all<sp/>the<sp/>eigenvectors<sp/>of<sp/>H_local<sp/>we<sp/>have<sp/>&lt;x_i|y&gt;<sp/>&gt;<sp/>0<sp/>for<sp/>several<sp/>i.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>None<sp/>{x}<sp/>minimizes<sp/>Var<sp/>H_global,<sp/>but<sp/>a<sp/>linear<sp/>combination<sp/>of<sp/>several<sp/>x<sp/>could.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Fully<sp/>diagonalizing<sp/>H_local<sp/>yields<sp/>all<sp/>K<sp/>eigenvectors<sp/>{x},<sp/>but<sp/>if<sp/>H_local<sp/>is<sp/>too<sp/>big<sp/>this<sp/>operation</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>becomes<sp/>prohibitively<sp/>expensive.<sp/>Instead<sp/>we<sp/>resort<sp/>to<sp/>finding<sp/>a<sp/>subset<sp/>with<sp/>k<sp/>&lt;&lt;<sp/>K<sp/>eigenvectors<sp/>[x],</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>whose<sp/>eigenvalues<sp/>are<sp/>the<sp/>k<sp/>energies<sp/>closest<sp/>to<sp/>the<sp/>current<sp/>energy.<sp/>Usually<sp/>the<sp/>eigenvectors</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>which<sp/>have<sp/>some<sp/>overlap<sp/>&lt;x_i|y&gt;<sp/>&gt;<sp/>0<sp/>are<sp/>found<sp/>in<sp/>the<sp/>subset<sp/>[x]<sp/>if<sp/>k<sp/>is<sp/>large<sp/>enough.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>Subspace<sp/>Optimization<sp/>we<sp/>find<sp/>a<sp/>linear<sp/>combination<sp/>eigenvectors<sp/>in<sp/>the<sp/>subspace<sp/>[x]<sp/>which</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>minimizes<sp/>Var<sp/>H_global,<sp/>hence<sp/>the<sp/>name.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Subspace<sp/>optimization<sp/>steps</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>0)<sp/><sp/>Find<sp/>a<sp/>subspace,<sp/>i.e.<sp/>a<sp/>set<sp/>of<sp/>k<sp/>eigenvectors<sp/>[x]<sp/>to<sp/>the<sp/>local<sp/>Hamiltonian<sp/>H_local<sp/>with</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>eigenvalue<sp/>closest<sp/>to<sp/>the<sp/>current<sp/>energy.<sp/>Note<sp/>that<sp/>H_local<sp/>is<sp/>a<sp/>K<sp/>*<sp/>K<sp/>matrix,</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>k<sp/>&lt;&lt;<sp/>K.<sp/>The<sp/>set<sp/>[x]<sp/>is<sp/>sorted<sp/>in<sp/>order<sp/>of<sp/>descending<sp/>overlap<sp/>&lt;x_i|y&gt;,</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>y<sp/>is<sp/>the<sp/>current<sp/>vector.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>1)</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(O)<sp/>If<sp/><sp/>OptMode::OVERLAP:</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>best<sp/>candidate<sp/>inside<sp/>of<sp/>the<sp/>energy<sp/>window:</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>OA)<sp/>idx<sp/>&gt;=<sp/>0:<sp/>Candidate<sp/>found<sp/>in<sp/>window.<sp/>Return<sp/>that<sp/>candidate</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>OB)<sp/>idx<sp/>=<sp/>-1:<sp/>No<sp/>candidate<sp/>found<sp/>in<sp/>window.<sp/>Return<sp/>old<sp/>tensor</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(V)<sp/>If<sp/>OptMode::SUBSPACE<sp/>or<sp/>OptMode::SUBSPACE_AND_DIRECT</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Make<sp/>sure<sp/>k<sp/>is<sp/>as<sp/>small<sp/>as<sp/>possible.<sp/>I.e.<sp/>filter<sp/>out<sp/>eigenvectors<sp/>from<sp/>[x]<sp/>down</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>an<sp/>even<sp/>smaller<sp/>set<sp/>of<sp/>&quot;relevant&quot;<sp/>candidates<sp/>for<sp/>doing<sp/>subspace<sp/>optimization.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allowing<sp/>a<sp/>maximum<sp/>of<sp/>k<sp/>==<sp/>64<sp/>candidates<sp/>keeps<sp/>ram<sp/>below<sp/>2GB<sp/>when<sp/>the<sp/>problem</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>==<sp/>4096<sp/>(the<sp/>linear<sp/>size<sp/>of<sp/>H_local<sp/>and<sp/>the<sp/>mps<sp/>multisite_tensor).</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>means<sp/>that<sp/>we<sp/>filter<sp/>out</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>outside<sp/>of<sp/>the<sp/>energy<sp/>window<sp/>(if<sp/>one<sp/>is<sp/>enabled)</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>candidates<sp/>with<sp/>little<sp/>or<sp/>no<sp/>overlap<sp/>to<sp/>the<sp/>current<sp/>state.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>filtering<sp/>process<sp/>collects<sp/>the<sp/>candidate<sp/>state<sp/>with<sp/>best<sp/>overlap<sp/>until</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either<sp/>of<sp/>these<sp/>two<sp/>criteria<sp/>is<sp/>met:</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>than<sp/>N=max_accept<sp/>candidates<sp/>have<sp/>been<sp/>collected</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>subspace<sp/>error<sp/>&quot;eps&quot;<sp/>is<sp/>low<sp/>enough¹</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>filtering<sp/>returns<sp/>the<sp/>candidates<sp/>sorted<sp/>in<sp/>decreasing<sp/>overlap.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>¹<sp/>We<sp/>define<sp/>eps<sp/>=<sp/>1<sp/>-<sp/>Σ_i<sp/>|&lt;x_i|y&gt;|².<sp/>A<sp/>value<sp/>eps<sp/>~1e-10<sp/>is<sp/>reasonable.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>2)</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>best<sp/>candidate<sp/>inside<sp/>of<sp/>the<sp/>energy<sp/>window:</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>VA)<sp/>idx<sp/>=<sp/>-1:<sp/>No<sp/>candidate<sp/>found<sp/>in<sp/>window.<sp/>Return<sp/>old<sp/>tensor</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>VB)<sp/>We<sp/>have<sp/>many<sp/>candidates,<sp/>including<sp/>the<sp/>current<sp/>tensor.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>They<sp/>should<sp/>be<sp/>viewed<sp/>as<sp/>good<sp/>starting<sp/>guesses<sp/>for<sp/>LBFGS<sp/>optimization.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optimize<sp/>them<sp/>one<sp/>by<sp/>one,<sp/>and<sp/>keep<sp/>the</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>2)<sp/><sp/>Find<sp/>the<sp/>best<sp/>overlapping<sp/>state<sp/>among<sp/>the<sp/>relevant<sp/>candidates.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>3)<sp/><sp/>We<sp/>can<sp/>now<sp/>make<sp/>different<sp/>decisions<sp/>based<sp/>on<sp/>the<sp/>overlap.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A)<sp/><sp/>If<sp/>best_overlap_idx<sp/>==<sp/>-1</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No<sp/>state<sp/>is<sp/>in<sp/>energy<sp/>window<sp/>-&gt;<sp/>discard!<sp/>Return<sp/>old<sp/>multisite_mps_tensor.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B)<sp/><sp/>If<sp/>overlap_high<sp/>&lt;=<sp/>best_overlap.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>environments<sp/>have<sp/>been<sp/>modified<sp/>just<sp/>slightly<sp/>since<sp/>the<sp/>last<sp/>time<sp/>considered</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>these<sp/>sites,<sp/>but<sp/>the<sp/>signal<sp/>is<sp/>still<sp/>clear<sp/>--<sp/>we<sp/>are<sp/>still<sp/>targeting<sp/>the<sp/>same<sp/>state.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>However<sp/>we<sp/>can&apos;t<sp/>be<sp/>sure<sp/>that<sp/>the<sp/>contributions<sp/>from<sp/>nearby<sp/>states<sp/>is<sp/>just<sp/>noise.<sp/>Instead<sp/>of<sp/>just</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keeping<sp/>the<sp/>state<sp/>we<sp/>should<sp/>optimize<sp/>its<sp/>variance.<sp/>This<sp/>is<sp/>important<sp/>in<sp/>the<sp/>later<sp/>stages<sp/>when<sp/>variance</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>low<sp/>and<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>ruin<sp/>those<sp/>last<sp/>decimals.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>just<sp/>need<sp/>to<sp/>decide<sp/>which<sp/>initial<sp/>guess<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B1)<sp/>If<sp/>best_overlap_variance<sp/>&lt;=<sp/>theta_variance:<sp/>set<sp/>theta_initial<sp/>=<sp/>best_overlap_theta.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B2)<sp/>Else,<sp/>set<sp/>theta_initial<sp/>=<sp/>multisite_mps_tensor.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C)<sp/><sp/>If<sp/>overlap_cat<sp/>&lt;=<sp/>best_overlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>overlap_high</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>for<sp/>one<sp/>reasons:</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>There<sp/>are<sp/>a<sp/>few<sp/>candidate<sp/>states<sp/>with<sp/>significant<sp/>overlap<sp/>(superposition)</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It&apos;s<sp/>clear<sp/>that<sp/>we<sp/>need<sp/>to<sp/>optimize,<sp/>but<sp/>we<sp/>have<sp/>to<sp/>think<sp/>carefully<sp/>about<sp/>the<sp/>initial<sp/>guess.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Right<sp/>now<sp/>it<sp/>makes<sp/>sense<sp/>to<sp/>always<sp/>choose<sp/>best<sp/>overlap<sp/>theta,<sp/>since<sp/>that<sp/>forces<sp/>the<sp/>algorithm<sp/>to</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>choose<sp/>a<sp/>particular<sp/>state<sp/>and<sp/>not<sp/>get<sp/>stuck<sp/>in<sp/>superposition.<sp/>Choosing<sp/>the<sp/>old<sp/>theta<sp/>may<sp/>just<sp/>entrench</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>algorithm<sp/>into<sp/>a<sp/>local<sp/>minima.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D)<sp/><sp/>If<sp/>0<sp/>&lt;=<sp/>best_overlap<sp/>and<sp/>best_overlap<sp/>&lt;<sp/>overlap_cat</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>for<sp/>three<sp/>reasons,<sp/>most<sp/>often<sp/>early<sp/>in<sp/>the<sp/>simulation.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>There<sp/>are<sp/>several<sp/>candidate<sp/>states<sp/>with<sp/>significant<sp/>overlap<sp/>(superposition)</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>The<sp/>highest<sp/>overlapping<sp/>states<sp/>were<sp/>outside<sp/>of<sp/>the<sp/>energy<sp/>window,<sp/>leaving<sp/>just<sp/>these<sp/>candidates.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>The<sp/>energy<sp/>targeting<sp/>of<sp/>states<sp/>has<sp/>failed<sp/>for<sp/>some<sp/>reason,<sp/>perhaps<sp/>the<sp/>spectrum<sp/>is<sp/>particularly<sp/>dense_lu.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>any<sp/>case,<sp/>it<sp/>is<sp/>clear<sp/>we<sp/>are<sp/>lost<sp/>Hilbert<sp/>space.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Also,<sp/>the<sp/>subspace_error<sp/>is<sp/>no<sp/>longer<sp/>a<sp/>good<sp/>measure<sp/>of<sp/>how<sp/>useful<sp/>the<sp/>subspace<sp/>is<sp/>to<sp/>us,<sp/>since<sp/>it&apos;s<sp/>only</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measuring<sp/>how<sp/>well<sp/>the<sp/>old<sp/>state<sp/>can<sp/>be<sp/>described,<sp/>but<sp/>the<sp/>old<sp/>state<sp/>is<sp/>likely<sp/>very<sp/>different<sp/>from<sp/>what</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we&apos;re<sp/>looking<sp/>for.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>So<sp/>to<sp/>address<sp/>all<sp/>three<sp/>cases,<sp/>do<sp/>DIRECT<sp/>optimization<sp/>with<sp/>best_overlap_theta<sp/>as<sp/>initial<sp/>guess.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>particular,<sp/>notice<sp/>that<sp/>we<sp/>never<sp/>use<sp/>the<sp/>candidate<sp/>that<sp/>happens<sp/>to<sp/>have<sp/>the<sp/>best<sp/>variance.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handy<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;state<sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1a4679ab6f9da1e325569d20d5503bc0b5" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref><sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1ae5292cd1a9588909b060778ef0ec8092" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;edges<sp/>=<sp/>*tensors.<ref refid="classclass__tensors__finite_1ad4f2b4660b0e219fcbf111461044c375" kindref="member">edges</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Step<sp/>0)<sp/>Find<sp/>the<sp/>subspace.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>subspace<sp/>set<sp/>of<sp/>candidate<sp/>eigenstates<sp/>obtained<sp/>from<sp/>full<sp/>or<sp/>partial<sp/>diagonalization</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;opt_mps&gt;<sp/>candidate_list;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list<sp/>=<sp/>internal::subspace::find_candidates&lt;Scalar&gt;(tensors,<sp/><ref refid="namespacesettings_1_1precision_1a9d89b844f40c612f7f37d7f0b873382c" kindref="member">settings::precision::min_subspace_error</ref>,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_list<sp/>=<sp/>internal::subspace::find_candidates&lt;double&gt;(tensors,<sp/><ref refid="namespacesettings_1_1precision_1a9d89b844f40c612f7f37d7f0b873382c" kindref="member">settings::precision::min_subspace_error</ref>,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>found<sp/>with<sp/>{}<sp/>eigenvectors&quot;</highlight><highlight class="normal">,<sp/>candidate_list.size());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>1)<sp/>(Overlap<sp/>mode)<sp/>Return<sp/>best<sp/>overlap</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optMode<sp/>==<sp/><ref refid="config_2enums_8h_1a10bb7f1069ec16368388eec633330948a8c009c8dd4d4f9dde7515c00d5cd4661" kindref="member">OptMode::OVERLAP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_overlap_idx<sp/>=</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af22b4e8592cc8ff191f403bef30741b7" kindref="member">internal::subspace::get_idx_to_candidate_with_highest_overlap</ref>(candidate_list,<sp/>status.<ref refid="classclass__algorithm__status_1a50ec138a23ad7ecc2d370487f94cad4f" kindref="member">energy_llim_per_site</ref>,<sp/>status.<ref refid="classclass__algorithm__status_1aa35aa4b05938ef80c45509eefde7a37a" kindref="member">energy_ulim_per_site</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap_idx)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(OA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(settings::debug)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(const<sp/>auto<sp/>&amp;<sp/>[idx,<sp/>candidate]<sp/>:<sp/>iter::enumerate(candidate_list))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate.set_variance(tools::finite::measure::energy_variance(candidate.get_tensor(),<sp/>tensors));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/>fmt::format(&quot;Candidate<sp/>{:10}<sp/>|<sp/>overlap<sp/>{:&lt;14.12f}<sp/>|<sp/>energy<sp/>{:&lt;+20.16f}<sp/>|<sp/>variance<sp/>{:&lt;+20.16f}&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate.get_name(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate.get_overlap(),<sp/>candidate.get_energy_per_site(),<sp/>std::log10(candidate.get_variance()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(idx<sp/>==<sp/>max_overlap_idx)<sp/>msg.append(&quot;<sp/><sp/><sp/>&lt;---<sp/>max<sp/>overlap&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;trace(msg);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;candidate_max_overlap<sp/>=<sp/>*std::next(candidate_list.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_overlap_idx.value()));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_max_overlap.set_variance(<ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(candidate_max_overlap.get_tensor(),<sp/>tensors));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;ceres_subspace_optimization:<sp/>Candidate<sp/>{:&lt;2}<sp/>has<sp/>highest<sp/>overlap<sp/>{:.16f}<sp/>|<sp/>energy<sp/>{:&gt;20.16f}<sp/>|<sp/>variance<sp/>{:&gt;20.16f}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_overlap_idx.value(),<sp/>candidate_max_overlap.get_overlap(),<sp/>candidate_max_overlap.get_energy_per_site(),</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::log10(candidate_max_overlap.get_variance()));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(candidate_max_overlap.get_overlap()<sp/>&lt;<sp/>0.1)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;ceres_subspace_optimization:<sp/>Overlap<sp/>fell<sp/>below<sp/>&lt;<sp/>0.1:<sp/>{:20.16f}&quot;</highlight><highlight class="normal">,<sp/>candidate_max_overlap.get_overlap());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidate_max_overlap;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(OB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;ceres_subspace_optimization:<sp/>No<sp/>overlapping<sp/>states<sp/>in<sp/>energy<sp/>range.<sp/>Returning<sp/>old<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial_mps;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Step<sp/>1)<sp/><sp/>(Variance<sp/>mode)<sp/>Filter<sp/>the<sp/>candidates</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a50bd5949cea2e7f9e92ce2bbdac33489" kindref="member">internal::subspace::filter_candidates</ref>(candidate_list,<sp/><ref refid="namespacesettings_1_1precision_1a9d89b844f40c612f7f37d7f0b873382c" kindref="member">settings::precision::min_subspace_error</ref>,<sp/><ref refid="namespacesettings_1_1precision_1a72da16b9c3544efbd5c7e4ca392a8beb" kindref="member">settings::precision::max_subspace_size</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Step<sp/>2)<sp/>(Variance<sp/>mode)</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>H²<sp/>as<sp/>a<sp/>matrix<sp/>(expensive<sp/>operation!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>make<sp/>sure<sp/>you<sp/>do<sp/>this<sp/>before<sp/>prepending<sp/>the<sp/>current<sp/>state.<sp/>All<sp/>candidates<sp/>here<sp/>should<sp/>be<sp/>basis<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1precision_1af241365d45c25fd1f464b664f358e982" kindref="member">settings::precision::use_reduced_energy</ref><sp/>and<sp/><ref refid="namespacesettings_1_1precision_1aa5ebd91f50eca5c78963dd710966a417" kindref="member">settings::precision::use_shifted_mpo</ref><sp/>and<sp/>not<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.is_compressed_mpo_squared())</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_shift<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a3eb1010e369f97c5e1cb53c1b04009dc" kindref="member">tools::finite::measure::energy_minus_energy_reduced</ref>(tensors);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>H2_subspace<sp/>=<sp/>internal::get_multisite_hamiltonian_squared_subspace_matrix&lt;Scalar&gt;(<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>edges,<sp/>candidate_list,<sp/>std::pow(energy_shift,2));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optType<sp/>==<sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>)<sp/>H2_subspace<sp/>=<sp/>H2_subspace.real();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>best<sp/>candidates<sp/>and<sp/>compute<sp/>their<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>candidate_list_top_idx<sp/>=</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a2e53f7c84de26f2a80504bbd755515a7" kindref="member">internal::subspace::get_idx_to_candidates_with_highest_overlap</ref>(candidate_list,<sp/>5,<sp/>status.<ref refid="classclass__algorithm__status_1a50ec138a23ad7ecc2d370487f94cad4f" kindref="member">energy_llim_per_site</ref>,<sp/>status.<ref refid="classclass__algorithm__status_1aa35aa4b05938ef80c45509eefde7a37a" kindref="member">energy_ulim_per_site</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>:<sp/>candidate_list_top_idx)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;candidate<sp/>=<sp/>*std::next(candidate_list.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate.set_variance(<ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(candidate.get_tensor(),<sp/>tensors));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>the<sp/>eigenvalues<sp/>in<sp/>a<sp/>convenient<sp/>format<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eigvals<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a2e8cd1f1f763714618c2e425dc6d31cf" kindref="member">internal::subspace::get_eigvals</ref>(candidate_list);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>candidates<sp/>with<sp/>significant<sp/>overlap<sp/>should<sp/>be<sp/>considered<sp/>as<sp/>initial<sp/>guesses,<sp/>including<sp/>the<sp/>current<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>append<sp/>it<sp/>here<sp/>to<sp/>the<sp/>list<sp/>of<sp/>candidates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>candidate_list.emplace_back(initial_mps);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>candidate_list_top_idx.emplace_back(candidate_list.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>with<sp/>{}<sp/>initial<sp/>guesses&quot;</highlight><highlight class="normal">,<sp/>candidate_list_top_idx.size());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;opt_mps&gt;<sp/>optimized_results;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>:<sp/>candidate_list_top_idx)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;candidate<sp/>=<sp/>*std::next(candidate_list.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Starting<sp/>LBFGS<sp/>with<sp/>candidate<sp/>{:&lt;2}<sp/>as<sp/>initial<sp/>guess:<sp/>overlap<sp/>{:.16f}<sp/>|<sp/>energy<sp/>{:&gt;20.16f}<sp/>|<sp/>variance:<sp/>{:&gt;20.16f}<sp/>|<sp/>eigvec<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate.get_overlap(),<sp/>candidate.get_energy_per_site(),<sp/>std::log10(candidate.get_variance()),<sp/>candidate.is_basis_vector);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a3d687316eb37f14cb8e3735c418f9cd0" kindref="member">internal::subspace::get_vector_in_subspace</ref>(candidate_list,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_size<sp/><sp/><sp/>=<sp/>subspace_vector.size();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">internal::reports::bfgs_add_entry</ref>(</highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal">,<sp/>candidate,<sp/>subspace_size);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/><ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">spdlog::level::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>using<sp/>explicit<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>initial_vector_sbsp<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1a3d687316eb37f14cb8e3735c418f9cd0" kindref="member">internal::subspace::get_vector_in_subspace</ref>(candidate_list,<sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_sbsp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(subspace_vector.dot(initial_vector_sbsp));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>Hv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eigvals.asDiagonal()<sp/>*<sp/>subspace_vector;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>H2v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>H2_subspace.template<sp/>selfadjointView&lt;Eigen::Upper&gt;()<sp/>*<sp/>subspace_vector;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vHv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.dot(Hv);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vH2v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.dot(H2v);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>subspace_vector.squaredNorm();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ene<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vHv<sp/>/<sp/>vv;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vH2v<sp/>/<sp/>vv<sp/>-<sp/>ene<sp/>*<sp/>ene;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ene_init_san<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(ene<sp/>+<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_energy_reduced())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state.get_length());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_init_san<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(var)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state.get_length());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{:&lt;8}<sp/>{:&lt;16}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/>candidate.get_name(),<sp/></highlight><highlight class="stringliteral">&quot;matrix<sp/>check&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">internal::reports::bfgs_add_entry</ref>(description,<sp/>subspace_vector.size(),<sp/>subspace_size,<sp/>ene_init_san,<sp/>var_init_san,<sp/>overlap_sbsp,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector.norm(),<sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;get_last_interval());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>current<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a5b736602a2b5e99a9c7244c5b2cf071e" kindref="member">Eigen::VectorXcd</ref><sp/>theta_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af5f97012fc6ab8ad0a495a9fc407ce40" kindref="member">internal::subspace::get_vector_in_fullspace</ref>(candidate_list,<sp/>subspace_vector);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_0_tensor<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(theta_0,<sp/>state.active_dimensions());</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8145a38b82bae9aa25597372b688670e" kindref="member">tools::finite::measure::energy_per_site</ref>(theta_0_tensor,<sp/>tensors);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_0<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(theta_0_tensor,<sp/>tensors);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap_0<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>().dot(theta_0));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{:&lt;8}<sp/>{:&lt;16}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/>candidate.get_name(),<sp/></highlight><highlight class="stringliteral">&quot;fullspace<sp/>check&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">internal::reports::bfgs_add_entry</ref>(description,<sp/>theta_0.size(),<sp/>subspace_size,<sp/>energy_0,<sp/>variance_0,<sp/>overlap_0,<sp/>theta_0.norm(),</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;double&gt;::quiet_NaN(),</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;get_last_interval());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Start<sp/>the<sp/>LBFGS<sp/>optimization<sp/>process<sp/>for<sp/>the<sp/>subspace</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1af98ed8738849042e8bd79a77c8a783db" kindref="member">internal::ceres_default_options</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>summary<sp/>=<sp/>ceres::GradientProblemSolver::Summary();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_results.emplace_back(<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref>());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;optimized_mps<sp/>=<sp/>optimized_results.back();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_name(candidate.get_name());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_sites(candidate.get_sites());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_length(candidate.get_length());</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_energy_reduced(candidate.get_energy_reduced());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_bfgs<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_bfgs&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/>subspace_vector_cast<sp/>=</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(subspace_vector.data()),<sp/>2<sp/>*<sp/>subspace_vector.size());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;std::complex&lt;double&gt;</ref>&gt;(tensors,<sp/>status,<sp/>H2_subspace,<sp/>eigvals);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_custom_log_callback" kindref="compound">CustomLogCallback</ref><sp/>ceres_logger(*functor);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.callbacks.emplace_back(&amp;ceres_logger);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS<sp/>subspace<sp/>cplx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>subspace_vector_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector<sp/>=</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::VectorXcd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(subspace_vector_cast.data()),<sp/>subspace_vector_cast.size()<sp/>/<sp/>2).normalized();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>results<sp/>from<sp/>the<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_tensor(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af5f97012fc6ab8ad0a495a9fc407ce40" kindref="member">subspace::get_vector_in_fullspace</ref>(candidate_list,<sp/>subspace_vector),<sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>().dimensions());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_counter(functor-&gt;get_count());</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_H2n;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2v&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nH2n;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_Hn;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vHv&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nHn;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_step&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_step;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a2809124eff04ad302ca62f63f9408f1ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_bfgs<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_bfgs&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a58d991460c038b5dc833ca50d80657e3" kindref="member">Eigen::VectorXd</ref><sp/><sp/><sp/>subspace_vector_cast<sp/>=<sp/>subspace_vector.real();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/>H2_subspace_real<sp/><sp/><sp/><sp/><sp/>=<sp/>H2_subspace.real();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1ceres__subspace__functor" kindref="compound">ceres_subspace_functor&lt;double&gt;</ref>(tensors,<sp/>status,<sp/>H2_subspace_real,<sp/>eigvals);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internal_1_1_custom_log_callback" kindref="compound">CustomLogCallback</ref><sp/>ceres_logger(*functor);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.callbacks.emplace_back(&amp;ceres_logger);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::GradientProblem<sp/>problem(functor);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS<sp/>subspace<sp/>real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ceres::Solve(options,<sp/>problem,<sp/>subspace_vector_cast.data(),<sp/>&amp;summary);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subspace_vector<sp/>=<sp/>subspace_vector_cast.normalized().cast&lt;<ref refid="namespacetools_1_1finite_1_1opt_1a0ea0d5df283a6c0c2e2bee91ca0f9414" kindref="member">Scalar</ref>&gt;();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_tensor(<ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1subspace_1af5f97012fc6ab8ad0a495a9fc407ce40" kindref="member">subspace::get_vector_in_fullspace</ref>(candidate_list,<sp/>subspace_vector),<sp/>initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a4b995f1b2e0792ee57348cd3b641b84c" kindref="member">get_tensor</ref>().dimensions());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_counter(functor-&gt;get_count());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_H2n;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH2v&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nH2n;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vH&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_Hn;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_vHv&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_nHn;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_step&quot;</highlight><highlight class="normal">]<sp/>+=<sp/>*functor-&gt;t_step;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>and<sp/>set<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>tensor<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.normalize();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_energy(<ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(optimized_mps.get_tensor(),<sp/>tensors));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_variance(<ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(optimized_mps.get_tensor(),<sp/>tensors));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_overlap(std::abs(initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>().dot(optimized_mps.get_vector())));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_iter(summary.iterations.size());</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_time(summary.total_time_in_seconds);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps.set_overlap(std::abs(initial_mps.<ref refid="classtools_1_1finite_1_1opt_1_1opt__mps_1a54016759c9205e1e0c157fc62ca56399" kindref="member">get_vector</ref>().dot(optimized_mps.get_vector())));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>Ceres<sp/>results<sp/>are<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_check<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8ae7478d97212560ade16da80c5284ea" kindref="member">tools::finite::measure::energy</ref>(optimized_mps.get_tensor(),<sp/>tensors);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_check<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a8a96f8adaa39895086a3feae2a0e5b47" kindref="member">tools::finite::measure::energy_variance</ref>(optimized_mps.get_tensor(),<sp/>tensors);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(1.0<sp/>-<sp/>std::abs(optimized_mps.get_energy()<sp/>/<sp/>energy_check))<sp/>&gt;<sp/>1e-3)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Energy<sp/>mismatch:<sp/>Ceres:<sp/>{:.16f}<sp/>|<sp/>DMRG<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>optimized_mps.get_energy(),<sp/>energy_check);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(1.0<sp/>-<sp/>std::abs(optimized_mps.get_variance()<sp/>/<sp/>variance_check))<sp/>&gt;<sp/>1e-3)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Variance<sp/>mismatch:<sp/>Ceres:<sp/>{:.16f}<sp/>|<sp/>DMRG<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>std::log10(optimized_mps.get_variance()),<sp/>std::log10(variance_check));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a235e00e178ffd59357cb44bae00dabba" kindref="member">reports::time_add_sub_entry</ref>();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>hrs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(summary.total_time_in_seconds<sp/>/<sp/>3600);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::fmod(summary.total_time_in_seconds,<sp/>3600)<sp/>/<sp/>60);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec<sp/>=<sp/>std::fmod(std::fmod(summary.total_time_in_seconds,<sp/>3600),<sp/>60);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>LBFGS<sp/>in<sp/>{:0&lt;2}:{:0&lt;2}:{:0&lt;.1f}<sp/>seconds<sp/>and<sp/>{}<sp/>iters.<sp/>Exit<sp/>status:<sp/>{}.<sp/>Message:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hrs,<sp/>min,<sp/>sec,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>summary.iterations.size(),<sp/>ceres::TerminationTypeToString(summary.termination_type),<sp/>summary.message.c_str());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>summary.FullReport()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/><ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">spdlog::level::debug</ref>)<sp/>{<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1_1reports_1a191cf14de2384dccf35578f8fbd73e5f" kindref="member">reports::bfgs_add_entry</ref>(</highlight><highlight class="stringliteral">&quot;Subspace&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;opt&quot;</highlight><highlight class="normal">,<sp/>optimized_mps,<sp/>subspace_size);<sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optSpace<sp/>==<sp/><ref refid="config_2enums_8h_1acadb01aad139a240f01ce7faf6d38fababedda1fc613021aa4f8fe7a4c5f6fbd7" kindref="member">OptSpace::SUBSPACE_AND_DIRECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;SUBSPACE<sp/>optimization<sp/>done.<sp/>Starting<sp/>fine<sp/>tuning<sp/>with<sp/>DIRECT<sp/>optimization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt_sub.toc();<sp/></highlight><highlight class="comment">//<sp/>Suspend<sp/>subspace<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_mps<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1aad84fb8b220c9101812aa07c8ce70544" kindref="member">ceres_direct_optimization</ref>(tensors,<sp/>optimized_mps,<sp/>status,<sp/>optType,<sp/>optMode,<sp/>optSpace);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_opt_sub.tic();<sp/></highlight><highlight class="comment">//<sp/>Resume<sp/>subspace<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate_count++;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>thetas<sp/>in<sp/>ascending<sp/>order<sp/>in<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(optimized_results.begin(),<sp/>optimized_results.end(),</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/>&amp;lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtools_1_1finite_1_1opt_1_1opt__mps" kindref="compound">opt_mps</ref><sp/>&amp;rhs)<sp/>{<sp/>return<sp/>lhs.get_variance()<sp/>&lt;<sp/>rhs.get_variance();<sp/>});</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>best<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optimized_results.front();</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace.cpp"/>
  </compounddef>
</doxygen>
