<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="subspace_8cpp" kind="file" language="C++">
    <compoundname>subspace.cpp</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">iostream</includes>
    <includes refid="class__simulation__status_8h" local="no">simulation/class_simulation_status.h</includes>
    <includes refid="class__eigsolver_8h" local="no">math/class_eigsolver.h</includes>
    <includes refid="matrix__product__stl_8h" local="no">math/arpack_extra/matrix_product_stl.h</includes>
    <includes refid="matrix__product__sparse_8h" local="no">math/arpack_extra/matrix_product_sparse.h</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes refid="opt_8h" local="no">state/tools/finite/opt.h</includes>
    <includes refid="class__finite__state_8h" local="no">state/class_finite_state.h</includes>
    <includes local="no">LBFGS.h</includes>
    <includes refid="nmspc__settings_8h" local="no">simulation/nmspc_settings.h</includes>
    <includes refid="nmspc__random__numbers_8h" local="no">general/nmspc_random_numbers.h</includes>
    <includes local="no">spdlog/fmt/bundled/ranges.h</includes>
    <incdepgraph>
      <node id="2909">
        <label>Eigen/SparseLU</label>
      </node>
      <node id="2931">
        <label>general/nmspc_random_numbers.h</label>
        <link refid="nmspc__random__numbers_8h"/>
        <childnode refid="2932" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
      </node>
      <node id="2904">
        <label>iomanip</label>
      </node>
      <node id="2906">
        <label>Eigen/LU</label>
      </node>
      <node id="2915">
        <label>iterator</label>
      </node>
      <node id="2922">
        <label>glog/logging.h</label>
      </node>
      <node id="2920">
        <label>LBFGS.h</label>
      </node>
      <node id="2921">
        <label>ceres/ceres.h</label>
      </node>
      <node id="2916">
        <label>general/nmspc_type_check.h</label>
        <link refid="nmspc__type__check_8h"/>
        <childnode refid="2917" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2914" relation="include">
        </childnode>
      </node>
      <node id="2884">
        <label>Eigen/Core</label>
      </node>
      <node id="2888">
        <label>string</label>
      </node>
      <node id="2892">
        <label>hdf5_hl.h</label>
      </node>
      <node id="2895">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="2896" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
      </node>
      <node id="2918">
        <label>io/nmspc_logger.h</label>
        <link refid="nmspc__logger_8h"/>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2900" relation="include">
        </childnode>
        <childnode refid="2919" relation="include">
        </childnode>
      </node>
      <node id="2898">
        <label>map</label>
      </node>
      <node id="2886">
        <label>simulation/class_simulation_status.h</label>
        <link refid="class__simulation__status_8h"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
        <childnode refid="2890" relation="include">
        </childnode>
        <childnode refid="2891" relation="include">
        </childnode>
        <childnode refid="2892" relation="include">
        </childnode>
      </node>
      <node id="2917">
        <label>experimental/type_traits</label>
      </node>
      <node id="2930">
        <label>unordered_set</label>
      </node>
      <node id="2914">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="2894">
        <label>math/arpack_extra/arpackpp_solver.h</label>
        <link refid="arpackpp__solver_8h"/>
        <childnode refid="2889" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
      </node>
      <node id="2903">
        <label>matrix_product_dense.h</label>
        <link refid="matrix__product__dense_8h"/>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2905" relation="include">
        </childnode>
        <childnode refid="2906" relation="include">
        </childnode>
      </node>
      <node id="2925">
        <label>state/class_environment.h</label>
        <link refid="class__environment_8h"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2913" relation="include">
        </childnode>
        <childnode refid="2926" relation="include">
        </childnode>
      </node>
      <node id="2933">
        <label>spdlog/fmt/bundled/ranges.h</label>
      </node>
      <node id="2928">
        <label>model/class_model_base.h</label>
        <link refid="class__model__base_8h"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2914" relation="include">
        </childnode>
        <childnode refid="2918" relation="include">
        </childnode>
      </node>
      <node id="2901">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="2908">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2932">
        <label>random</label>
      </node>
      <node id="2910">
        <label>math/arpack_extra/matrix_product_stl.h</label>
        <link refid="matrix__product__stl_8h"/>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
      </node>
      <node id="2923">
        <label>state/class_finite_state.h</label>
        <link refid="class__finite__state_8h"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2924" relation="include">
        </childnode>
        <childnode refid="2913" relation="include">
        </childnode>
        <childnode refid="2925" relation="include">
        </childnode>
        <childnode refid="2927" relation="include">
        </childnode>
        <childnode refid="2928" relation="include">
        </childnode>
      </node>
      <node id="2924">
        <label>optional</label>
      </node>
      <node id="2889">
        <label>vector</label>
      </node>
      <node id="2926">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="2905">
        <label>complex.h</label>
      </node>
      <node id="2900">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="2890">
        <label>array</label>
      </node>
      <node id="2907">
        <label>matrix_product_sparse.h</label>
        <link refid="matrix__product__sparse_8h"/>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2908" relation="include">
        </childnode>
        <childnode refid="2909" relation="include">
        </childnode>
      </node>
      <node id="2891">
        <label>hdf5.h</label>
      </node>
      <node id="2902">
        <label>math/arpack_extra/matrix_recast.h</label>
        <link refid="matrix__recast_8h"/>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
        <childnode refid="2903" relation="include">
        </childnode>
        <childnode refid="2907" relation="include">
        </childnode>
      </node>
      <node id="2883">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp</label>
        <link refid="subspace_8cpp"/>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2886" relation="include">
        </childnode>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2910" relation="include">
        </childnode>
        <childnode refid="2907" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2911" relation="include">
        </childnode>
        <childnode refid="2923" relation="include">
        </childnode>
        <childnode refid="2920" relation="include">
        </childnode>
        <childnode refid="2929" relation="include">
        </childnode>
        <childnode refid="2931" relation="include">
        </childnode>
        <childnode refid="2933" relation="include">
        </childnode>
      </node>
      <node id="2885">
        <label>iostream</label>
      </node>
      <node id="2897">
        <label>math/nmspc_eigutils.h</label>
        <link refid="nmspc__eigutils_8h"/>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2890" relation="include">
        </childnode>
        <childnode refid="2898" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
        <childnode refid="2900" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
      </node>
      <node id="2896">
        <label>chrono</label>
      </node>
      <node id="2893">
        <label>math/class_eigsolver.h</label>
        <link refid="class__eigsolver_8h"/>
        <childnode refid="2894" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
      </node>
      <node id="2911">
        <label>state/tools/finite/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="2912" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
        <childnode refid="2920" relation="include">
        </childnode>
        <childnode refid="2921" relation="include">
        </childnode>
        <childnode refid="2922" relation="include">
        </childnode>
      </node>
      <node id="2899">
        <label>complex</label>
      </node>
      <node id="2929">
        <label>simulation/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2930" relation="include">
        </childnode>
        <childnode refid="2889" relation="include">
        </childnode>
      </node>
      <node id="2913">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2908" relation="include">
        </childnode>
        <childnode refid="2914" relation="include">
        </childnode>
        <childnode refid="2915" relation="include">
        </childnode>
        <childnode refid="2885" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
        <childnode refid="2916" relation="include">
        </childnode>
      </node>
      <node id="2912">
        <label>state/tools/nmspc_tools.h</label>
        <link refid="nmspc__tools_8h"/>
        <childnode refid="2887" relation="include">
        </childnode>
        <childnode refid="2888" relation="include">
        </childnode>
        <childnode refid="2913" relation="include">
        </childnode>
        <childnode refid="2918" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
      </node>
      <node id="2919">
        <label>spdlog/sinks/stdout_sinks.h</label>
      </node>
      <node id="2887">
        <label>memory</label>
      </node>
      <node id="2927">
        <label>state/class_vidal_site.h</label>
        <link refid="class__vidal__site_8h"/>
        <childnode refid="2913" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" prot="public" static="no">
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using MatrixType =  Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" line="21" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="subspace_8cpp_1aaf5a344ce5946e00196d6e086f10e126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idx_best_overlap_in_window</definition>
        <argsstring>(const Eigen::VectorXd &amp;overlaps, const Eigen::VectorXd &amp;eigvals, double lbound, double ubound)</argsstring>
        <name>idx_best_overlap_in_window</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>overlaps</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>eigvals</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lbound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ubound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" line="44" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" bodystart="44" bodyend="57"/>
        <references refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" compoundref="nmspc__tensor__extra_8h" startline="40" endline="43">Textra::idx</references>
      </memberdef>
      <memberdef kind="function" id="subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_full</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log)</argsstring>
        <name>find_subspace_full</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a1b1e34bbc7b531b1addad1633519ebe0" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" line="61" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" bodystart="61" bodyend="99"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" compoundref="opt_8h" startline="74">tools::finite::opt::internals::t_eig</references>
        <references refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" compoundref="class__eigsolver_8h" startline="242" endline="247">class_eigsolver::eig</references>
        <references refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1">tools::finite::opt::CPLX</references>
        <references refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" compoundref="class__eigsolver_8h" startline="28">class_eigsolver::solution</references>
        <references refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" compoundref="nmspc__eigutils_8h" startline="163" endline="167">eigutils::eigSolution::get_eigvals</references>
        <references refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1">eigutils::eigSolution::meta</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" compoundref="nmspc__eigutils_8h" startline="172">eigutils::eigSolution::Meta::cols</references>
        <references refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" compoundref="nmspc__eigutils_8h" startline="135" endline="147">eigutils::eigSolution::get_eigvecs</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" compoundref="nmspc__eigutils_8h" startline="171">eigutils::eigSolution::Meta::rows</references>
        <references refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554">tools::finite::opt::REAL</references>
        <references refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" compoundref="views_8cpp" startline="22">tools::common::views::theta</references>
        <references refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" compoundref="nmspc__tensor__extra_8h" startline="40" endline="43">Textra::idx</references>
      </memberdef>
      <memberdef kind="function" id="subspace_8cpp_1a5268d3d46c4c78f31ae841f8d48cb6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace_part</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;H_local, Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;theta, double energy_target, std::vector&lt; reports::eig_tuple &gt; &amp;eig_log)</argsstring>
        <name>find_subspace_part</name>
        <param>
          <type>const <ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>H_local</declname>
        </param>
        <param>
          <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>energy_target</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a1b1e34bbc7b531b1addad1633519ebe0" kindref="member">reports::eig_tuple</ref> &gt; &amp;</type>
          <declname>eig_log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" line="105" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" bodystart="105" bodyend="154"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" compoundref="opt_8h" startline="74">tools::finite::opt::internals::t_eig</references>
        <references refid="class_stl_matrix_product_1a9e4bb7514f7e50cef962ce232cf3728d" compoundref="matrix__product__stl_8h" startline="70" endline="70">StlMatrixProduct&lt; Scalar_ &gt;::set_shift</references>
        <references refid="namespacesettings_1_1precision_1a8144c8c79b510717f340fff464e9a493" compoundref="nmspc__settings_8h" startline="74">settings::precision::VarConvergenceThreshold</references>
        <references refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" compoundref="views_8cpp" startline="22">tools::common::views::theta</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" compoundref="subspace_8cpp" startline="24" endline="42">tools::finite::opt::internals::generate_size_list</references>
        <references refid="classclass__eigsolver_1aa09d98b6edc6986cf4e905cf2527165f" compoundref="class__eigsolver_8h" startline="504" endline="524">class_eigsolver::eigs_stl</references>
        <references refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" compoundref="class__eigsolver_8h" startline="28">class_eigsolver::solution</references>
        <references refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" compoundref="nmspc__eigutils_8h" startline="163" endline="167">eigutils::eigSolution::get_eigvals</references>
        <references refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1">eigutils::eigSolution::meta</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" compoundref="nmspc__eigutils_8h" startline="172">eigutils::eigSolution::Meta::cols</references>
        <references refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" compoundref="nmspc__eigutils_8h" startline="135" endline="147">eigutils::eigSolution::get_eigvecs</references>
        <references refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1">tools::finite::opt::CPLX</references>
        <references refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" compoundref="nmspc__eigutils_8h" startline="171">eigutils::eigSolution::Meta::rows</references>
        <references refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554">tools::finite::opt::REAL</references>
      </memberdef>
      <memberdef kind="function" id="subspace_8cpp_1a92ac2c358f51111da508970000745bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::MatrixXcd, Eigen::VectorXd &gt;</type>
        <definition>std::tuple&lt;Eigen::MatrixXcd, Eigen::VectorXd&gt; find_subspace</definition>
        <argsstring>(const class_finite_state &amp;state)</argsstring>
        <name>find_subspace</name>
        <param>
          <type>const <ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" line="162" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp" bodystart="162" bodyend="207"/>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" compoundref="opt_8h" startline="75">tools::finite::opt::internals::t_ham</references>
        <references refid="classclass__finite__state_1a8162c186a6ec437592458298bfa2a105" compoundref="class__finite__state_8cpp" startline="334" endline="338">class_finite_state::get_multi_hamiltonian_matrix</references>
        <references refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" compoundref="views_8cpp" startline="22">tools::common::views::theta</references>
        <references refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" compoundref="class__finite__state_8cpp" startline="248" endline="268">class_finite_state::get_multitheta</references>
        <references refid="namespacetools_1_1finite_1_1measure_1_1multisite_1ad9a7cbe28a97e920a0a9a2a548d219c2" compoundref="multisite_8cpp" startline="61" endline="76">tools::finite::measure::multisite::energy</references>
        <references refid="namespacesettings_1_1precision_1a8161050773e553d9b1e4e416a0289508" compoundref="nmspc__settings_8h" startline="77">settings::precision::MaxSizeFullDiag</references>
        <references refid="subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" compoundref="subspace_8cpp" startline="61" endline="99">find_subspace_full</references>
        <references refid="subspace_8cpp_1a5268d3d46c4c78f31ae841f8d48cb6cb" compoundref="subspace_8cpp" startline="105" endline="154">find_subspace_part</references>
        <references refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a377466fe1d96e2eb2e2f9a4399cdfcb0" compoundref="report_8cpp" startline="7" endline="35">tools::finite::opt::internals::reports::print_report</references>
        <references refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" compoundref="nmspc__tensor__extra_8h" startline="299" endline="318">Textra::subtract_phase</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-03-18.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__simulation__status_8h" kindref="compound">simulation/class_simulation_status.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__eigsolver_8h" kindref="compound">math/class_eigsolver.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix__product__stl_8h" kindref="compound">math/arpack_extra/matrix_product_stl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix__product__sparse_8h" kindref="compound">math/arpack_extra/matrix_product_sparse.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt_8h" kindref="compound">state/tools/finite/opt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__finite__state_8h" kindref="compound">state/class_finite_state.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;LBFGS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">simulation/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__random__numbers_8h" kindref="compound">general/nmspc_random_numbers.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/fmt/bundled/ranges.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt" kindref="compound">tools::finite::opt</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals" kindref="compound">tools::finite::opt::internals</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="subspace_8cpp_1ad2b5009a90244fe4592ad8fed4ef9d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType</ref><sp/>=<sp/>Eigen::Matrix&lt;T,Eigen::Dynamic,Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" kindref="member">tools::finite::opt::internals::generate_size_list</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>shape){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_nev<sp/>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(shape<sp/>&lt;=<sp/>512)<sp/><sp/>{max_nev<sp/>=<sp/>shape/4;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>512<sp/><sp/>and<sp/>shape<sp/>&lt;=<sp/>1024)<sp/>{max_nev<sp/>=<sp/>128;}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>1024<sp/>and<sp/>shape<sp/>&lt;=<sp/>2048)<sp/>{max_nev<sp/>=<sp/>64;}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>2048<sp/>and<sp/>shape<sp/>&lt;=<sp/>4096)<sp/>{max_nev<sp/>=<sp/>32;}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&gt;<sp/>4096<sp/>and<sp/>shape<sp/>&lt;=<sp/>8192)<sp/>{max_nev<sp/>=<sp/>16;}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{max_nev<sp/>=<sp/>8;}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_nev<sp/>=<sp/>std::min(std::min(8,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)shape),max_nev);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nev_list<sp/>=<sp/>{min_nev};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_nev<sp/>=<sp/>min_nev;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp_nev<sp/>&lt;<sp/>max_nev){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_nev<sp/>=<sp/>std::min(4*tmp_nev,<sp/>max_nev);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nev_list.push_back(tmp_nev);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nev_list;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="subspace_8cpp_1aaf5a344ce5946e00196d6e086f10e126" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="subspace_8cpp_1aaf5a344ce5946e00196d6e086f10e126" kindref="member">idx_best_overlap_in_window</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;overlaps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>eigvals,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbound,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubound){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(overlaps.size()<sp/>==<sp/>eigvals.size()<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;idx_best_overlap_in_window:<sp/>Mismatch<sp/>in<sp/>overlaps<sp/>and<sp/>eigvals<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps_in_window<sp/>=<sp/>overlaps;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>overlaps.size();<sp/>i++){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eigvals(i)<sp/>&gt;<sp/>ubound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eigvals(i)<sp/>&lt;<sp/>lbound)<sp/>overlaps_in_window(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlaps_in_window.isZero(0.0)){overlaps_in_window<sp/>=<sp/>overlaps;}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/>=<sp/>overlaps_in_window.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="61" refid="subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" refkind="member"><highlight class="normal"><ref refid="subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/><sp/>eigvecs;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(!std::is_same&lt;Scalar,<sp/>double&gt;::value)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa2280aa087a50f16d16ea30f11d1a7d3" kindref="member">eig</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;(H_local,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,<sp/>solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>eigensolver<sp/>--<sp/>condition:<sp/>Full<sp/>diagonalization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff(&amp;idx);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nev<sp/>=<sp/>eigvecs.cols();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_quality),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="105" refid="subspace_8cpp_1a5268d3d46c4c78f31ae841f8d48cb6cb" refkind="member"><highlight class="normal"><ref refid="subspace_8cpp_1a5268d3d46c4c78f31ae841f8d48cb6cb" kindref="member">find_subspace_part</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>&amp;<sp/>H_local,<sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,3&gt;<sp/>&amp;<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target,<sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>&amp;eig_log){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace<sp/>--<sp/>partial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>StlMatrixProduct,<sp/>because<sp/>the<sp/>PartialPivLU<sp/>will<sp/>overwrite<sp/>the<sp/>data<sp/>in<sp/>H_local<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_stl_matrix_product" kindref="compound">StlMatrixProduct&lt;Scalar&gt;</ref><sp/>hamiltonian(H_local.data(),H_local.rows(),Form::SYMMETRIC,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.<ref refid="class_stl_matrix_product_1a9e4bb7514f7e50cef962ce232cf3728d" kindref="member">set_shift</ref>(energy_target);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>hamiltonian.FactorOP();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_lu<sp/>=<sp/>hamiltonian.t_factorOp.get_last_time_interval();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prec<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacesettings_1_1precision_1a8144c8c79b510717f340fff464e9a493" kindref="member">settings::precision::VarConvergenceThreshold</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap_threshold<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>-<sp/>prec;<sp/></highlight><highlight class="comment">//1.0/std::sqrt(2);<sp/>//Slightly<sp/>less<sp/>than<sp/>1/sqrt(2),<sp/>in<sp/>case<sp/>that<sp/>the<sp/>choice<sp/>is<sp/>between<sp/>cat<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality_threshold<sp/>=<sp/>prec;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__eigsolver" kindref="compound">class_eigsolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;exhausted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/>theta_vec<sp/><sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nev<sp/>:<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a4d15c2b7a280aba9221f4c4d006872c4" kindref="member">generate_size_list</ref>(<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size())){</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classclass__eigsolver_1aa09d98b6edc6986cf4e905cf2527165f" kindref="member">eigs_stl</ref>(hamiltonian,nev,-1,<sp/>energy_target,Form::SYMMETRIC,Ritz::LM,Side::R,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXd<sp/>&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a94af0d5b1e644b383d2c254fbbc1b15c" kindref="member">get_eigvals</ref>&lt;Form::SYMMETRIC&gt;().data()<sp/><sp/><sp/><sp/><sp/><sp/>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;std::complex&lt;double&gt;,<sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>&gt;::value){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXcd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">Type::CPLX</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::MatrixXd&gt;<sp/>(solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1a9eea0b54a902215967a612a761f5e0a2" kindref="member">get_eigvecs</ref>&lt;<ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">Type::REAL</ref>,<sp/>Form::SYMMETRIC&gt;().data(),solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1af52b4d369e2557402f9dcc3bc5fbd448" kindref="member">rows</ref>,solver.<ref refid="classclass__eigsolver_1a7718d4fdd0cb874caa750043c1b55fa2" kindref="member">solution</ref>.<ref refid="classeigutils_1_1eig_solution_1af9690f3e16cb30fd70d88e50c52121b1" kindref="member">meta</ref>.<ref refid="structeigutils_1_1eig_solution_1_1_meta_1a476004608edc4da74ec138898d6ceddd" kindref="member">cols</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_vec.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.maxCoeff();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_overlap<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>overlaps.minCoeff();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eig_log.emplace_back(nev,<sp/>max_overlap,<sp/>min_overlap,<sp/>sq_sum_overlap,<sp/>std::log10(subspace_quality),<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aa9deb22061716db29d06214ea8e191f2" kindref="member">t_eig</ref>-&gt;get_last_time_interval(),<sp/>t_lu);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_lu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/><sp/><sp/><sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-10)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;max_overlap<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>+<sp/>std::to_string(max_overlap));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sq_sum_overlap<sp/>&gt;<sp/>1.0<sp/>+<sp/>1e-10)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;eps<sp/>larger<sp/>than<sp/>one<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(sq_sum_overlap));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(min_overlap<sp/><sp/><sp/><sp/>&lt;<sp/>0.0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;min_overlap<sp/>smaller<sp/>than<sp/>zero:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(min_overlap));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_overlap<sp/>&gt;=<sp/>max_overlap_threshold<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;overlap<sp/>is<sp/>good<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_quality<sp/>&lt;<sp/>subspace_quality_threshold)<sp/>{reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;subspace<sp/>quality<sp/>is<sp/>good<sp/>enough&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Finished<sp/>partial<sp/>eigensolver<sp/>--<sp/>condition:<sp/>{}&quot;</highlight><highlight class="normal">,reason);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,eigvals);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">std::tuple&lt;Eigen::MatrixXcd,<sp/>Eigen::VectorXd&gt;</highlight></codeline>
<codeline lineno="162" refid="subspace_8cpp_1a92ac2c358f51111da508970000745bd9" refkind="member"><highlight class="normal"><ref refid="subspace_8cpp_1a92ac2c358f51111da508970000745bd9" kindref="member">find_subspace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref><sp/>&amp;<sp/>state){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finding<sp/>subspace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" kindref="member">t_ham</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matrix__product__stl_8cpp_1ad214610a757107160682e44efc97fbed" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>H_local;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,double&gt;::value){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H_local<sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8162c186a6ec437592458298bfa2a105" kindref="member">get_multi_hamiltonian_matrix</ref>().real();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,std::complex&lt;double&gt;&gt;::value){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H_local<sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8162c186a6ec437592458298bfa2a105" kindref="member">get_multi_hamiltonian_matrix</ref>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>H_local.isApprox(H_local.adjoint(),<sp/>1e-14)){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;H_local<sp/>is<sp/>not<sp/>hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>(H_local<sp/>-<sp/>H_local.adjoint()).cwiseAbs().sum()));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sparcity<sp/>=<sp/>(H_local.array()<sp/>==<sp/>0.0).count()/(double)H_local.size();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;H_local<sp/>sparcity<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>sparcity);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1aebe49a53524360884a88f314649cc474" kindref="member">t_ham</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref><sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::eig_tuple&gt;<sp/>eig_log;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_target<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1multisite_1ad9a7cbe28a97e920a0a9a2a548d219c2" kindref="member">tools::finite::measure::multisite::energy</ref>(state,<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>theta<sp/>is<sp/>small<sp/>enough<sp/>you<sp/>can<sp/>afford<sp/>full<sp/>diag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size()<sp/>&lt;=<sp/><ref refid="namespacesettings_1_1precision_1a8161050773e553d9b1e4e416a0289508" kindref="member">settings::precision::MaxSizeFullDiag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="subspace_8cpp_1a6546510de2db2d289e9658b859918b1e" kindref="member">find_subspace_full</ref>(H_local,<sp/><ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>,<sp/>eig_log);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(eigvecs,<sp/>eigvals)<sp/>=<sp/><ref refid="subspace_8cpp_1a5268d3d46c4c78f31ae841f8d48cb6cb" kindref="member">find_subspace_part</ref>(H_local,<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>,energy_target,eig_log);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a377466fe1d96e2eb2e2f9a4399cdfcb0" kindref="member">reports::print_report</ref>(eig_log);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;Scalar,double&gt;::value){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">Textra::subtract_phase</ref>(eigvecs);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;truncating<sp/>imag<sp/>of<sp/>eigvecs,<sp/>sum:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>eigvecs.imag().cwiseAbs().sum()<sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigvecs<sp/>=<sp/>eigvecs.real();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>eigvecs.colwise().normalize();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(eigvecs,<sp/>eigvals);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">Eigen::Tensor&lt;class_finite_state::Scalar,3&gt;</highlight></codeline>
<codeline lineno="212" refid="namespacetools_1_1finite_1_1opt_1_1internals_1a54d55d18dbbbf7f0258c049658e4858b" refkind="member"><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a54d55d18dbbbf7f0258c049658e4858b" kindref="member">tools::finite::opt::internals::subspace_optimization</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__finite__state" kindref="compound">class_finite_state</ref><sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__simulation__status" kindref="compound">class_simulation_status</ref><sp/>&amp;<sp/>sim_status,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4e" kindref="member">OptType</ref><sp/>optType,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6" kindref="member">OptMode</ref><sp/>optMode){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Optimizing<sp/>in<sp/>SUBSPACE<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__finite__state_1a49d4b1815a40a9fdfacd105696ab56e4" kindref="member">class_finite_state::Scalar</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceeigutils_1_1eig_setting" kindref="compound">eigutils::eigSetting</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>chain_length<sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__finite__state_1ae39835ff5932221d63fa83dc679b1ed7" kindref="member">get_length</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__finite__state_1a8f37806611e917bcf0ba5322044c5949" kindref="member">get_multitheta</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>theta_old<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::VectorXcd&gt;<sp/><sp/>(<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.data(),<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXcd<sp/>eigvecs;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>eigvals;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(optType){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;Scalar&gt;(state);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:<sp/><sp/><sp/><sp/><sp/>std::tie<sp/>(eigvecs,eigvals)<sp/><sp/>=<sp/>find_subspace&lt;double&gt;(state);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>overlaps<sp/>=<sp/>(theta_old.adjoint()<sp/>*<sp/>eigvecs).cwiseAbs().real();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(optMode){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6a8c009c8dd4d4f9dde7515c00d5cd4661" kindref="member">OptMode::OVERLAP</ref>:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>=<sp/><ref refid="subspace_8cpp_1aaf5a344ce5946e00196d6e086f10e126" kindref="member">idx_best_overlap_in_window</ref>(overlaps,eigvals,sim_status.<ref refid="structstatus__data_1a88e3d7f6106d61e25e4e7f10cbcac62b" kindref="member">energy_lbound</ref>,sim_status.<ref refid="structstatus__data_1af9acc1683b59d2fe405745c31550653b" kindref="member">energy_ubound</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(eigvecs.col(idx),<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1afe78a5dc46145a3a7d8f51168226e0f6ace18bb9a2b22515d0cd36bca6b998bde" kindref="member">OptMode::VARIANCE</ref>:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sq_sum_overlap<sp/><sp/><sp/><sp/>=<sp/>overlaps.cwiseAbs2().sum();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>subspace_quality<sp/><sp/>=<sp/>1.0<sp/>-<sp/>sq_sum_overlap;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subspace_quality<sp/>&gt;=<sp/><ref refid="namespacesettings_1_1precision_1a8144c8c79b510717f340fff464e9a493" kindref="member">settings::precision::VarConvergenceThreshold</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Subspace<sp/>quality<sp/>too<sp/>low.<sp/>Switching<sp/>to<sp/>direct<sp/>mode.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1afc4f5fa072ebf99048b4e3b939700b31" kindref="member">direct_optimization</ref>(state,<sp/>sim_status,<sp/>optType);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_new;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_new<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_new,variance_new,<ref refid="namespacetools_1_1finite_1_1measure_1af8a40ef6c20e8ca83cdc5e8c238f9340" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>really<sp/>use<sp/>theta_start<sp/>as<sp/>the<sp/>projection<sp/>towards<sp/>the<sp/>previous<sp/>theta,<sp/>not<sp/>best<sp/>overlapping!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>alpha_i<sp/>=<sp/>&lt;theta_old<sp/>|<sp/>theta_new_i&gt;<sp/>is<sp/>not<sp/>supposed<sp/>to<sp/>be<sp/>squared!<sp/>The<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Between<sp/>theta_start<sp/>and<sp/>theta_old<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_start<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eigvecs.adjoint()<sp/><sp/>*<sp/>theta_old).normalized()<sp/><sp/>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;reports::subspc_opt_tuple&gt;<sp/>opt_log;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_0<sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a81b06529556e68f882c591397b39ef2f" kindref="member">tools::finite::measure::energy_per_site</ref>(state);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance_0<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a0435b2ea12613bfa030adc9dab6c8e52" kindref="member">tools::finite::measure::energy_variance_per_site</ref>(state);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXcd<sp/>theta_0<sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter_0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>overlap_0<sp/>=<sp/>std::abs(theta_old.dot(theta_0));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;Initial&quot;</highlight><highlight class="normal">,<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size(),<sp/>energy_0,<sp/>std::log10(variance_0),<sp/>overlap_0,<sp/>iter_0,0,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;tic();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">LBFGSpp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internals" kindref="compound">tools::finite::opt::internals</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fx;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>niter,counter;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>LBFGSpp::LBFGSSolver&lt;double&gt;<sp/>solver(<ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a874ec8a916fc9382de5e2873bcc70469" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(optType){</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea958448d4909b92010c81d52d3e6ad8f1" kindref="member">OptType::CPLX</ref>:{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1subspace__functor" kindref="compound">tools::finite::opt::internals::subspace_functor &lt;Scalar&gt;</ref><sp/><sp/>functor<sp/>(state,sim_status,eigvecs,eigvals);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start.data()),<sp/>2*theta_start.size());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>niter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>solver.minimize(functor,<sp/>theta_start_cast,<sp/>fx);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>Eigen::Map&lt;Eigen::VectorXcd&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(theta_start_cast.data()),<sp/>theta_start_cast.size()/2).normalized();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor.<ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1base__functor_1ad43c5e4b4bcebfc3a54342698303b59c" kindref="member">get_count</ref>();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor.<ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1base__functor_1adfa14c82de8ef8b7df58442f5ab1bd6d" kindref="member">get_norm</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor.<ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1base__functor_1aa311753c4b3fb64be9ad3a87cff3fca4" kindref="member">get_energy</ref>()<sp/>/<sp/>chain_length;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor.<ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1base__functor_1ae3e9e38c9e198f2d6fd47f3458c4445b" kindref="member">get_variance</ref>()/chain_length;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs<sp/>*<sp/>theta_start.asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1ad30f78663f0e38d32ba7964276f33d4ea8cf125b0e31559ba75a9d9b4f818a554" kindref="member">OptType::REAL</ref>:{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1subspace__functor" kindref="compound">tools::finite::opt::internals::subspace_functor &lt;double&gt;</ref><sp/>functor<sp/>(state,sim_status,eigvecs.real(),eigvals);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/><sp/>theta_start_cast<sp/>=<sp/>theta_start.real();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Running<sp/>LBFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>niter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>solver.minimize(functor,<sp/>theta_start_cast,<sp/>fx);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_start<sp/><sp/>=<sp/>theta_start_cast.normalized().cast&lt;<ref refid="namespacetools_1_1finite_1a88c40d69fb3fa1a7a0e3c7208effa6f6" kindref="member">Scalar</ref>&gt;();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor.<ref refid="classtools_1_1finite_1_1opt_1_1internals_1_1base__functor_1ad43c5e4b4bcebfc3a54342698303b59c" kindref="member">get_count</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>functor.get_norm();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_new<sp/><sp/><sp/>=<sp/>functor.get_energy()<sp/>/<sp/>chain_length;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variance_new<sp/>=<sp/>functor.get_variance()/chain_length;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_new<sp/><sp/><sp/><sp/>=<sp/>(eigvecs.real()<sp/>*<sp/>theta_start.real().asDiagonal()).rowwise().sum().normalized();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;toc();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>overlap_new<sp/>=<sp/>(theta_old.adjoint()<sp/>*<sp/>theta_new).cwiseAbs().sum();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_log.emplace_back(</highlight><highlight class="stringliteral">&quot;LBFGS++&quot;</highlight><highlight class="normal">,<ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>.size(),<sp/>energy_new,<sp/>std::log10(variance_new),<sp/>overlap_new,<sp/>niter,counter,<sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1a1eb4c66a92dba1e18124fc217fad907e" kindref="member">t_opt</ref>-&gt;get_last_time_interval());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Finished<sp/>LBFGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internals_1_1reports_1a377466fe1d96e2eb2e2f9a4399cdfcb0" kindref="member">reports::print_report</ref>(opt_log);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__finite__state_1a8f08867b1dd985e0428620b548443213" kindref="member">unset_measurements</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variance_new<sp/>&lt;<sp/>variance_0){</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>new<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Textra::Matrix_to_Tensor</ref>(theta_new,<sp/>state.<ref refid="classclass__finite__state_1af815d761506be3a8e1aa9845cc41d1b5" kindref="member">active_dimensions</ref>());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Returning<sp/>old<sp/>theta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="namespacetools_1_1common_1_1views_1a456b60de2e6a0cdc1197ac9b30a18a09" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp"/>
  </compounddef>
</doxygen>
