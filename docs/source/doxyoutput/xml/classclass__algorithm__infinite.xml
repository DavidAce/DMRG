<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classclass__algorithm__infinite" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>class_algorithm_infinite</compoundname>
    <basecompoundref refid="classclass__algorithm__base" prot="public" virt="non-virtual">class_algorithm_base</basecompoundref>
    <derivedcompoundref refid="classclass__idmrg" prot="public" virt="non-virtual">class_idmrg</derivedcompoundref>
    <derivedcompoundref refid="classclass__itebd" prot="public" virt="non-virtual">class_itebd</derivedcompoundref>
    <includes refid="class__algorithm__infinite_8h" local="no">class_algorithm_infinite.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classclass__algorithm__infinite_1ae94c13ba920ab9e766ab8c1dd206001a" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__tensors__infinite" kindref="compound">class_tensors_infinite</ref></type>
        <definition>class_tensors_infinite class_algorithm_infinite::tensors</definition>
        <argsstring></argsstring>
        <name>tensors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="17" column="28" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__infinite_1ae453c5a7ba02dc74b473f1a2f20552cd" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; class_algorithm_infinite::var_mpo_iter</definition>
        <argsstring></argsstring>
        <name>var_mpo_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="45" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__infinite_1a1cdf17c99c068a231d0f7804d2d48734" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; class_algorithm_infinite::var_ham_iter</definition>
        <argsstring></argsstring>
        <name>var_ham_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="46" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__infinite_1ad93d7551dc4d3cb8aa08e1de053d4d37" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; class_algorithm_infinite::var_mom_iter</definition>
        <argsstring></argsstring>
        <name>var_mom_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="47" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__infinite_1aa2eef810a05455e20d99ed8053003539" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; class_algorithm_infinite::entropy_iter</definition>
        <argsstring></argsstring>
        <name>entropy_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="48" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classclass__algorithm__infinite_1a0ad18e5b809b20e90df53c67e2421ef2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_infinite::class_algorithm_infinite</definition>
        <argsstring>(std::shared_ptr&lt; h5pp::File &gt; h5ppFile_, AlgorithmType algo_type)</argsstring>
        <name>class_algorithm_infinite</name>
        <param>
          <type>std::shared_ptr&lt; h5pp::File &gt;</type>
          <declname>h5ppFile_</declname>
        </param>
        <param>
          <type><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref></type>
          <declname>algo_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="16" column="14" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1abdf68a4ae64f7302ad9e82a48d468e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_infinite::run_simulation</definition>
        <argsstring>()=0</argsstring>
        <name>run_simulation</name>
        <reimplementedby refid="classclass__itebd_1ab7b54d3b65fa2be0430b0c33ee532231">run_simulation</reimplementedby>
        <reimplementedby refid="classclass__idmrg_1a815e0b3273427131195b2d9bb6925ce4">run_simulation</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="22" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a2cabf133e43683569ef43b9639476dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::run_preprocessing</definition>
        <argsstring>()</argsstring>
        <name>run_preprocessing</name>
        <reimplementedby refid="classclass__itebd_1afeae7d5e3a928ca1ca00b7df472d2345">run_preprocessing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="23" column="18" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1aa7176e26e0dd793557a649fc6c0b75f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::run_postprocessing</definition>
        <argsstring>()</argsstring>
        <name>run_postprocessing</name>
        <reimplementedby refid="classclass__itebd_1a87f7f8c17c034b5d58139174a7982741">run_postprocessing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="24" column="18" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1ae14b72b2eb26ac37f453c24cd2c5a68c" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::run</definition>
        <argsstring>() final</argsstring>
        <name>run</name>
        <reimplements refid="classclass__algorithm__base_1a41b199782e43aeaccf607b8191c3a027">run</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="27" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1acb14ea81ee6e72bc06bd3fbd1627249b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::update_variance_max_digits</definition>
        <argsstring>(std::optional&lt; double &gt; energy=std::nullopt) final</argsstring>
        <name>update_variance_max_digits</name>
        <reimplements refid="classclass__algorithm__base_1a245737c384ff850e145dc0f9f29b70cf">update_variance_max_digits</reimplements>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>energy</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="28" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a93e97af4e20920c9690ff47fe78ddd60" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::update_bond_dimension_limit</definition>
        <argsstring>(std::optional&lt; long &gt; max_bond_dim=std::nullopt) final</argsstring>
        <name>update_bond_dimension_limit</name>
        <reimplements refid="classclass__algorithm__base_1a9a60e6393090895c4960d04b83621c62">update_bond_dimension_limit</reimplements>
        <param>
          <type>std::optional&lt; long &gt;</type>
          <declname>max_bond_dim</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="29" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="64" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a97d87cb8fcb7ddd09913e1cabdcd1394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::randomize_model</definition>
        <argsstring>()</argsstring>
        <name>randomize_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="30" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a2573591517d4f3874fa0ab7c6cbea2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::randomize_state</definition>
        <argsstring>(ResetReason reason, std::optional&lt; std::string &gt; sector=std::nullopt, std::optional&lt; long &gt; bitfield=std::nullopt, std::optional&lt; bool &gt; use_eigenspinors=std::nullopt)</argsstring>
        <name>randomize_state</name>
        <param>
          <type><ref refid="config_2enums_8h_1a06d9333e5541d14a05e83e78d4a07e11" kindref="member">ResetReason</ref></type>
          <declname>reason</declname>
        </param>
        <param>
          <type>std::optional&lt; std::string &gt;</type>
          <declname>sector</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; long &gt;</type>
          <declname>bitfield</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; bool &gt;</type>
          <declname>use_eigenspinors</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="31" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="171" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a2602edae65f1a9bf3b5437c2cdc446de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::clear_convergence_status</definition>
        <argsstring>() override</argsstring>
        <name>clear_convergence_status</name>
        <reimplements refid="classclass__algorithm__base_1a9209394aae1cb1f7a7ef4fe3c41d30b6">clear_convergence_status</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="34" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="192" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a7453802a0486ef742f2cba4b44060526" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::write_to_file</definition>
        <argsstring>(StorageReason storage_reason=StorageReason::CHECKPOINT, std::optional&lt; CopyPolicy &gt; copy_policy=std::nullopt) final</argsstring>
        <name>write_to_file</name>
        <reimplements refid="classclass__algorithm__base_1a505f7dadceb3bfa9f06ff19a5f1ec158">write_to_file</reimplements>
        <param>
          <type><ref refid="config_2enums_8h_1a88f884ec2f6314f2c5abc9eb2438fc01" kindref="member">StorageReason</ref></type>
          <declname>storage_reason</declname>
          <defval><ref refid="config_2enums_8h_1a88f884ec2f6314f2c5abc9eb2438fc01a0f15e1247e93ddfa95c008106eb0d22f" kindref="member">StorageReason::CHECKPOINT</ref></defval>
        </param>
        <param>
          <type>std::optional&lt; <ref refid="config_2enums_8h_1a51a9760605ac8e44f3479429f911dad5" kindref="member">CopyPolicy</ref> &gt;</type>
          <declname>copy_policy</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="35" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="273" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1af232e6d037549f0aae338b402aa9c722" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::print_status_update</definition>
        <argsstring>() final</argsstring>
        <name>print_status_update</name>
        <reimplements refid="classclass__algorithm__base_1a803b366e66ffaef47479278cbdb1a738">print_status_update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="36" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="372" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a993724b938167db865be9b23f291b5d9" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::print_status_full</definition>
        <argsstring>() final</argsstring>
        <name>print_status_full</name>
        <reimplements refid="classclass__algorithm__base_1a96f34d67e881abd4d1ec4dd2d89728ad">print_status_full</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="37" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="426" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a56ef1b5db54adc543de14e45914df2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::check_convergence_variance_mpo</definition>
        <argsstring>(std::optional&lt; double &gt; threshold=std::nullopt, std::optional&lt; double &gt; sensitivity=std::nullopt)</argsstring>
        <name>check_convergence_variance_mpo</name>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>threshold</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>sensitivity</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="40" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a1981c6eb3dd36a72d4b9660a428124d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::check_convergence_variance_ham</definition>
        <argsstring>(std::optional&lt; double &gt; threshold=std::nullopt, std::optional&lt; double &gt; sensitivity=std::nullopt)</argsstring>
        <name>check_convergence_variance_ham</name>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>threshold</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>sensitivity</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="41" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="238" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1add59585709650152d0ab044fd88e715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::check_convergence_variance_mom</definition>
        <argsstring>(std::optional&lt; double &gt; threshold=std::nullopt, std::optional&lt; double &gt; sensitivity=std::nullopt)</argsstring>
        <name>check_convergence_variance_mom</name>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>threshold</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>sensitivity</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="42" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="250" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a678214cd778c2be70fc86cab66e406ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_infinite::check_convergence_entg_entropy</definition>
        <argsstring>(std::optional&lt; double &gt; sensitivity=std::nullopt)</argsstring>
        <name>check_convergence_entg_entropy</name>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>sensitivity</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="43" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.cpp" bodystart="262" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1a35e482872c1dec9372c74c40a82208d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_base::class_algorithm_base</definition>
        <argsstring>()=default</argsstring>
        <name>class_algorithm_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="15" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__infinite_1ab8dd45b96c3bc6d6dac3164741d9dae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_base::class_algorithm_base</definition>
        <argsstring>(std::shared_ptr&lt; h5pp::File &gt; h5ppFile_, AlgorithmType algo_type_)</argsstring>
        <name>class_algorithm_base</name>
        <param>
          <type>std::shared_ptr&lt; h5pp::File &gt;</type>
          <declname>h5ppFile_</declname>
        </param>
        <param>
          <type><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref></type>
          <declname>algo_type_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="15" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="18" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>class_idmrg</label>
        <link refid="classclass__idmrg"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>class_algorithm_infinite</label>
        <link refid="classclass__algorithm__infinite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>class_itebd</label>
        <link refid="classclass__itebd"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="18">
        <label>std::unique_ptr&lt; class_model_infinite &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>class_model_infinite::Cache</label>
        <link refid="structclass__model__infinite_1_1_cache"/>
      </node>
      <node id="10">
        <label>std::unique_ptr&lt; class_edges_infinite &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>class_tensors_infinite</label>
        <link refid="classclass__tensors__infinite"/>
        <childnode refid="9" relation="usage">
          <edgelabel>measurements</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>edges</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>model</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="14">
        <label>class_env_base</label>
        <link refid="classclass__env__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>tag</edgelabel>
          <edgelabel>side</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>block</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>class_algorithm_infinite</label>
        <link refid="classclass__algorithm__infinite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>tensors</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>entropy_iter</edgelabel>
          <edgelabel>var_mom_iter</edgelabel>
          <edgelabel>var_mpo_iter</edgelabel>
          <edgelabel>var_ham_iter</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::shared_ptr&lt; h5pp::File &gt;</label>
      </node>
      <node id="13">
        <label>class_env_ene</label>
        <link refid="classclass__env__ene"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>class_mpo_site</label>
        <link refid="classclass__mpo__site"/>
        <childnode refid="22" relation="usage">
          <edgelabel>extent2</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>extent4</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>class_edges_infinite</label>
        <link refid="classclass__edges__infinite"/>
        <childnode refid="12" relation="usage">
          <edgelabel>eneL</edgelabel>
          <edgelabel>eneR</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>varL</edgelabel>
          <edgelabel>varR</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::unique_ptr&lt; class_state_infinite &gt;</label>
        <childnode refid="26" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>class_model_infinite</label>
        <link refid="classclass__model__infinite"/>
        <childnode refid="20" relation="usage">
          <edgelabel>HA</edgelabel>
          <edgelabel>HB</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cache</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::array&lt; long, 4 &gt;</label>
      </node>
      <node id="12">
        <label>std::unique_ptr&lt; class_env_ene &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>class_state_infinite</label>
        <link refid="classclass__state__infinite"/>
        <childnode refid="27" relation="usage">
          <edgelabel>cache</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>MPS_B</edgelabel>
          <edgelabel>MPS_A</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>measurements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="6">
        <label>std::complex&lt; double &gt;</label>
      </node>
      <node id="16">
        <label>std::unique_ptr&lt; class_env_var &gt;</label>
        <childnode refid="17" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>class_mps_site</label>
        <link refid="classclass__mps__site"/>
        <childnode refid="3" relation="usage">
          <edgelabel>label</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::unique_ptr&lt; class_mps_site &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>class_env_var</label>
        <link refid="classclass__env__var"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>class_state_infinite::Cache</label>
        <link refid="structclass__state__infinite_1_1_cache"/>
      </node>
      <node id="9">
        <label>tensors_measure_infinite</label>
        <link refid="structtensors__measure__infinite"/>
      </node>
      <node id="2">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>algo_name</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>status</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>h5pp_file</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::unique_ptr&lt; Eigen::Tensor&lt; Scalar, 3 &gt; &gt;</label>
      </node>
      <node id="20">
        <label>std::unique_ptr&lt; class_mpo_site &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>class_algorithm_status</label>
        <link refid="classclass__algorithm__status"/>
        <childnode refid="6" relation="usage">
          <edgelabel>delta_t</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::array&lt; long, 2 &gt;</label>
      </node>
      <node id="30">
        <label>state_measure_infinite</label>
        <link refid="structstate__measure__infinite"/>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" line="12" column="59" bodyfile="/home/david/GitProjects/DMRG++/source/algorithms/class_algorithm_infinite.h" bodystart="12" bodyend="49"/>
    <listofallmembers>
      <member refid="classclass__algorithm__base_1a80c582c2364a996836b5c7fe29076c13" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>algo_name</name></member>
      <member refid="classclass__algorithm__base_1a4c3f79ef6e69fe89a7e5b6d1f3ad3f34" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>algo_type</name></member>
      <member refid="classclass__algorithm__base_1ab3e9bfaa0a5cf0810c3c7a074cfa9d69" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>cfg_algorithm_is_on</name></member>
      <member refid="classclass__algorithm__base_1a9e2ef57748396e00830b20111c59bdd9" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>cfg_chi_lim_grow</name></member>
      <member refid="classclass__algorithm__base_1a02248bae999554bcbbc84ba8bbaf6eb0" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>cfg_chi_lim_init</name></member>
      <member refid="classclass__algorithm__base_1a3e25541163969ac43885855e9a701455" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>cfg_chi_lim_max</name></member>
      <member refid="classclass__algorithm__base_1a1ff5ab0d312d132dd30243885d07dbd1" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>cfg_print_freq</name></member>
      <member refid="classclass__algorithm__base_1a6d37e1472c3e74f8e50a11c71a8b03ee" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>check_convergence</name></member>
      <member refid="classclass__algorithm__infinite_1a678214cd778c2be70fc86cab66e406ae" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>check_convergence_entg_entropy</name></member>
      <member refid="classclass__algorithm__infinite_1a1981c6eb3dd36a72d4b9660a428124d2" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>check_convergence_variance_ham</name></member>
      <member refid="classclass__algorithm__infinite_1add59585709650152d0ab044fd88e715e" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>check_convergence_variance_mom</name></member>
      <member refid="classclass__algorithm__infinite_1a56ef1b5db54adc543de14e45914df2dd" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>check_convergence_variance_mpo</name></member>
      <member refid="classclass__algorithm__base_1ab832ca5e6b3de23ee408c760c68c843f" prot="protected" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>check_saturation</name></member>
      <member refid="classclass__algorithm__infinite_1a35e482872c1dec9372c74c40a82208d0" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__infinite_1ab8dd45b96c3bc6d6dac3164741d9dae0" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__base_1ab8dd45b96c3bc6d6dac3164741d9dae0" prot="public" virt="non-virtual" ambiguityscope="class_algorithm_base::"><scope>class_algorithm_infinite</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__infinite_1a0ad18e5b809b20e90df53c67e2421ef2" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>class_algorithm_infinite</name></member>
      <member refid="classclass__algorithm__infinite_1a2602edae65f1a9bf3b5437c2cdc446de" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>clear_convergence_status</name></member>
      <member refid="classclass__algorithm__base_1a9f9cf23bd9a37bb6bf4ad7da366beda2" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>copy_from_tmp</name></member>
      <member refid="classclass__algorithm__base_1ab4a97d8b985c6743d829ff5ec668ebe3" prot="protected" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>count_convergence</name></member>
      <member refid="classclass__algorithm__infinite_1aa2eef810a05455e20d99ed8053003539" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>entropy_iter</name></member>
      <member refid="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>h5pp_file</name></member>
      <member refid="classclass__algorithm__base_1a0a68686f23b45bcdc7c833a7bf348b54" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>init_bond_dimension_limits</name></member>
      <member refid="classclass__algorithm__base_1affa46990d9763a23323280340fb62510" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>print_profiling_lap</name></member>
      <member refid="classclass__algorithm__infinite_1a993724b938167db865be9b23f291b5d9" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>print_status_full</name></member>
      <member refid="classclass__algorithm__infinite_1af232e6d037549f0aae338b402aa9c722" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>print_status_update</name></member>
      <member refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>quietNaN</name></member>
      <member refid="classclass__algorithm__infinite_1a97d87cb8fcb7ddd09913e1cabdcd1394" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>randomize_model</name></member>
      <member refid="classclass__algorithm__infinite_1a2573591517d4f3874fa0ab7c6cbea2a8" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>randomize_state</name></member>
      <member refid="classclass__algorithm__infinite_1ae14b72b2eb26ac37f453c24cd2c5a68c" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>run</name></member>
      <member refid="classclass__algorithm__infinite_1aa7176e26e0dd793557a649fc6c0b75f1" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>run_postprocessing</name></member>
      <member refid="classclass__algorithm__infinite_1a2cabf133e43683569ef43b9639476dab" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>run_preprocessing</name></member>
      <member refid="classclass__algorithm__infinite_1abdf68a4ae64f7302ad9e82a48d468e8a" prot="public" virt="pure-virtual"><scope>class_algorithm_infinite</scope><name>run_simulation</name></member>
      <member refid="classclass__algorithm__base_1ac2a5042c5337ef3b8c6d29a115e25843" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>Scalar</name></member>
      <member refid="classclass__algorithm__base_1a7eb3f86503fff1d7d00ec3cc61beb60b" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>status</name></member>
      <member refid="classclass__algorithm__base_1a6d3e78c2e18dc5878763bbd914c0d490" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>stop_reason</name></member>
      <member refid="classclass__algorithm__infinite_1ae94c13ba920ab9e766ab8c1dd206001a" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>tensors</name></member>
      <member refid="classclass__algorithm__infinite_1a93e97af4e20920c9690ff47fe78ddd60" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>update_bond_dimension_limit</name></member>
      <member refid="classclass__algorithm__infinite_1acb14ea81ee6e72bc06bd3fbd1627249b" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>update_variance_max_digits</name></member>
      <member refid="classclass__algorithm__infinite_1a1cdf17c99c068a231d0f7804d2d48734" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>var_ham_iter</name></member>
      <member refid="classclass__algorithm__infinite_1ad93d7551dc4d3cb8aa08e1de053d4d37" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>var_mom_iter</name></member>
      <member refid="classclass__algorithm__infinite_1ae453c5a7ba02dc74b473f1a2f20552cd" prot="public" virt="non-virtual"><scope>class_algorithm_infinite</scope><name>var_mpo_iter</name></member>
      <member refid="classclass__algorithm__infinite_1a7453802a0486ef742f2cba4b44060526" prot="public" virt="virtual"><scope>class_algorithm_infinite</scope><name>write_to_file</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
