<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class__state__finite_8cpp" kind="file" language="C++">
    <compoundname>class_state_finite.cpp</compoundname>
    <includes refid="class__state__finite_8h" local="yes">class_state_finite.h</includes>
    <includes refid="nmspc__tools_8h" local="no">tools/nmspc_tools.h</includes>
    <includes refid="nmspc__quantum__mechanics_8h" local="no">general/nmspc_quantum_mechanics.h</includes>
    <includes local="no">spdlog/fmt/bundled/ranges.h</includes>
    <incdepgraph>
      <node id="2178">
        <label>list</label>
      </node>
      <node id="2167">
        <label>iomanip</label>
      </node>
      <node id="2165">
        <label>iterator</label>
      </node>
      <node id="2155">
        <label>class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2159" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2154">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_state_finite.cpp</label>
        <link refid="class__state__finite_8cpp"/>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2184" relation="include">
        </childnode>
        <childnode refid="2175" relation="include">
        </childnode>
      </node>
      <node id="2168">
        <label>general/nmspc_type_check.h</label>
        <link refid="nmspc__type__check_8h"/>
        <childnode refid="2169" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2163">
        <label>Eigen/Core</label>
      </node>
      <node id="2177">
        <label>string</label>
      </node>
      <node id="2180">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="2181" relation="include">
        </childnode>
        <childnode refid="2166" relation="include">
        </childnode>
      </node>
      <node id="2173">
        <label>io/nmspc_logger.h</label>
        <link refid="nmspc__logger_8h"/>
        <childnode refid="2174" relation="include">
        </childnode>
        <childnode refid="2175" relation="include">
        </childnode>
      </node>
      <node id="2169">
        <label>experimental/type_traits</label>
      </node>
      <node id="2176">
        <label>tools/nmspc_tools.h</label>
        <link refid="nmspc__tools_8h"/>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2177" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2178" relation="include">
        </childnode>
        <childnode refid="2179" relation="include">
        </childnode>
        <childnode refid="2173" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2182" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2162">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="2159">
        <label>state/class_environment.h</label>
        <link refid="class__environment_8h"/>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2170" relation="include">
        </childnode>
      </node>
      <node id="2175">
        <label>spdlog/fmt/bundled/ranges.h</label>
      </node>
      <node id="2172">
        <label>model/class_model_base.h</label>
        <link refid="class__model__base_8h"/>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2173" relation="include">
        </childnode>
      </node>
      <node id="2164">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2182">
        <label>tools/finite/opt-internals/enum_classes.h</label>
        <link refid="enum__classes_8h"/>
        <childnode refid="2166" relation="include">
        </childnode>
        <childnode refid="2183" relation="include">
        </childnode>
      </node>
      <node id="2174">
        <label>spdlog/logger.h</label>
      </node>
      <node id="2171">
        <label>state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2161">
        <label>general/nmspc_omp.h</label>
        <link refid="nmspc__omp_8h"/>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2158">
        <label>optional</label>
      </node>
      <node id="2179">
        <label>vector</label>
      </node>
      <node id="2170">
        <label>spdlog/fmt/fmt.h</label>
      </node>
      <node id="2183">
        <label>sstream</label>
      </node>
      <node id="2166">
        <label>iostream</label>
      </node>
      <node id="2181">
        <label>chrono</label>
      </node>
      <node id="2184">
        <label>general/nmspc_quantum_mechanics.h</label>
        <link refid="nmspc__quantum__mechanics_8h"/>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2179" relation="include">
        </childnode>
      </node>
      <node id="2157">
        <label>complex</label>
      </node>
      <node id="2160">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2166" relation="include">
        </childnode>
        <childnode refid="2167" relation="include">
        </childnode>
        <childnode refid="2168" relation="include">
        </childnode>
      </node>
      <node id="2156">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-01-29.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__state__finite_8h" kindref="compound">class_state_finite.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tools_8h" kindref="compound">tools/nmspc_tools.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__quantum__mechanics_8h" kindref="compound">general/nmspc_quantum_mechanics.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/fmt/bundled/ranges.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>make<sp/>a<sp/>destructor<sp/>manually<sp/>for<sp/>the<sp/>enclosing<sp/>class<sp/>&quot;class_state_finite&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>encloses<sp/>&quot;class_model_base&quot;.<sp/>Otherwise<sp/>unique_ptr<sp/>will<sp/>forcibly<sp/>inline<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>own<sp/>default<sp/>deleter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>us<sp/>to<sp/>forward<sp/>declare<sp/>the<sp/>abstract<sp/>base<sp/>class<sp/>&quot;class_model_base&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>more:<sp/>https://stackoverflow.com/questions/33212686/how-to-use-unique-ptr-with-forward-declared-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>here:<sp/><sp/>https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="classclass__state__finite_1a95ff8a6f5bd1ae8122d1a28079740e97" kindref="member">class_state_finite::~class_state_finite</ref>()=</highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classclass__state__finite_1a0dad9d1050a6f7ad3c7117450e7e5dfa" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite_1a4a1931831fbfac87aedbe87c95d8617c" kindref="member">class_state_finite::class_state_finite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>other){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classclass__state__finite_1acd27402752b06bd245716d2b5a087ba2" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref>&amp;<sp/><ref refid="classclass__state__finite_1acd27402752b06bd245716d2b5a087ba2" kindref="member">class_state_finite::operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<sp/>other){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;other<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>all<sp/>data<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref><sp/>=<sp/>other.<ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a058f49ad7b6da92d6e6b09245ba3edf9" kindref="member">chi_lim</ref><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a058f49ad7b6da92d6e6b09245ba3edf9" kindref="member">chi_lim</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a56d5220eecfef056674a2590358fdf72" kindref="member">chi_max</ref><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a56d5220eecfef056674a2590358fdf72" kindref="member">chi_max</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>MPO&apos;s<sp/>are<sp/>special<sp/>and<sp/>the<sp/>whole<sp/>point<sp/>of<sp/>doing<sp/>this<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.clear();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.clear();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mpo:<sp/>other.<ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>)<sp/>this-&gt;<ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.emplace_back(mpo-&gt;clone());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mpo:<sp/>other.<ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>)<sp/>this-&gt;<ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.emplace_back(mpo-&gt;clone());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classclass__state__finite_1a59e8655d67f6ac90de0af267f63fe855" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a59e8655d67f6ac90de0af267f63fe855" kindref="member">class_state_finite::do_all_measurements</ref>(){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools_1_1finite" kindref="compound">tools::finite</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a8a3ce40ce2ad16fd8ce142e9fd395bc8" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac198a39c208e3ccd5af9402510f6243e" kindref="member">measure::length</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a0c8962096f453af0f6fdd0d84608a82c" kindref="member">bond_dimension_current</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1af66720d92c57155c910f42e03186b149" kindref="member">measure::bond_dimension_current</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ab7709cb1dbc33dd18d4a0b70edaeecf3" kindref="member">bond_dimension_midchain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a67ec4bcbc43bc0856e2d27935d3c11dd" kindref="member">measure::bond_dimension_midchain</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a9997f3e429540d90b27f9064f3cc8836" kindref="member">bond_dimensions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a59439fc8cd211defcfa432a9fec296c7" kindref="member">measure::bond_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1aa8b41946188900f582d2b630c2826c19" kindref="member">norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">measure::norm</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a07c37d8d061f8b8dda2e3e567c3077cc" kindref="member">energy</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1twosite_1a095568b22a6f9a79ddc8bdd2b543c94b" kindref="member">measure::energy</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//This<sp/>number<sp/>is<sp/>needed<sp/>for<sp/>variance<sp/>calculation!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a11182ed066985fbb788834ac5682616d" kindref="member">energy_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1twosite_1ab6ec7489e8a30af7cfff61b1fe4af8b0" kindref="member">measure::energy_per_site</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ac09462b4c582e3b3442c870e49b93565" kindref="member">energy_variance</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1twosite_1a5e864017c044b44b96a5b349f0b02a50" kindref="member">measure::energy_variance</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a8385794cdf61efdaf55759ca63cbaeb9" kindref="member">energy_variance_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1_1twosite_1a4e46ab266e45e5ff4e9b7abc56bf1458" kindref="member">measure::energy_variance_per_site</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a22a42ad587494c414f98d0cc89a863e0" kindref="member">entanglement_entropy_current</ref><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ad4d342b14748aa9b6e9238a708a2ba8f" kindref="member">measure::entanglement_entropy_current</ref><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a156eb9e83c52eb8508f2313ac17461ce" kindref="member">entanglement_entropy_midchain</ref><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5da3c6001a1e7c6f3897afb3f30b3150" kindref="member">measure::entanglement_entropy_midchain</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ae809709f838bde3545f2200e05c33b56" kindref="member">entanglement_entropies</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">measure::entanglement_entropies</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ad344d362f1869fb1b766865d9d86e8b4" kindref="member">spin_components</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a6d919a60c4dbc0e8476c96ea281bf386" kindref="member">measure::spin_components</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classclass__state__finite_1ad27778f1d88bf5045dd4a4b452604e49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ad27778f1d88bf5045dd4a4b452604e49" kindref="member">class_state_finite::set_positions</ref>(){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;MPS:<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>){MPS.set_position(pos++);}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;MPS:<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>){MPS.set_position(pos++);}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ENV:<sp/><ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref>){ENV.set_position(pos++);}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ENV:<sp/><ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>){ENV.set_position(pos++);}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ENV2:<sp/><ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref>){ENV2.set_position(pos++);}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ENV2:<sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>){ENV2.set_position(pos++);}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;MPO<sp/>:<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>){MPO-&gt;set_position(pos++);}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;MPO<sp/>:<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>){MPO-&gt;set_position(pos++);}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">class_state_finite::get_length</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.size()<sp/>+<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.size();}</highlight></codeline>
<codeline lineno="91" refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">class_state_finite::get_position</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.size()<sp/>-<sp/>1u;}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classclass__state__finite_1a1b8ce84b4c6ec114918e7fb793f1d91d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1a1b8ce84b4c6ec114918e7fb793f1d91d" kindref="member">class_state_finite::get_sweeps</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref>;}</highlight></codeline>
<codeline lineno="94" refid="classclass__state__finite_1a3ab202d7ef2f79988335d1208091d730" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1a3ab202d7ef2f79988335d1208091d730" kindref="member">class_state_finite::reset_sweeps</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref>;}</highlight></codeline>
<codeline lineno="95" refid="classclass__state__finite_1a9c81a351f5f21f3328db348dad032e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a9c81a351f5f21f3328db348dad032e5c" kindref="member">class_state_finite::set_sweeps</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_sweeps_)<sp/>{<sp/><ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref><sp/>=<sp/>num_sweeps_;}</highlight></codeline>
<codeline lineno="96" refid="classclass__state__finite_1a3a7294c4d42d20d395cd8dfc29a4beaa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a3a7294c4d42d20d395cd8dfc29a4beaa" kindref="member">class_state_finite::increment_sweeps</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="classclass__state__finite_1ab65e6811cc2b86eee2baa0dddff20c79" kindref="member">num_sweeps</ref>++;}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classclass__state__finite_1af30193d585dd6e96cf5054e55072c220" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1af30193d585dd6e96cf5054e55072c220" kindref="member">class_state_finite::get_moves</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref>;}</highlight></codeline>
<codeline lineno="99" refid="classclass__state__finite_1a4674a55c640cb3868334d59209e618e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1a4674a55c640cb3868334d59209e618e3" kindref="member">class_state_finite::reset_moves</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref>;}</highlight></codeline>
<codeline lineno="100" refid="classclass__state__finite_1a885447e3e36c155e7dc953dbff496e4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a885447e3e36c155e7dc953dbff496e4b" kindref="member">class_state_finite::set_moves</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_moves_)<sp/><sp/>{<sp/><ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref><sp/>=<sp/>num_moves_;}</highlight></codeline>
<codeline lineno="101" refid="classclass__state__finite_1ab575bc4a8a11d45ef6d6a09dcb5e38c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ab575bc4a8a11d45ef6d6a09dcb5e38c3" kindref="member">class_state_finite::increment_moves</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="classclass__state__finite_1adf88b67ee1d0b8bbdf30b51f664749b9" kindref="member">num_moves</ref>++;}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classclass__state__finite_1a3364452c2cfa578c7de18e28eee2d675" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a3364452c2cfa578c7de18e28eee2d675" kindref="member">class_state_finite::get_chi_lim</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>get<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a058f49ad7b6da92d6e6b09245ba3edf9" kindref="member">chi_lim</ref>.value();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108" refid="classclass__state__finite_1aea38eefb2308d0ee08f9fe98cebe0180" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aea38eefb2308d0ee08f9fe98cebe0180" kindref="member">class_state_finite::set_chi_lim</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim_){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>set<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chi_lim_<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>set<sp/>chi<sp/>limit<sp/>to<sp/>zero!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a058f49ad7b6da92d6e6b09245ba3edf9" kindref="member">chi_lim</ref><sp/>=<sp/>chi_lim_;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classclass__state__finite_1a42f96b6d9228736dca4f73335ac1f584" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a42f96b6d9228736dca4f73335ac1f584" kindref="member">class_state_finite::get_chi_max</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>get<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a56d5220eecfef056674a2590358fdf72" kindref="member">chi_max</ref>.value();</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118" refid="classclass__state__finite_1af2f7c38b97cfefef4fe396b0b3cd0623" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af2f7c38b97cfefef4fe396b0b3cd0623" kindref="member">class_state_finite::set_chi_max</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_max_){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>set<sp/>the<sp/>the<sp/>highest<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chi_max_<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>set<sp/>chi<sp/>max<sp/>to<sp/>zero!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a56d5220eecfef056674a2590358fdf72" kindref="member">chi_max</ref><sp/>=<sp/>chi_max_;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">class_state_finite::get_direction</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref>;}</highlight></codeline>
<codeline lineno="125" refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">class_state_finite::flip_direction</ref>()<sp/>{<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>*=<sp/>-1;}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">Eigen::DSizes&lt;long,3&gt;</highlight></codeline>
<codeline lineno="129" refid="classclass__state__finite_1aa46de0b0eac1681e922128743dce502d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1aa46de0b0eac1681e922128743dce502d" kindref="member">class_state_finite::dimensions_2site</ref>()</highlight><highlight class="keyword"><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::DSizes&lt;long,3&gt;<sp/>dimensions;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensions[1]<sp/>=<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_chiL();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensions[2]<sp/>=<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_chiR();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensions[0]<sp/>=<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_spin_dim()<sp/>*<sp/><sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_spin_dim();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dimensions;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137" refid="classclass__state__finite_1acd2fd19f2c9727ce2e866733d05d2c2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="classclass__state__finite_1acd2fd19f2c9727ce2e866733d05d2c2f" kindref="member">class_state_finite::size_2site</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/><ref refid="classclass__state__finite_1aa46de0b0eac1681e922128743dce502d" kindref="member">dimensions_2site</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims[0]*dims[1]*dims[2];</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classclass__state__finite_1aeddc7bc70f553dbeb53ff7d6aa8c1e3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aeddc7bc70f553dbeb53ff7d6aa8c1e3a" kindref="member">class_state_finite::position_is_the_middle</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>+<sp/>1<sp/>==<sp/>(size_t)(<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>/<sp/>2.0)<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>1<sp/>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145" refid="classclass__state__finite_1a102a0f8961c46707afd775706066f2ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a102a0f8961c46707afd775706066f2ed" kindref="member">class_state_finite::position_is_the_middle_any_direction</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>+<sp/>1<sp/>==<sp/>(size_t)(<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="classclass__state__finite_1a37edc2cd9e390660ed0813ade1d9f496" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a37edc2cd9e390660ed0813ade1d9f496" kindref="member">class_state_finite::position_is_the_left_edge</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classclass__state__finite_1a000cdf797419dd5665db121475672cd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a000cdf797419dd5665db121475672cd5" kindref="member">class_state_finite::position_is_the_right_edge</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>==<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classclass__state__finite_1a9ee20da02dc91d209fd07bdc68dc1c36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a9ee20da02dc91d209fd07bdc68dc1c36" kindref="member">class_state_finite::position_is_any_edge</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a37edc2cd9e390660ed0813ade1d9f496" kindref="member">position_is_the_left_edge</ref>()<sp/>or<sp/><ref refid="classclass__state__finite_1a000cdf797419dd5665db121475672cd5" kindref="member">position_is_the_right_edge</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classclass__state__finite_1aeed06e6ec757c04e51559c4545c4d811" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aeed06e6ec757c04e51559c4545c4d811" kindref="member">class_state_finite::position_is_at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>==<sp/>pos;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classclass__state__finite_1a28a8d5430841a2c95de9cbc543f205b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a28a8d5430841a2c95de9cbc543f205b3" kindref="member">class_state_finite::isReal</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mps_real<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mpo_real<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mps<sp/>:<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref><sp/>){mps_real<sp/>=<sp/>mps_real<sp/>and<sp/>mps.isReal();}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mps<sp/>:<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref><sp/>){mps_real<sp/>=<sp/>mps_real<sp/>and<sp/>mps.isReal();}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref><sp/>){mpo_real<sp/>=<sp/>mpo_real<sp/>and<sp/>mpo-&gt;isReal();}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref><sp/>){mpo_real<sp/>=<sp/>mpo_real<sp/>and<sp/>mpo-&gt;isReal();}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mps_real<sp/>and<sp/>mpo_real;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,1&gt;<sp/>&amp;<sp/><ref refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" kindref="member">class_state_finite::midchain_bond</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>center_pos<sp/>=<sp/>(<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>-1)/2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>&lt;<sp/><sp/><sp/>center_pos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(center_pos).<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>&gt;<sp/><sp/><sp/>center_pos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(center_pos+1).<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>()<sp/>==<sp/><sp/>center_pos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(center_pos).<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>position<sp/>to<sp/>find<sp/>midchain_bond&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,1&gt;<sp/>&amp;<sp/><ref refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" kindref="member">class_state_finite::current_bond</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().isCenter())<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_chiR()<sp/>!=<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_LC().dimension(0))</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Current<sp/>center<sp/>bond<sp/>dimension<sp/>mismatch!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_LC();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Current<sp/>center<sp/>bond<sp/>LC<sp/>hasn&apos;t<sp/>been<sp/>set.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>class_state_finite::get_A()<sp/>const{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>Textra::asDiagonal(MPS_L.back().get_L()).contract(MPS_L.back().get_G(),<sp/>Textra::idx({1},{1})).shuffle(Textra::array3{1,0,2});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>class_state_finite::get_B()<sp/>const{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>MPS_R.front().get_G().contract(Textra::asDiagonal(MPS_R.front().get_L()),<sp/>Textra::idx({2},{0}));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="classclass__state__finite_1a5b4d41aa8fd51633e490fe64e7d162a0" refkind="member"><highlight class="normal">Eigen::Tensor&lt;class_state_finite::Scalar,4&gt;<sp/><ref refid="classclass__state__finite_1a5b4d41aa8fd51633e490fe64e7d162a0" kindref="member">class_state_finite::get_theta</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1af308f1f2e19b59e50fb2e1855c4c7406" kindref="member">theta</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1af308f1f2e19b59e50fb2e1855c4c7406" kindref="member">theta</ref>.value();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>theta...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1af308f1f2e19b59e50fb2e1855c4c7406" kindref="member">theta</ref><sp/>=<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_M().contract(<ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_M(),<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">Textra::idx</ref>({2},{1}));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>theta...<sp/>OK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1af308f1f2e19b59e50fb2e1855c4c7406" kindref="member">theta</ref>.value();</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">class_state_finite::get_MPS</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPS(pos)<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;=<sp/><ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.back().get_position()){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mps_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a4ea331a72ed617c5556723941bc3be30" kindref="member">MPS_L</ref>.begin(),pos);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mps_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPS(pos):<sp/>Mismatch<sp/>in<sp/>mps<sp/>L<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mps_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mps_it;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_position())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPS(pos):<sp/>Mismatch<sp/>in<sp/>pos<sp/>and<sp/>MPSR<sp/>front<sp/>position:<sp/>{}<sp/>&lt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/><sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_position()));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mps_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.begin(),<sp/>pos<sp/>-<sp/><ref refid="classclass__state__finite_1ad13069bc0bbfd99d67c9403db4d4c20c" kindref="member">MPS_R</ref>.front().get_position());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mps_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPS(pos):<sp/>Mismatch<sp/>in<sp/>mps<sp/>R<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mps_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mps_it;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classclass__state__finite_1aab220f75058a1e27b705d956947c8b6e" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">class_state_finite::get_MPS</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(pos));</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__base" kindref="compound">class_model_base</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">class_state_finite::get_MPO</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPO(pos)<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;=<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.back()-&gt;get_position()){</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpo_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.begin(),pos)-&gt;</highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpo_it-&gt;get_position()<sp/>!=<sp/>pos)</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPO(pos):<sp/>Mismatch<sp/>in<sp/>mpo<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mpo_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mpo_it;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.front()-&gt;get_position())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPS(pos):<sp/>Mismatch<sp/>in<sp/>pos<sp/>and<sp/>MPOR<sp/>front<sp/>position:<sp/>{}<sp/>&lt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/><sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.front()-&gt;get_position()));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpo_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.begin(),<sp/>pos<sp/>-<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>.front()-&gt;get_position())-&gt;</highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpo_it-&gt;get_position()<sp/>!=<sp/>pos)</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_MPO(pos):<sp/>Mismatch<sp/>in<sp/>mpo<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mpo_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mpo_it;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classclass__state__finite_1a45758b59d928b1b3cefd99b4cfc72018" refkind="member"><highlight class="normal"><ref refid="classclass__model__base" kindref="compound">class_model_base</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">class_state_finite::get_MPO</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classclass__model__base" kindref="compound">class_model_base</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(pos));</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>&amp;<sp/>class_state_finite::get_G(size_t<sp/>pos)<sp/>const{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>std::as_const(get_MPS(pos).get_G());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>&amp;<sp/>class_state_finite::get_G(size_t<sp/>pos){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>&amp;&gt;(static_cast&lt;const<sp/>class_state_finite<sp/>&amp;&gt;(*this).get_G(pos));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>Eigen::Tensor&lt;class_state_finite::Scalar,1&gt;<sp/>&amp;<sp/>class_state_finite::get_L(size_t<sp/>pos)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/><sp/><sp/><sp/><sp/><sp/>(pos<sp/>==<sp/>MPS_L.back().get_position()<sp/>+<sp/>1){return<sp/>MPS_C;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(pos<sp/>&lt;=<sp/>MPS_L.back().get_position())<sp/><sp/><sp/><sp/>{return<sp/>get_MPS(pos).get_L();}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(pos<sp/>&gt;=<sp/>MPS_R.front().get_position())<sp/><sp/><sp/>{return<sp/>get_MPS(pos-1).get_L();}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>{throw<sp/>std::runtime_error(&quot;Unhandled<sp/>position&quot;);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,1&gt;<sp/>&amp;<sp/>class_state_finite::get_L(size_t<sp/>pos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;Eigen::Tensor&lt;class_state_finite::Scalar,1&gt;<sp/>&amp;&gt;(static_cast&lt;const<sp/>class_state_finite<sp/>&amp;&gt;(*this).get_L(pos));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>class_state_finite::get_A(size_t<sp/>pos)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>Textra::asDiagonal(get_L(pos)).contract(get_G(pos),<sp/>Textra::idx({1},{1})).shuffle(Textra::array3{1,0,2});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>class_state_finite::get_B(size_t<sp/>pos)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>get_G(pos).contract(Textra::asDiagonal(get_L(pos+1)),<sp/>Textra::idx({2},{0}));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//Eigen::Tensor&lt;class_state_finite::Scalar,4&gt;<sp/>class_state_finite::get_theta(size_t<sp/>pos)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>get_A(pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(Textra::asDiagonal(get_L(pos+1)),<sp/>Textra::idx({2},{0}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(get_B(pos+1),<sp/>Textra::idx({2},{1}));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="classclass__state__finite_1a9794c32313428c0c8fac21a4d151177d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__environment" kindref="compound">class_environment</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1a9794c32313428c0c8fac21a4d151177d" kindref="member">class_state_finite::get_ENVL</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/><ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref>.back().get_position()<sp/>)<sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVL(pos):<sp/><sp/>pos<sp/>is<sp/>not<sp/>in<sp/>left<sp/>side:<sp/>{}&quot;</highlight><highlight class="normal">,pos));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref>.size())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVL(pos)<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,pos));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>env_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a66aea35569db3d887772a81c3bc76db4" kindref="member">ENV_L</ref>.begin(),<sp/>pos);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVL(pos):<sp/>Mismatch<sp/>in<sp/>env<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>env_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env_it;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="classclass__state__finite_1aac02b1c96819f608c09f39ff7862ee29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__environment" kindref="compound">class_environment</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1aac02b1c96819f608c09f39ff7862ee29" kindref="member">class_state_finite::get_ENVR</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>.front().get_position()<sp/>){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVR(pos):<sp/><sp/>pos<sp/>is<sp/>not<sp/>in<sp/>right<sp/>side:<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>pos));}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVR(pos):<sp/><sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>pos));}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>.front().get_position())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVR(pos):<sp/>Mismatch<sp/>in<sp/>pos<sp/>and<sp/>ENVR<sp/>front<sp/>position:<sp/>{}<sp/>&lt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/><sp/><ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>.front().get_position()));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>env_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>.begin(),<sp/>pos<sp/>-<sp/><ref refid="classclass__state__finite_1a111edccb05479b7ae467372ac6cb8553" kindref="member">ENV_R</ref>.front().get_position());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENVR(pos):<sp/>Mismatch<sp/>in<sp/>env<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>env_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env_it;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classclass__state__finite_1a2143f2bd43e90849f0b3f48401a4e17a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__environment__var" kindref="compound">class_environment_var</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1a2143f2bd43e90849f0b3f48401a4e17a" kindref="member">class_state_finite::get_ENV2L</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/><ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref>.back().get_position()<sp/>)<sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2L(pos):<sp/><sp/>pos<sp/>is<sp/>not<sp/>in<sp/>left<sp/>side:<sp/>{}&quot;</highlight><highlight class="normal">,pos));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref>.size())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2L(pos)<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,pos));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>env2_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1ab6b4a56e88ca9905d4092182737adb5a" kindref="member">ENV2_L</ref>.begin(),<sp/>pos);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env2_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2L(pos):<sp/>Mismatch<sp/>in<sp/>env<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>env2_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env2_it;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="classclass__state__finite_1a68322646c4cc11ea2c0ea18cd96a86c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__environment__var" kindref="compound">class_environment_var</ref><sp/>&amp;<sp/><ref refid="classclass__state__finite_1a68322646c4cc11ea2c0ea18cd96a86c6" kindref="member">class_state_finite::get_ENV2R</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.front().get_position()<sp/>)</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2R(pos):<sp/><sp/>pos<sp/>is<sp/>not<sp/>in<sp/>right<sp/>side:<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>pos));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.back().get_position()<sp/>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2R(pos):<sp/><sp/>pos<sp/>is<sp/>not<sp/>in<sp/>right<sp/>side:<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>pos));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2R(pos):<sp/><sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal"><sp/>,<sp/>pos));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.front().get_position())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2R(pos):<sp/>Mismatch<sp/>in<sp/>pos<sp/>and<sp/>ENV2R<sp/>front<sp/>position:<sp/>{}<sp/>&lt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/><sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.front().get_position()));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>env2_it<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.begin(),<sp/>pos<sp/>-<sp/><ref refid="classclass__state__finite_1a00c90dfc9aab186aefeb0f83ccf5c068" kindref="member">ENV2_R</ref>.front().get_position());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env2_it-&gt;get_position()<sp/>!=<sp/>pos)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_ENV2R(pos):<sp/>Mismatch<sp/>in<sp/>env2<sp/>position<sp/>and<sp/>pos:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>env2_it-&gt;get_position(),<sp/>pos));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env2_it;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>reduced<sp/>energy<sp/>MPO&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classclass__state__finite_1ae9674e542cf36b0b22d4d85abf0b733b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classclass__state__finite_1ae9674e542cf36b0b22d4d85abf0b733b" kindref="member">class_state_finite::isReduced</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reduced<sp/>=<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.front()-&gt;isReduced();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reduced<sp/>!=<sp/>mpo-&gt;isReduced()){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;First<sp/>MPO<sp/>has<sp/>isReduce:<sp/>{},<sp/>but<sp/>MPO<sp/>at<sp/>pos<sp/>{}<sp/>has<sp/>isReduce:<sp/>{}&quot;</highlight><highlight class="normal">,reduced,<sp/>mpo-&gt;get_position(),<sp/>mpo-&gt;isReduced()));}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reduced<sp/>!=<sp/>mpo-&gt;isReduced()){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;First<sp/>MPO<sp/>has<sp/>isReduce:<sp/>{},<sp/>but<sp/>MPO<sp/>at<sp/>pos<sp/>{}<sp/>has<sp/>isReduce:<sp/>{}&quot;</highlight><highlight class="normal">,reduced,<sp/>mpo-&gt;get_position(),<sp/>mpo-&gt;isReduced()));}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reduced;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af5765949c5a515d45526b4c266a41dd2" kindref="member">class_state_finite::get_energy_reduced</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aa51817e7304ed32716819624f87ac9eb" kindref="member">get_energy_per_site_reduced</ref>()<sp/>*<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classclass__state__finite_1aa51817e7304ed32716819624f87ac9eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aa51817e7304ed32716819624f87ac9eb" kindref="member">class_state_finite::get_energy_per_site_reduced</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>that<sp/>all<sp/>energies<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_reduced<sp/>=<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>.front()-&gt;get_reduced_energy();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>)<sp/>{mpo-&gt;get_reduced_energy()<sp/>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpo-&gt;get_reduced_energy()<sp/>!=<sp/>e_reduced){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Reduced<sp/>energy<sp/>mismatch!&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>)<sp/>{mpo-&gt;get_reduced_energy()<sp/>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpo-&gt;get_reduced_energy()<sp/>!=<sp/>e_reduced){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Reduced<sp/>energy<sp/>mismatch!&quot;</highlight><highlight class="normal">);}}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_reduced;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="classclass__state__finite_1a9705fd19761aa64139d608e3b5c335af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a9705fd19761aa64139d608e3b5c335af" kindref="member">class_state_finite::set_reduced_energy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_energy){</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a4c1654f66807fae65fa09958df37369a" kindref="member">set_reduced_energy_per_site</ref>(total_energy/<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="classclass__state__finite_1a4c1654f66807fae65fa09958df37369a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4c1654f66807fae65fa09958df37369a" kindref="member">class_state_finite::set_reduced_energy_per_site</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>site_energy){</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1aa51817e7304ed32716819624f87ac9eb" kindref="member">get_energy_per_site_reduced</ref>()<sp/>==<sp/>site_energy)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a8a5a9885a89bdc18f01ebf0c7910277c" kindref="member">clear_measurements</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ab1b6fdb3f6ea24b4ff6288ab80d67b56" kindref="member">multimpo</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a44837909b23b1dcd7c2f567999ffc25a" kindref="member">MPO_L</ref>)<sp/>mpo-&gt;set_reduced_energy(site_energy);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>:<sp/><ref refid="classclass__state__finite_1a26c82debe3ef3c9b6dd7ad1b08ecdff4" kindref="member">MPO_R</ref>)<sp/>mpo-&gt;set_reduced_energy(site_energy);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1ae1aa22d6af49f05638105b00dd5c0e28" kindref="member">tools::finite::mps::rebuild_environments</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classclass__state__finite_1a4d4870aa4095995b4d4e56fce554ab38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classclass__state__finite_1a4d4870aa4095995b4d4e56fce554ab38" kindref="member">class_state_finite::perturb_hamiltonian</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amplitude){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a8f8ac701db41968e9e5b6b8c4f6a2f7a" kindref="member">is_perturbed</ref>()<sp/>and<sp/>amplitude<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();<sp/>pos++){</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(pos).<ref refid="classclass__model__base_1a923bd3048f1b5c53bfdb831b3da2efe2" kindref="member">perturb_hamiltonian</ref>(amplitude);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>largest<sp/>coupling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>J_max_val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>J_max_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();<sp/>pos++){</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>J_i<sp/>=<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(pos).<ref refid="classclass__model__base_1aed5208f88cae90c68966c58c1b42526b" kindref="member">get_parameter_values</ref>()[1];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(J_i<sp/>&gt;<sp/>J_max_val){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_max_val<sp/>=<sp/><sp/>J_i;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_max_idx<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>we<sp/>have<sp/>the<sp/>largest<sp/>offender.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(J_max_idx).<ref refid="classclass__model__base_1a923bd3048f1b5c53bfdb831b3da2efe2" kindref="member">perturb_hamiltonian</ref>(amplitude);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1aac02262c410802ea0546cda195c34eca" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a8a5a9885a89bdc18f01ebf0c7910277c" kindref="member">clear_measurements</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1ae1aa22d6af49f05638105b00dd5c0e28" kindref="member">tools::finite::mps::rebuild_environments</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amplitude<sp/>==<sp/>0.0<sp/>and<sp/><ref refid="classclass__state__finite_1a8f8ac701db41968e9e5b6b8c4f6a2f7a" kindref="member">is_perturbed</ref>())</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;State:<sp/>Should<sp/>have<sp/>unperturbed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classclass__state__finite_1a8f8ac701db41968e9e5b6b8c4f6a2f7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classclass__state__finite_1a8f8ac701db41968e9e5b6b8c4f6a2f7a" kindref="member">class_state_finite::is_perturbed</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>perturbed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>();<sp/>pos++){</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perturbed[pos]<sp/>=<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(pos).<ref refid="classclass__model__base_1ac76b63a806bf09e1d7c888f0be4fa7c5" kindref="member">is_perturbed</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(perturbed.begin(),<sp/>perturbed.end(),<sp/><sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>elem){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elem;});</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="classclass__state__finite_1a0a708692303902d4ec7c1864332ee343" refkind="member"><highlight class="normal">std::list&lt;size_t&gt;<sp/><ref refid="classclass__state__finite_1a0a708692303902d4ec7c1864332ee343" kindref="member">class_state_finite::activate_sites</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_sites,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_sites){</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1aac02262c410802ea0546cda195c34eca" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1aa86f7cd593aaede044a403622dc0117c" kindref="member">tools::finite::multisite::generate_site_list</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,threshold,<sp/>max_sites,<sp/>min_sites);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="classclass__state__finite_1a27ca02fe2eeb1918576973124bbf7b82" refkind="member"><highlight class="normal">Eigen::DSizes&lt;long,3&gt;<sp/><ref refid="classclass__state__finite_1a27ca02fe2eeb1918576973124bbf7b82" kindref="member">class_state_finite::active_dimensions</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a762b9ee96e1f4a39a1102754def9f2c2" kindref="member">tools::finite::multisite::get_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classclass__state__finite_1ad8c573eb29da8ade2a441aba8d77d6f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ad8c573eb29da8ade2a441aba8d77d6f3" kindref="member">class_state_finite::active_problem_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a4e397d8557b04277c4893cca86003530" kindref="member">tools::finite::multisite::get_problem_size</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="classclass__state__finite_1a75c2e8572efd17c8d4bf2948f4bfebc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,3&gt;<sp/>&amp;<sp/><sp/><ref refid="classclass__state__finite_1a75c2e8572efd17c8d4bf2948f4bfebc3" kindref="member">class_state_finite::get_multitheta</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ae3ab0c250e137ac3a4533391d7ba4bbe" kindref="member">multitheta</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ae3ab0c250e137ac3a4533391d7ba4bbe" kindref="member">multitheta</ref>.value();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multi<sp/>theta...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.empty()){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>sites<sp/>on<sp/>which<sp/>to<sp/>build<sp/>multitheta&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,3&gt;<sp/>multitheta;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,3&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>){</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first){multitheta<sp/>=<sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(site).<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>();<sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(site<sp/>!=<sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(site).<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Site<sp/>mismatch<sp/>in<sp/>get_multitheta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M<sp/><sp/><sp/><sp/>=<sp/><ref refid="classclass__state__finite_1ae7d186b65eccf85489ee17c528caf955" kindref="member">get_MPS</ref>(site).<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>multitheta.dimension(0)<sp/>*<sp/>M.dimension(0);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/>=<sp/>multitheta.dimension(1);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/>=<sp/>M.dimension(2);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>multitheta</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(M,<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">Textra::idx</ref>({2},{1}))</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(<ref refid="namespace_textra_1aed08040fb74720378781c145b88c1d5a" kindref="member">Textra::array4</ref>{0,2,1,3})</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reshape(<ref refid="namespace_textra_1a11ff5da431d0a149284e51800d10c0cc" kindref="member">Textra::array3</ref>{dim0,dim1,dim2});</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multitheta<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>&amp;<sp/>L<sp/>=<sp/>get_L(active_sites.back()+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>temp<sp/>=<sp/>multitheta.contract(Textra::asDiagonal(L),<sp/>Textra::idx({2},{0}));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multi<sp/>theta...<sp/>OK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ae3ab0c250e137ac3a4533391d7ba4bbe" kindref="member">multitheta</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ae3ab0c250e137ac3a4533391d7ba4bbe" kindref="member">multitheta</ref>.value();</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="classclass__state__finite_1af4f4d5316ae5af544868ba7d94450d9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,4&gt;<sp/>&amp;<sp/><sp/><sp/><ref refid="classclass__state__finite_1af4f4d5316ae5af544868ba7d94450d9a" kindref="member">class_state_finite::get_multimpo</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ab1b6fdb3f6ea24b4ff6288ab80d67b56" kindref="member">multimpo</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ab1b6fdb3f6ea24b4ff6288ab80d67b56" kindref="member">multimpo</ref>.value();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multi<sp/>mpo...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.empty()){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>sites<sp/>on<sp/>which<sp/>to<sp/>build<sp/>multimpo&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,4&gt;<sp/>multimpo;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first){multimpo<sp/>=<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(site).<ref refid="classclass__model__base_1a0789119b3413f70affbdbc5f7b15e829" kindref="member">MPO</ref>();<sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo<sp/>=<sp/><ref refid="classclass__state__finite_1a734f869173192186681c3ee85941ddca" kindref="member">get_MPO</ref>(site).<ref refid="classclass__model__base_1a0789119b3413f70affbdbc5f7b15e829" kindref="member">MPO</ref>();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>multimpo.dimension(0);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/>=<sp/>mpo.dimension(1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/>=<sp/>multimpo.dimension(2)<sp/>*<sp/>mpo.dimension(2);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim3<sp/>=<sp/>multimpo.dimension(3)<sp/>*<sp/>mpo.dimension(3);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,4&gt;<sp/>temp(dim0,dim1,dim2,dim3);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multimpo</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(mpo,<sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">Textra::idx</ref>({1},{0}))</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(<ref refid="namespace_textra_1a3d45de3aad22e5851745e69630523d49" kindref="member">Textra::array6</ref>{0,3,1,4,2,5})</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reshape(<ref refid="namespace_textra_1aed08040fb74720378781c145b88c1d5a" kindref="member">Textra::array4</ref>{dim0,dim1,dim2,dim3});</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multimpo<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multi<sp/>mpo...<sp/>OK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ab1b6fdb3f6ea24b4ff6288ab80d67b56" kindref="member">multimpo</ref><sp/>=<sp/>multimpo;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1ab1b6fdb3f6ea24b4ff6288ab80d67b56" kindref="member">multimpo</ref>.value();</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">std::pair&lt;std::reference_wrapper&lt;const<sp/>class_environment&gt;<sp/>,<sp/>std::reference_wrapper&lt;const<sp/>class_environment&gt;&gt;</highlight></codeline>
<codeline lineno="482" refid="classclass__state__finite_1ac5430407c9ec431283ae754c0a0f0153" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite_1ac5430407c9ec431283ae754c0a0f0153" kindref="member">class_state_finite::get_multienv</ref><sp/>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<ref refid="classclass__state__finite_1a9794c32313428c0c8fac21a4d151177d" kindref="member">get_ENVL</ref>(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.front()),<sp/><ref refid="classclass__state__finite_1aac02b1c96819f608c09f39ff7862ee29" kindref="member">get_ENVR</ref>(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.back()));</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">std::pair&lt;std::reference_wrapper&lt;const<sp/>class_environment_var&gt;<sp/>,<sp/>std::reference_wrapper&lt;const<sp/>class_environment_var&gt;&gt;</highlight></codeline>
<codeline lineno="487" refid="classclass__state__finite_1a81123eedac158cbdeefccbd2bc2c530c" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite_1a81123eedac158cbdeefccbd2bc2c530c" kindref="member">class_state_finite::get_multienv2</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<ref refid="classclass__state__finite_1a2143f2bd43e90849f0b3f48401a4e17a" kindref="member">get_ENV2L</ref>(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.front()),<sp/><ref refid="classclass__state__finite_1a68322646c4cc11ea2c0ea18cd96a86c6" kindref="member">get_ENV2R</ref>(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.back()));</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="classclass__state__finite_1af91d50822b9c35f2dbe4981b96b31e90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af91d50822b9c35f2dbe4981b96b31e90" kindref="member">class_state_finite::set_truncation_error</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left_site,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>.empty()){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Resizing<sp/>truncation_error<sp/>container<sp/>to<sp/>size:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()+1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref><sp/>=<sp/>std::vector&lt;double&gt;(<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()+1,<sp/>0.0);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>[left_site<sp/>+<sp/>1]<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="classclass__state__finite_1a35a8fb259a874e194f562a31abfe4e92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af91d50822b9c35f2dbe4981b96b31e90" kindref="member">class_state_finite::set_truncation_error</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error){</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1af91d50822b9c35f2dbe4981b96b31e90" kindref="member">set_truncation_error</ref>(<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>(),error);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="classclass__state__finite_1a859e4476fd7eb650f5f9951caf034671" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">class_state_finite::get_truncation_error</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left_site)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>.empty()<sp/>or<sp/><ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>.size()<sp/>&lt;<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>()+1){</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Truncation<sp/>error<sp/>container<sp/>hasn&apos;t<sp/>been<sp/>initialized!<sp/>You<sp/>called<sp/>this<sp/>function<sp/>prematurely&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>[left_site+1];</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">class_state_finite::get_truncation_error</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">get_truncation_error</ref>(<ref refid="classclass__state__finite_1a4964c313378297c9ec876f5d7cc4e12d" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classclass__state__finite_1acecfb53fc06f5ead643afb7c2dc34d5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/><ref refid="classclass__state__finite_1acecfb53fc06f5ead643afb7c2dc34d5a" kindref="member">class_state_finite::get_truncation_errors</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5c0b07bca05603e299e39863852722d0" kindref="member">truncation_error</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classclass__state__finite_1a8a5a9885a89bdc18f01ebf0c7910277c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a8a5a9885a89bdc18f01ebf0c7910277c" kindref="member">class_state_finite::clear_measurements</ref>()</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref><sp/>=<sp/><ref refid="structclass__state__finite_1_1_measurements" kindref="compound">Measurements</ref>();</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="classclass__state__finite_1aac02262c410802ea0546cda195c34eca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aac02262c410802ea0546cda195c34eca" kindref="member">class_state_finite::clear_cache</ref>()</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref><sp/>=<sp/><ref refid="structclass__state__finite_1_1_cache" kindref="compound">Cache</ref>();</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="classclass__state__finite_1a98fccd07a3361d5d9e432e4817f92715" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a59e8655d67f6ac90de0af267f63fe855" kindref="member">class_state_finite::do_all_measurements</ref>()</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Doing<sp/>all<sp/>measurements<sp/>on<sp/>state...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a8a3ce40ce2ad16fd8ce142e9fd395bc8" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac198a39c208e3ccd5af9402510f6243e" kindref="member">tools::finite::measure::length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a0c8962096f453af0f6fdd0d84608a82c" kindref="member">bond_dimension_current</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1af66720d92c57155c910f42e03186b149" kindref="member">tools::finite::measure::bond_dimension_current</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ab7709cb1dbc33dd18d4a0b70edaeecf3" kindref="member">bond_dimension_midchain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a67ec4bcbc43bc0856e2d27935d3c11dd" kindref="member">tools::finite::measure::bond_dimension_midchain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a9997f3e429540d90b27f9064f3cc8836" kindref="member">bond_dimensions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a59439fc8cd211defcfa432a9fec296c7" kindref="member">tools::finite::measure::bond_dimensions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1aa8b41946188900f582d2b630c2826c19" kindref="member">norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">tools::finite::measure::norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a07c37d8d061f8b8dda2e3e567c3077cc" kindref="member">energy</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1af68ec1bfec44e2ebd09751dbcc46439b" kindref="member">tools::finite::measure::energy</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a11182ed066985fbb788834ac5682616d" kindref="member">energy_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ae45038e78b02e5f5307a8b618941bbd8" kindref="member">tools::finite::measure::energy_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ac09462b4c582e3b3442c870e49b93565" kindref="member">energy_variance</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1aaf6b94743b51434a613712914ee3d8a0" kindref="member">tools::finite::measure::energy_variance</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a8385794cdf61efdaf55759ca63cbaeb9" kindref="member">energy_variance_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ac2659e53bedfca1f195553d876134e37" kindref="member">tools::finite::measure::energy_variance_per_site</ref><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ad344d362f1869fb1b766865d9d86e8b4" kindref="member">spin_components</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a6d919a60c4dbc0e8476c96ea281bf386" kindref="member">tools::finite::measure::spin_components</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>automatically<sp/>measure<sp/>sx,sy<sp/>and<sp/>sz<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a22a42ad587494c414f98d0cc89a863e0" kindref="member">entanglement_entropy_current</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1ad4d342b14748aa9b6e9238a708a2ba8f" kindref="member">tools::finite::measure::entanglement_entropy_current</ref><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1a156eb9e83c52eb8508f2313ac17461ce" kindref="member">entanglement_entropy_midchain</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5da3c6001a1e7c6f3897afb3f30b3150" kindref="member">tools::finite::measure::entanglement_entropy_midchain</ref><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a7c8f002ac9065203eeb0751aad9ddcf9" kindref="member">measurements</ref>.<ref refid="structclass__state__finite_1_1_measurements_1ae809709f838bde3545f2200e05c33b56" kindref="member">entanglement_entropies</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a4515a169c43487b9dd80ed581c0d1d5e" kindref="member">tools::finite::measure::entanglement_entropies</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Doing<sp/>all<sp/>measurements<sp/>on<sp/>state...<sp/>OK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="classclass__state__finite_1ad56a434a1225baa9302e97cee2b7a50b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ad56a434a1225baa9302e97cee2b7a50b" kindref="member">class_state_finite::tag_active_sites_have_been_updated</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag)</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>tag<sp/>active<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>site:<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>[site]<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="classclass__state__finite_1a8ac57b8631243325a0db1982b75d1cb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a8ac57b8631243325a0db1982b75d1cb8" kindref="member">class_state_finite::tag_all_sites_have_been_updated</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>untag<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref><sp/>=<sp/>std::vector&lt;bool&gt;(<ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>(),tag);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classclass__state__finite_1afea9c96f1083874ea386ab73d8d93398" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1afea9c96f1083874ea386ab73d8d93398" kindref="member">class_state_finite::all_sites_updated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>update<sp/>status<sp/>on<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>std::all_of(<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.begin(),<sp/><ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.end(),<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>});</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="classclass__state__finite_1a0f3b5c030f88e4a0fbdbe5b38e49a83a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a0f3b5c030f88e4a0fbdbe5b38e49a83a" kindref="member">class_state_finite::active_sites_updated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1a003b2835aeb5f9a280efff836baf7522" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>update<sp/>status<sp/>on<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_site_ptr<sp/>=<sp/><sp/><ref refid="classclass__state__finite_1a66c09c78cbeb274e0f30c39ed45e51e5" kindref="member">site_update_tags</ref>.begin()<sp/>+<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.front();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_site_ptr<sp/><sp/>=<sp/><sp/>first_site_ptr<sp/>+<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>.size()-1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Checking<sp/>update<sp/>status<sp/>on<sp/>active<sp/>sites:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1aa21d9b309aa5ed2e3d27951005be1c35" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updated<sp/>=<sp/>std::all_of(first_site_ptr,<sp/>last_site_ptr,<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>});</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1aac8e89130f43c21749644abcd2807dba" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Active<sp/>sites<sp/>updated:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>updated);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>updated;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_state_finite.cpp"/>
  </compounddef>
</doxygen>
