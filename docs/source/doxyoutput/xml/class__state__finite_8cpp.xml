<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class__state__finite_8cpp" kind="file" language="C++">
    <compoundname>class_state_finite.cpp</compoundname>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes refid="class__state__finite_8h" local="yes">class_state_finite.h</includes>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="nmspc__iter_8h" local="no">general/nmspc_iter.h</includes>
    <includes refid="class__mps__site_8h" local="no">tensors/state/class_mps_site.h</includes>
    <includes refid="tools_2common_2fmt_8h" local="no">tools/common/fmt.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="prof_8h" local="no">tools/common/prof.h</includes>
    <includes refid="finite_2measure_8h" local="no">tools/finite/measure.h</includes>
    <includes refid="multisite_8h" local="no">tools/finite/multisite.h</includes>
    <incdepgraph>
      <node id="16">
        <label>measure/state_measure_finite.h</label>
        <link refid="state__measure__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>iterator</label>
      </node>
      <node id="25">
        <label>tools/common/fmt.h</label>
        <link refid="tools_2common_2fmt_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>tools/finite/measure.h</label>
        <link refid="finite_2measure_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>general/nmspc_iter.h</label>
        <link refid="nmspc__iter_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="19">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="27">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="14">
        <label>numeric</label>
      </node>
      <node id="26">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="20">
        <label>string</label>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="10">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>tools/finite/multisite.h</label>
        <link refid="multisite_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="17">
        <label>optional</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="29">
        <label>tools/common/prof.h</label>
        <link refid="prof_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_state_finite.cpp</label>
        <link refid="class__state__finite_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>chrono</label>
      </node>
      <node id="3">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="23">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="12">
        <label>class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="13">
        <label>config/enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-01-29.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--<sp/>(textra<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__state__finite_8h" kindref="compound">class_state_finite.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__iter_8h" kindref="compound">general/nmspc_iter.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mps__site_8h" kindref="compound">tensors/state/class_mps_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_2common_2fmt_8h" kindref="compound">tools/common/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prof_8h" kindref="compound">tools/common/prof.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2measure_8h" kindref="compound">tools/finite/measure.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="multisite_8h" kindref="compound">tools/finite/multisite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="classclass__state__finite_1a93b85bc27a56f71f080e2f8fdbee24c8" kindref="member">class_state_finite::class_state_finite</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>initialize<sp/>lists<sp/>since<sp/>we<sp/>don&apos;t<sp/>know<sp/>the<sp/>model<sp/>size<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>define<sp/>the<sp/>destructor<sp/>and<sp/>other<sp/>special<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>enclose<sp/>data<sp/>in<sp/>unique_ptr<sp/>for<sp/>this<sp/>pimpl<sp/>idiom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>unique_ptr<sp/>will<sp/>forcibly<sp/>inline<sp/>its<sp/>own<sp/>default<sp/>deleter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>follow<sp/>&quot;rule<sp/>of<sp/>five&quot;,<sp/>so<sp/>we<sp/>must<sp/>also<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>own<sp/>copy/move<sp/>ctor<sp/>and<sp/>copy/move<sp/>assignments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>has<sp/>the<sp/>side<sp/>effect<sp/>that<sp/>we<sp/>must<sp/>define<sp/>our<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator=<sp/>and<sp/>copy<sp/>assignment<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>more:<sp/>https://stackoverflow.com/questions/33212686/how-to-use-unique-ptr-with-forward-declared-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>here:<sp/><sp/>https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classclass__state__finite_1a95ff8a6f5bd1ae8122d1a28079740e97" kindref="member">class_state_finite::~class_state_finite</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="classclass__state__finite_1a93b85bc27a56f71f080e2f8fdbee24c8" kindref="member">class_state_finite::class_state_finite</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<ref refid="classclass__state__finite_1aa7fb753377987f7129d49d8701891721" kindref="member">class_state_finite::operator=</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classclass__state__finite_1a0dad9d1050a6f7ad3c7117450e7e5dfa" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite_1a93b85bc27a56f71f080e2f8fdbee24c8" kindref="member">class_state_finite::class_state_finite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;other):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>direction(other.direction),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>cache(other.cache),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>tag_normalized_sites(other.tag_normalized_sites),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>name(other.name),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>algo(other.algo),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>active_sites(other.active_sites),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>measurements(other.measurements)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.clear();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.reserve(other.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.size());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>other.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.emplace_back(std::make_unique&lt;class_mps_site&gt;(*mps));</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classclass__state__finite_1acd27402752b06bd245716d2b5a087ba2" refkind="member"><highlight class="normal"><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;<ref refid="classclass__state__finite_1aa7fb753377987f7129d49d8701891721" kindref="member">class_state_finite::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a3bc7a1bd8ed74cfc49c8238e88f11f34" kindref="member">name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a3bc7a1bd8ed74cfc49c8238e88f11f34" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a1c3042c0b53a06045d372748e76affe1" kindref="member">algo</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a1c3042c0b53a06045d372748e76affe1" kindref="member">algo</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.clear();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>other.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.emplace_back(std::make_unique&lt;class_mps_site&gt;(*mps));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classclass__state__finite_1ae22b08bd324c5c5ceea2548b93946d4c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae22b08bd324c5c5ceea2548b93946d4c" kindref="member">class_state_finite::initialize</ref>(<ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15d" kindref="member">ModelType</ref><sp/><ref refid="namespacesettings_1_1model_1a3628af587c3663ba75c2a3d6db7e16e6" kindref="member">model_type</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>state<sp/>with<sp/>{}<sp/>sites<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>,<sp/>position);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref><sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>initialize<sp/>state<sp/>with<sp/>less<sp/>than<sp/>2<sp/>sites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref><sp/>&gt;<sp/>2048)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>initialize<sp/>state<sp/>with<sp/>more<sp/>than<sp/>2048<sp/>sites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(position<sp/>&gt;=<sp/><ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>initialize<sp/>state<sp/>at<sp/>a<sp/>position<sp/>larger<sp/>than<sp/>the<sp/>number<sp/>of<sp/>sites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1model_1a3628af587c3663ba75c2a3d6db7e16e6" kindref="member">model_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15da4ccfba77ccf8015dcaa6f9315b148509" kindref="member">ModelType::ising_tf_rf</ref>:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">settings::model::ising_tf_rf::spin_dim</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15da858fa9ae925c795dfa31e8ccab44cc76" kindref="member">ModelType::ising_sdual</ref>:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/><ref refid="namespacesettings_1_1model_1_1ising__sdual_1a75153b8008a9b96417f44676ee0100a2" kindref="member">settings::model::ising_sdual::spin_dim</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15dadddf2a46d68383919ecbfac48519033a" kindref="member">ModelType::lbit</ref>:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/><ref refid="namespacesettings_1_1model_1_1lbit_1a197811e35eb6db18b2636acddf4015a5" kindref="member">settings::model::lbit::spin_dim</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.clear();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>simple<sp/>state<sp/>with<sp/>all<sp/>spins<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>M(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>),<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>L(1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>M(0,<sp/>0,<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>M(1,<sp/>0,<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>L(0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>0;<sp/>site<sp/>&lt;<sp/><ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>;<sp/>site++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.emplace_back(std::make_unique&lt;class_mps_site&gt;(M,<sp/>L,<sp/>site,<sp/>0.0,<sp/>label));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(site<sp/>==<sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.back()-&gt;set_LC(L);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.size()<sp/>!=<sp/><ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Initialized<sp/>state<sp/>with<sp/>wrong<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(position).isCenter())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Initialized<sp/>state<sp/>center<sp/>bond<sp/>at<sp/>the<sp/>wrong<sp/>position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>()<sp/>!=<sp/>position)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Initialized<sp/>state<sp/>at<sp/>the<sp/>wrong<sp/>position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref><sp/>=<sp/>std::vector&lt;bool&gt;(<ref refid="namespacesettings_1_1model_1aabf0ff2a07a4b8ae7e4141b1bde089cd" kindref="member">model_size</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tag_edge_ene_status<sp/><sp/>=<sp/>std::vector&lt;EdgeStatus&gt;<sp/>(model_size,EdgeStatus::STALE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tag_edge_var_status<sp/><sp/>=<sp/>std::vector&lt;EdgeStatus&gt;<sp/>(model_size,EdgeStatus::STALE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classclass__state__finite_1a4396e3b976d10e96fc1f00f8c1e2dadc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a4396e3b976d10e96fc1f00f8c1e2dadc" kindref="member">class_state_finite::set_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;statename)<sp/>{<sp/><ref refid="classclass__state__finite_1a3bc7a1bd8ed74cfc49c8238e88f11f34" kindref="member">name</ref><sp/>=<sp/>statename;<sp/>}</highlight></codeline>
<codeline lineno="105" refid="classclass__state__finite_1abb83259eaa9424a83af61225fb0b73a7" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classclass__state__finite_1abb83259eaa9424a83af61225fb0b73a7" kindref="member">class_state_finite::get_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a3bc7a1bd8ed74cfc49c8238e88f11f34" kindref="member">name</ref>;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classclass__state__finite_1a4fe3c071b3378cd86f44c7e0ccb3a9f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a4fe3c071b3378cd86f44c7e0ccb3a9f0" kindref="member">class_state_finite::set_algorithm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref><sp/>&amp;algo_type)<sp/>{<sp/><ref refid="classclass__state__finite_1a1c3042c0b53a06045d372748e76affe1" kindref="member">algo</ref><sp/>=<sp/>algo_type;<sp/>}</highlight></codeline>
<codeline lineno="108" refid="classclass__state__finite_1acdb743a9c84d30955c3f2ccdbcd89a62" refkind="member"><highlight class="normal"><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref><sp/><ref refid="classclass__state__finite_1acdb743a9c84d30955c3f2ccdbcd89a62" kindref="member">class_state_finite::get_algorithm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1c3042c0b53a06045d372748e76affe1" kindref="member">algo</ref>;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classclass__state__finite_1ad27778f1d88bf5045dd4a4b452604e49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ad27778f1d88bf5045dd4a4b452604e49" kindref="member">class_state_finite::set_positions</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;[pos,<sp/>mps]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>))<sp/>mps-&gt;set_position(pos);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115" refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" refkind="member"><highlight class="normal">T<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">class_state_finite::get_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.size());</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>class_state_finite::get_length&lt;double&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>class_state_finite::get_length&lt;size_t&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>class_state_finite::get_length&lt;long&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>class_state_finite::get_length&lt;int&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124" refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" refkind="member"><highlight class="normal">T<sp/><ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">class_state_finite::get_position</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;T&gt;<sp/>pos;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Found<sp/>multiple<sp/>centers:<sp/>first<sp/>center<sp/>at<sp/>{}<sp/>and<sp/>another<sp/>at<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos.value(),<sp/>mps-&gt;get_position()));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>mps-&gt;get_position&lt;T&gt;();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>center<sp/>position<sp/>was<sp/>found<sp/>then<sp/>all<sp/>sites<sp/>are<sp/>&quot;B&quot;<sp/>sites.<sp/>In<sp/>that<sp/>case,<sp/>return<sp/>-1<sp/>if<sp/>T<sp/>is<sp/>signed,<sp/>otherwise<sp/>throw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_signed_v&lt;T&gt;)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>center<sp/>position<sp/>in<sp/>current<sp/>state:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a01d3c323d97905e8f2b3da7c6289e408" kindref="member">get_labels</ref>()));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos.value();</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>class_state_finite::get_position&lt;size_t&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>class_state_finite::get_position&lt;long&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classclass__state__finite_1a6e6d1576289d692e93f1cd9b28aa082f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a6e6d1576289d692e93f1cd9b28aa082f" kindref="member">class_state_finite::find_largest_chi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*max_element(std::begin(<ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>),<sp/>std::end(<ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>));</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">class_state_finite::get_direction</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref>;<sp/>}</highlight></codeline>
<codeline lineno="149" refid="classclass__state__finite_1a01d3c323d97905e8f2b3da7c6289e408" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="classclass__state__finite_1a01d3c323d97905e8f2b3da7c6289e408" kindref="member">class_state_finite::get_labels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>labels;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>labels.reserve(<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>labels.emplace_back(mps-&gt;get_label());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>labels;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">class_state_finite::flip_direction</ref>()<sp/>{<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>*=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classclass__state__finite_1a565799aa41e80aea21140dbdab569c14" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__state__finite_1a565799aa41e80aea21140dbdab569c14" kindref="member">class_state_finite::dimensions_1site</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>get_position&lt;long&gt;();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classclass__state__finite_1afee443b8c1ffb89ac25f92d95e4b0690" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__state__finite_1afee443b8c1ffb89ac25f92d95e4b0690" kindref="member">class_state_finite::dimensions_2site</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>3&gt;<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>{};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/>=<sp/>get_position&lt;long&gt;();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posL<sp/>=<sp/>std::clamp&lt;long&gt;(pos,<sp/>0,<sp/>get_length&lt;long&gt;()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posR<sp/>=<sp/>std::clamp&lt;long&gt;(pos<sp/>+<sp/>1,<sp/>0,<sp/>get_length&lt;long&gt;()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpsL<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(posL);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpsR<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(posR);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mpsL.get_chiL();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mpsR.get_chiR();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[0]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>posL<sp/>!=<sp/>posR<sp/>?<sp/>mpsL.spin_dim()<sp/>*<sp/>mpsR.spin_dim()<sp/>:<sp/>mpsL.spin_dim();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classclass__state__finite_1a1e62ac17530d3658e3d00c4af44a3e9c" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__state__finite_1a1e62ac17530d3658e3d00c4af44a3e9c" kindref="member">class_state_finite::dimensions_nsite</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">tools::finite::multisite::get_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);<sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classclass__state__finite_1a5b078146227d5362152c038fe1a0d850" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5b078146227d5362152c038fe1a0d850" kindref="member">class_state_finite::size_1site</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/><ref refid="classclass__state__finite_1a565799aa41e80aea21140dbdab569c14" kindref="member">dimensions_1site</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims[0]<sp/>*<sp/>dims[1]<sp/>*<sp/>dims[2];</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classclass__state__finite_1a0effab5a6872e3f9687c1b4c290ca7f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a0effab5a6872e3f9687c1b4c290ca7f5" kindref="member">class_state_finite::size_2site</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/><ref refid="classclass__state__finite_1afee443b8c1ffb89ac25f92d95e4b0690" kindref="member">dimensions_2site</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims[0]<sp/>*<sp/>dims[1]<sp/>*<sp/>dims[2];</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classclass__state__finite_1ae414336fd8247c08999d3a5bb8116f4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae414336fd8247c08999d3a5bb8116f4e" kindref="member">class_state_finite::size_nsite</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/><ref refid="classclass__state__finite_1a1e62ac17530d3658e3d00c4af44a3e9c" kindref="member">dimensions_nsite</ref>();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims[0]<sp/>*<sp/>dims[1]<sp/>*<sp/>dims[2];</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classclass__state__finite_1aeddc7bc70f553dbeb53ff7d6aa8c1e3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aeddc7bc70f553dbeb53ff7d6aa8c1e3a" kindref="member">class_state_finite::position_is_the_middle</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>+<sp/>1<sp/>==<sp/>get_length&lt;long&gt;()<sp/>/<sp/>2<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="197" refid="classclass__state__finite_1a102a0f8961c46707afd775706066f2ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a102a0f8961c46707afd775706066f2ed" kindref="member">class_state_finite::position_is_the_middle_any_direction</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>+<sp/>1<sp/>==<sp/>get_length&lt;long&gt;()<sp/>/<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classclass__state__finite_1aa64f2ea42551053a8ba011cd5ef606b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aa64f2ea42551053a8ba011cd5ef606b9" kindref="member">class_state_finite::position_is_outward_edge_left</ref>([[maybe_unused]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nsite<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>&lt;=<sp/>-1<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>all<sp/>sites<sp/>are<sp/>B&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>==<sp/>0<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>-1<sp/>and<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>().<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>();<sp/></highlight><highlight class="comment">//<sp/>left-most<sp/>site<sp/>is<sp/>a<sp/>an<sp/>AC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classclass__state__finite_1aacf480078f03e2f731525c73cf144d37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aacf480078f03e2f731525c73cf144d37" kindref="member">class_state_finite::position_is_outward_edge_right</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>&gt;=<sp/>get_length&lt;long&gt;()<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nsite)<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classclass__state__finite_1a6593cb01ff689f39b38b0e5e40eae44f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a6593cb01ff689f39b38b0e5e40eae44f" kindref="member">class_state_finite::position_is_outward_edge</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aa64f2ea42551053a8ba011cd5ef606b9" kindref="member">position_is_outward_edge_left</ref>(nsite)<sp/>or<sp/><ref refid="classclass__state__finite_1aacf480078f03e2f731525c73cf144d37" kindref="member">position_is_outward_edge_right</ref>(nsite);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="classclass__state__finite_1af518b023eb84f2d10419ea91ea6b0086" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af518b023eb84f2d10419ea91ea6b0086" kindref="member">class_state_finite::position_is_inward_edge_left</ref>([[maybe_unused]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>==<sp/>0<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>first<sp/>site<sp/>is<sp/>an<sp/>AC<sp/>going<sp/>to<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classclass__state__finite_1a2c713cd630350b7e4f520bcd3662ee52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a2c713cd630350b7e4f520bcd3662ee52" kindref="member">class_state_finite::position_is_inward_edge_right</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>&gt;=<sp/>get_length&lt;long&gt;()<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nsite)<sp/>and<sp/><ref refid="classclass__state__finite_1ac9367df7afc52021cb3fd5eeaefac3b5" kindref="member">direction</ref><sp/>==<sp/>-1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classclass__state__finite_1ae534d298a65fde25c043aedf9b009392" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ae534d298a65fde25c043aedf9b009392" kindref="member">class_state_finite::position_is_inward_edge</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsite)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1af518b023eb84f2d10419ea91ea6b0086" kindref="member">position_is_inward_edge_left</ref>(nsite)<sp/>or<sp/><ref refid="classclass__state__finite_1a2c713cd630350b7e4f520bcd3662ee52" kindref="member">position_is_inward_edge_right</ref>(nsite);<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">class_state_finite::position_is_at</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>==<sp/>pos;<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classclass__state__finite_1aa5f983724f973bba19e89c0204e05a00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">class_state_finite::position_is_at</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>==<sp/>pos<sp/>and<sp/><ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>dir;<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classclass__state__finite_1a59d68c43313f20891f5b1bf69c2b4bd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">class_state_finite::position_is_at</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCenter)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>==<sp/>pos<sp/>and<sp/><ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>dir<sp/>and<sp/>(pos<sp/>&gt;=<sp/>0)<sp/>==<sp/>isCenter;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a177700ddab714b1f831b53d6fd46adf8" kindref="member">class_state_finite::has_center_point</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_position&lt;long&gt;()<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classclass__state__finite_1a2a129eba438a10f58782a74883271a07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a2a129eba438a10f58782a74883271a07" kindref="member">class_state_finite::is_real</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mps_real<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>mps_real<sp/>=<sp/>mps_real<sp/>and<sp/>mps-&gt;is_real();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mps_real;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classclass__state__finite_1a5a269545dbf5192eaa299760d3efdbf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5a269545dbf5192eaa299760d3efdbf6" kindref="member">class_state_finite::has_nan</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;has_nan())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classclass__state__finite_1a7f2fa97dc037b0b817b51e7aa9e38460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a7f2fa97dc037b0b817b51e7aa9e38460" kindref="member">class_state_finite::assert_validity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>!=<sp/>mps-&gt;get_position&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;())</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;State<sp/>is<sp/>corrupted:<sp/>position<sp/>mismatch:<sp/>expected<sp/>position<sp/>{}<sp/>!=<sp/>mps<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/>mps-&gt;get_position()));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/><ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>mps-&gt;assert_validity();</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__state__finite_1a971fa45cb1a3df3a0573b52d0c35c2b3" kindref="member">class_state_finite::midchain_bond</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>get_position&lt;long&gt;();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>(get_length&lt;long&gt;()<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>cnt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt).<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;<sp/>cnt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt<sp/>+<sp/>1).<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt).<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__state__finite_1aa429713d01dbd7d72056bb28914ca312" kindref="member">class_state_finite::current_bond</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>()).<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>();<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="265" refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(T<sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_signed_v&lt;T&gt;)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_mps_site(pos):<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>get_length&lt;T&gt;())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_mps_site(pos):<sp/>pos<sp/>out<sp/>of<sp/>range:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_ptr<sp/>=<sp/>*std::next(<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps_ptr-&gt;get_position&lt;T&gt;()<sp/>!=<sp/>pos)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::range_error(fmt::format(</highlight><highlight class="stringliteral">&quot;get_mps_site(pos):<sp/>mismatch<sp/>pos<sp/>{}<sp/>!=<sp/>mps<sp/>pos<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/>mps_ptr-&gt;get_position&lt;T&gt;()));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*mps_ptr;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="278" refid="classclass__state__finite_1aae8885ec8cc1f5815c441b9c970e9f69" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(T<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::as_const(*this).get_mps_site&lt;T&gt;(pos));</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>());<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classclass__state__finite_1a0fb2578f010f53bd57ae373ba643da31" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">class_state_finite::get_mps_site</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>());<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classclass__state__finite_1acb84a22703c0f6a517469bf2d18ac6da" refkind="member"><highlight class="normal">std::vector&lt;class_mps_site&gt;<sp/><ref refid="classclass__state__finite_1acb84a22703c0f6a517469bf2d18ac6da" kindref="member">class_state_finite::get_mps_sites</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;sites)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;class_mps_site&gt;<sp/>mps_at_sites;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites)<sp/>mps_at_sites.emplace_back(<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(site));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mps_at_sites;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293" refid="classclass__state__finite_1a4da8198f2ea44977bbb5c64e448610ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a4da8198f2ea44977bbb5c64e448610ba" kindref="member">class_state_finite::set_mps_sites</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;class_mps_site&gt;<sp/>&amp;new_mps)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>new_mps)<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(mps.get_position())<sp/>=<sp/>mps;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="classclass__state__finite_1ae5341703fe4dcfac1dafffa52498818f" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__state__finite_1ae5341703fe4dcfac1dafffa52498818f" kindref="member">class_state_finite::active_dimensions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">tools::finite::multisite::get_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="classclass__state__finite_1a6dd63c4993f173373d4524bcbed2a366" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a6dd63c4993f173373d4524bcbed2a366" kindref="member">class_state_finite::active_problem_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" kindref="member">tools::finite::multisite::get_problem_size</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classclass__state__finite_1a3313c00be1341e4abbc20f531a27a1d2" refkind="member"><highlight class="normal">std::vector&lt;long&gt;<sp/><ref refid="classclass__state__finite_1ab10b938ce1f292e086391de450694bce" kindref="member">class_state_finite::get_spin_dims</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;sites)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>sites<sp/>on<sp/>which<sp/>to<sp/>collect<sp/>spin<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/>dims;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.reserve(sites.size());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites)<sp/>{<sp/>dims.emplace_back(<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(site).<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>());<sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dims;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classclass__state__finite_1ab10b938ce1f292e086391de450694bce" refkind="member"><highlight class="normal">std::vector&lt;long&gt;<sp/><ref refid="classclass__state__finite_1ab10b938ce1f292e086391de450694bce" kindref="member">class_state_finite::get_spin_dims</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ab10b938ce1f292e086391de450694bce" kindref="member">get_spin_dims</ref>(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);<sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="classclass__state__finite_1a49f623f81789f2211bd18a05b59cf661" refkind="member"><highlight class="normal">Eigen::Tensor&lt;class_state_finite::Scalar,<sp/>3&gt;<sp/><ref refid="classclass__state__finite_1a46120dcbd2487ac2d11d7278cc66b6cd" kindref="member">class_state_finite::get_multisite_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;sites)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>sites<sp/>on<sp/>which<sp/>to<sp/>build<sp/>a<sp/>multisite<sp/>mps<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites<sp/>==<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref><sp/>and<sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref>.value();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multisite<sp/>mps<sp/>tensor<sp/>with<sp/>sites<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sites);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_mps<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_mps&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>multisite_mps;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffle_idx<sp/><sp/>=<sp/><ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{0,<sp/>2,<sp/>1,<sp/>3};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contract_idx<sp/>=<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1});</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dims;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(site).<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;M<sp/><sp/><sp/><sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(site).<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim0<sp/>=<sp/>multisite_mps.dimension(0)<sp/>*<sp/>M.dimension(0);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim1<sp/>=<sp/>multisite_mps.dimension(1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim2<sp/>=<sp/>M.dimension(2);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dims<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{dim0,<sp/>dim1,<sp/>dim2};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(new_dims);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>multisite_mps.contract(M,<sp/>contract_idx).shuffle(shuffle_idx).reshape(new_dims);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.front()<sp/>!=<sp/>0<sp/>and<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.front()).<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>all<sp/>sites<sp/>are<sp/>&quot;B&quot;<sp/>and<sp/>we<sp/>need<sp/>to<sp/>prepend<sp/>the<sp/>the<sp/>&quot;L&quot;<sp/>from<sp/>the<sp/>site<sp/>on<sp/>the<sp/>left<sp/>to<sp/>make<sp/>a<sp/>normalized<sp/>multisite<sp/>mps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_left<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.front()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;L_left<sp/><sp/><sp/>=<sp/>mps_left.isCenter()<sp/>?<sp/>mps_left.get_LC()<sp/>:<sp/>mps_left.get_L();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L_left.dimension(0)<sp/>!=<sp/>multisite_mps.dimension(1))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatching<sp/>dimensions:<sp/>L_left<sp/>{}<sp/>|<sp/>multisite_mps<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>L_left.dimensions(),<sp/>multisite_mps.dimensions()));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(multisite_mps.dimension(0),<sp/>L_left.dimension(0),<sp/>multisite_mps.dimension(2));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(L_left).contract(multisite_mps,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({1},<sp/>{1})).shuffle(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{1,<sp/>0,<sp/>2});</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.back()<sp/>&lt;<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>-<sp/>1<sp/>and<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.back()).<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>all<sp/>sites<sp/>are<sp/>&quot;A&quot;<sp/>and<sp/>we<sp/>need<sp/>to<sp/>append<sp/>the<sp/>the<sp/>&quot;L&quot;<sp/>from<sp/>the<sp/>site<sp/>on<sp/>the<sp/>right<sp/>to<sp/>make<sp/>a<sp/>normalized<sp/>multisite<sp/>mps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_right<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.back()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;L_right<sp/><sp/><sp/>=<sp/>mps_right.get_L();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L_right.dimension(0)<sp/>!=<sp/>multisite_mps.dimension(2))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatching<sp/>dimensions:<sp/>L_right<sp/>{}<sp/>|<sp/>multisite_mps<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>L_right.dimensions(),<sp/>multisite_mps.dimensions()));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.resize(multisite_mps.dimension(0),<sp/>multisite_mps.dimension(1),<sp/>L_right.dimension(0));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>multisite_mps.contract(<ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(L_right),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1}));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>t_mps.toc();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>norm<sp/>of<sp/>the<sp/>tensor<sp/>on<sp/>debug<sp/>builds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/><sp/>=<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">Textra::norm</ref>(multisite_mps.contract(multisite_mps.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2})));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(site);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;M<sp/><sp/><sp/>=<sp/>mps.get_M();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;critical(</highlight><highlight class="stringliteral">&quot;{}({})<sp/>norm:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>mps.get_label(),<sp/>site,<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(M).norm());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.front()<sp/>!=<sp/>0<sp/>and<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.front()).<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>all<sp/>sites<sp/>are<sp/>&quot;B&quot;<sp/>and<sp/>we<sp/>need<sp/>to<sp/>prepend<sp/>the<sp/>the<sp/>&quot;L&quot;<sp/>from<sp/>the<sp/>site<sp/>on<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_left<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(sites.front()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;L_left<sp/><sp/><sp/>=<sp/>mps_left.isCenter()<sp/>?<sp/>mps_left.get_LC()<sp/>:<sp/>mps_left.get_L();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(L_left).contract(multisite_mps,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({1},<sp/>{1})).shuffle(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{1,<sp/>0,<sp/>2});</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps<sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">Textra::norm</ref>(multisite_mps.contract(multisite_mps.conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2})));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;critical(</highlight><highlight class="stringliteral">&quot;Norm<sp/>after<sp/>adding<sp/>L<sp/>to<sp/>B<sp/>from<sp/>the<sp/>left:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Multisite<sp/>mps<sp/>for<sp/>sites<sp/>{}<sp/>is<sp/>not<sp/>normalized.<sp/>Norm<sp/>=<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>sites,<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>multisite_mps;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classclass__state__finite_1a46120dcbd2487ac2d11d7278cc66b6cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;class_state_finite::Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__finite_1a46120dcbd2487ac2d11d7278cc66b6cd" kindref="member">class_state_finite::get_multisite_mps</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref>.value();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref><sp/>=<sp/><ref refid="classclass__state__finite_1a46120dcbd2487ac2d11d7278cc66b6cd" kindref="member">get_multisite_mps</ref>(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref>.<ref refid="structclass__state__finite_1_1_cache_1a91f2a6d4ce2ea73129e98532d19b1fb4" kindref="member">multisite_mps</ref>.value();</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="classclass__state__finite_1ada7fffb20d78081d0403420b903c7fd6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ada7fffb20d78081d0403420b903c7fd6" kindref="member">class_state_finite::set_truncation_error</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" kindref="member">set_truncation_error</ref>(error);<sp/>}</highlight></codeline>
<codeline lineno="391" refid="classclass__state__finite_1a35a8fb259a874e194f562a31abfe4e92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ada7fffb20d78081d0403420b903c7fd6" kindref="member">class_state_finite::set_truncation_error</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{<sp/><ref refid="classclass__state__finite_1ada7fffb20d78081d0403420b903c7fd6" kindref="member">set_truncation_error</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>(),<sp/>error);<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classclass__state__finite_1aebd3a34c668f4b0c3ac23748402786b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aebd3a34c668f4b0c3ac23748402786b9" kindref="member">class_state_finite::set_truncation_error_LC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>=<sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>mps.isCenter())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;mps<sp/>at<sp/>current<sp/>position<sp/>is<sp/>not<sp/>a<sp/>center&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>mps.set_truncation_error_LC(error);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="classclass__state__finite_1a7ea3e83584cbab7a0a057c023d2ccb29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">class_state_finite::get_truncation_error</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>();<sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">class_state_finite::get_truncation_error</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>get_position&lt;long&gt;();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classclass__state__finite_1ac0e3da8e8c4cefc506775d2090cd1c2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ac0e3da8e8c4cefc506775d2090cd1c2c" kindref="member">class_state_finite::get_truncation_error_LC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>()).<ref refid="classclass__mps__site_1afc16104aba7efa1893cd417653fccf1c" kindref="member">get_truncation_error_LC</ref>();<sp/>}</highlight></codeline>
<codeline lineno="410" refid="classclass__state__finite_1a82cd097602ba95c01aba83ebda814200" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a82cd097602ba95c01aba83ebda814200" kindref="member">class_state_finite::get_truncation_error_midchain</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>get_position&lt;long&gt;();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>(get_length&lt;long&gt;()<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>cnt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt).<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;<sp/>cnt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt<sp/>+<sp/>1).<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(cnt).<ref refid="classclass__mps__site_1afc16104aba7efa1893cd417653fccf1c" kindref="member">get_truncation_error_LC</ref>();</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="classclass__state__finite_1a3acedac1b97b8f6d56113c90f1399609" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="classclass__state__finite_1a3acedac1b97b8f6d56113c90f1399609" kindref="member">class_state_finite::get_truncation_errors</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">tools::finite::measure::truncation_errors</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="419" refid="classclass__state__finite_1a5591244ade0473e2f8b560c45749c17b" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="classclass__state__finite_1a5591244ade0473e2f8b560c45749c17b" kindref="member">class_state_finite::get_truncation_errors_active</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.reserve(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.size());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pos<sp/>:<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>only<sp/>interested<sp/>in<sp/>the<sp/>truncation<sp/>on<sp/>bonds<sp/>that<sp/>are<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>operating<sp/>on<sp/>active_sites.<sp/>This<sp/>excludes<sp/>the<sp/>outer<sp/>bonds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).isCenter())<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(<ref refid="classclass__state__finite_1ac0e3da8e8c4cefc506775d2090cd1c2c" kindref="member">get_truncation_error_LC</ref>());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.front())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.back())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.emplace_back(<ref refid="classclass__state__finite_1a53291a0b9ca06d09275ae757cfcd719b" kindref="member">get_truncation_error</ref>(pos));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="classclass__state__finite_1a9edc0481fe3d71e5a46b92babe7f8819" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a9edc0481fe3d71e5a46b92babe7f8819" kindref="member">class_state_finite::num_sites_truncated</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>truncation_threshold)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref><sp/>=<sp/><ref refid="classclass__state__finite_1a3acedac1b97b8f6d56113c90f1399609" kindref="member">get_truncation_errors</ref>();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trunc_bond_count<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::count_if(<ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.begin(),<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1aceff8b820375b35c3bf41a0bdfc4fb" kindref="member">truncation_errors</ref>.end(),<sp/>[truncation_threshold](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val)<sp/>{<sp/>return<sp/>val<sp/>&gt;<sp/>truncation_threshold;<sp/>}));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trunc_bond_count;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classclass__state__finite_1a20b53df188bb9a2401a714ad3bb72604" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a20b53df188bb9a2401a714ad3bb72604" kindref="member">class_state_finite::num_bonds_reached_chi</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_level)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bond_dims<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bonds_at_lim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::count_if(bond_dims.begin(),<sp/>bond_dims.end(),<sp/>[chi_level](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val)<sp/>{<sp/>return<sp/>val<sp/>&gt;=<sp/>chi_level;<sp/>}));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bonds_at_lim;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="classclass__state__finite_1a81beeaca8a37c224a7bd5f3715357347" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a81beeaca8a37c224a7bd5f3715357347" kindref="member">class_state_finite::is_bond_limited</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>truncation_threshold)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a9edc0481fe3d71e5a46b92babe7f8819" kindref="member">num_sites_truncated</ref>(truncation_threshold)<sp/>&gt;<sp/>0<sp/>or<sp/><ref refid="classclass__state__finite_1a20b53df188bb9a2401a714ad3bb72604" kindref="member">num_bonds_reached_chi</ref>(chi_lim)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">class_state_finite::clear_measurements</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5e" kindref="member">LogPolicy</ref><sp/>logPolicy)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logPolicy<sp/>==<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1e23852820b9154316c7c06e2b7ba051" kindref="member">LogPolicy::NORMAL</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Clearing<sp/>state<sp/>measurements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1aa6500ac30c212c000c7ed4b38b9371e0" kindref="member">measurements</ref><sp/>=<sp/><ref refid="structstate__measure__finite" kindref="compound">state_measure_finite</ref>();</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">class_state_finite::clear_cache</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5e" kindref="member">LogPolicy</ref><sp/>logPolicy)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logPolicy<sp/>==<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1e23852820b9154316c7c06e2b7ba051" kindref="member">LogPolicy::NORMAL</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Clearing<sp/>state<sp/>cache&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a5d8c673164ccbc3250a286761dc0b7ae" kindref="member">cache</ref><sp/>=<sp/><ref refid="structclass__state__finite_1_1_cache" kindref="compound">Cache</ref>();</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classclass__state__finite_1a98fccd07a3361d5d9e432e4817f92715" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a98fccd07a3361d5d9e432e4817f92715" kindref="member">class_state_finite::do_all_measurements</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a330b5fd06f76cae1b9cb5835412f343f" kindref="member">tools::finite::measure::do_all_measurements</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="classclass__state__finite_1a194a18bab95441979621cc96904ecfc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a194a18bab95441979621cc96904ecfc2" kindref="member">class_state_finite::tag_active_sites_normalized</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>tag<sp/>active<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>[site]<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="classclass__state__finite_1aac20894e82fc4759efd31d0606536c7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aac20894e82fc4759efd31d0606536c7e" kindref="member">class_state_finite::tag_all_sites_normalized</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>untag<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref><sp/>=<sp/>std::vector&lt;bool&gt;(<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>(),<sp/>tag);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="classclass__state__finite_1aeff06c13bbd5f3a8dd6c5c0d1c85a6f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aeff06c13bbd5f3a8dd6c5c0d1c85a6f5" kindref="member">class_state_finite::tag_site_normalized</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>untag<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>[pos]<sp/>=<sp/>tag;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="classclass__state__finite_1a012ade3589dd6a8c942cb422af20e7d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a012ade3589dd6a8c942cb422af20e7d8" kindref="member">class_state_finite::is_normalized_on_all_sites</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>normalization<sp/>status<sp/>on<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Checking<sp/>normalization<sp/>status<sp/>on<sp/>all<sp/>sites&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.begin(),<sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.end(),<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v;<sp/>});</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="classclass__state__finite_1aad264b7abf53b1fc18811daead5b5f95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1aad264b7abf53b1fc18811daead5b5f95" kindref="member">class_state_finite::is_normalized_on_any_sites</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>normalization<sp/>status<sp/>on<sp/>any<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.begin(),<sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.end(),<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v;<sp/>});</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="classclass__state__finite_1ab851fc8e14821b7dfdbce8b4f0f623ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1ab851fc8e14821b7dfdbce8b4f0f623ee" kindref="member">class_state_finite::is_normalized_on_active_sites</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>normalization<sp/>status<sp/>on<sp/>active<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_site_ptr<sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.front()));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_site_ptr<sp/><sp/>=<sp/>std::next(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.begin(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.back()));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Checking<sp/>normalization<sp/>status<sp/>on<sp/>active<sp/>sites:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized<sp/>=<sp/>std::all_of(first_site_ptr,<sp/>last_site_ptr,<sp/>[](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>});</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Active<sp/>sites<sp/>normalized:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>normalized);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normalized;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classclass__state__finite_1abce27af7c2a6688287e826aaed719491" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1abce27af7c2a6688287e826aaed719491" kindref="member">class_state_finite::is_normalized_on_non_active_sites</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>.size()<sp/>!=<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>check<sp/>update<sp/>status<sp/>on<sp/>all<sp/>sites,<sp/>size<sp/>mismatch<sp/>in<sp/>site<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite_1a012ade3589dd6a8c942cb422af20e7d8" kindref="member">is_normalized_on_all_sites</ref>();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Checking<sp/>normalization<sp/>status<sp/>on<sp/>non-active<sp/>sites&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/><ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>();<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.begin(),<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.end(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>)<sp/>==<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.end()<sp/>and<sp/>not<sp/><ref refid="classclass__state__finite_1a47e66055bc6c8e6fdaee3d6aa0e17dd2" kindref="member">tag_normalized_sites</ref>[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classclass__state__finite_1aa113c936862a10d6cbbd90b8f12c563f" refkind="member"><highlight class="normal">std::vector&lt;size_t&gt;<sp/><ref refid="classclass__state__finite_1aa113c936862a10d6cbbd90b8f12c563f" kindref="member">class_state_finite::get_active_ids</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>ids.reserve(<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.size());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pos<sp/>:<sp/><ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>)<sp/>ids.emplace_back(<ref refid="classclass__state__finite_1a1151fd3728fcd18ecbe87e1fcba011bd" kindref="member">get_mps_site</ref>(pos).get_unique_id());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ids;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tensors/state/class_state_finite.cpp"/>
  </compounddef>
</doxygen>
