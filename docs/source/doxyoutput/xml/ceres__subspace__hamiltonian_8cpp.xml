<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ceres__subspace__hamiltonian_8cpp" kind="file" language="C++">
    <compoundname>ceres_subspace_hamiltonian.cpp</compoundname>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes refid="class__edges__finite_8h" local="no">tensors/edges/class_edges_finite.h</includes>
    <includes refid="class__model__finite_8h" local="no">tensors/model/class_model_finite.h</includes>
    <includes refid="contraction_8h" local="no">tools/common/contraction.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="prof_8h" local="no">tools/common/prof.h</includes>
    <includes refid="opt-internal_8h" local="no">tools/finite/opt-internal/opt-internal.h</includes>
    <includes refid="opt__mps_8h" local="no">tools/finite/opt_mps.h</includes>
    <incdepgraph>
      <node id="19">
        <label>limits</label>
      </node>
      <node id="30">
        <label>tools/common/contraction.h</label>
        <link refid="contraction_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="42">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="31">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>numeric</label>
      </node>
      <node id="32">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="12">
        <label>tensors/edges/class_edges_finite.h</label>
        <link refid="class__edges__finite_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>tensors/model/class_model_finite.h</label>
        <link refid="class__model__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="10">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>class_env_pair.h</label>
        <link refid="class__env__pair_8h"/>
      </node>
      <node id="24">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="28">
        <label>math/svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="29">
        <label>fmt/core.h</label>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="26">
        <label>optional</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="17">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>tools/common/prof.h</label>
        <link refid="prof_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="23">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="37">
        <label>tools/finite/opt-internal/opt-internal.h</label>
        <link refid="opt-internal_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp</label>
        <link refid="ceres__subspace__hamiltonian_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>tools/finite/opt_mps.h</label>
        <link refid="opt__mps_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>chrono</label>
      </node>
      <node id="20">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="3">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>tools/finite/opt.h</label>
        <link refid="finite_2opt_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="41">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ceres/gradient_problem_solver.h</label>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="14">
        <label>config/enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ceres__subspace__hamiltonian_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using Scalar =  std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" line="17" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" prot="public" static="no">
        <type>double</type>
        <definition>using real =  double</definition>
        <argsstring></argsstring>
        <name>real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" line="18" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ceres__subspace__hamiltonian_8cpp_1ad9a894aaf835cafae89a187e0e70faf3" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using cplx =  std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>cplx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" line="19" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ceres__subspace__hamiltonian_8cpp_1a40b2d9aeb2f5feca6243f2cd90c93942" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using MatrixType =  Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" line="21" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ceres__subspace__hamiltonian_8cpp_1ab45ed389a2550cbd5ab11019804808ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void shift_mpo_energy</definition>
        <argsstring>(Eigen::Tensor&lt; Scalar, 4 &gt; &amp;mpo, double energy_shift)</argsstring>
        <name>shift_mpo_energy</name>
        <param>
          <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>mpo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>energy_shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" line="24" column="6" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp" bodystart="24" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-10-09.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--<sp/>(textra<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__edges__finite_8h" kindref="compound">tensors/edges/class_edges_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__model__finite_8h" kindref="compound">tensors/model/class_model_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="contraction_8h" kindref="compound">tools/common/contraction.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prof_8h" kindref="compound">tools/common/prof.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt-internal_8h" kindref="compound">tools/finite/opt-internal/opt-internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="opt__mps_8h" kindref="compound">tools/finite/opt_mps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="ceres__subspace__hamiltonian_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/>std::complex&lt;double&gt;;</highlight></codeline>
<codeline lineno="18" refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">real</ref><sp/><sp/><sp/>=<sp/>double;</highlight></codeline>
<codeline lineno="19" refid="ceres__subspace__hamiltonian_8cpp_1ad9a894aaf835cafae89a187e0e70faf3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="math_2svd_2svd_8cpp_1ad9a894aaf835cafae89a187e0e70faf3" kindref="member">cplx</ref><sp/><sp/><sp/>=<sp/>std::complex&lt;double&gt;;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21" refid="ceres__subspace__hamiltonian_8cpp_1a40b2d9aeb2f5feca6243f2cd90c93942" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType</ref><sp/>=<sp/>Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="24" refid="ceres__subspace__hamiltonian_8cpp_1ab45ed389a2550cbd5ab11019804808ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1ab45ed389a2550cbd5ab11019804808ad" kindref="member">shift_mpo_energy</ref>(Eigen::Tensor&lt;Scalar,4&gt;<sp/>&amp;mpo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>shift:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>energy_shift);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>MPO<sp/>is<sp/>a<sp/>rank4<sp/>tensor<sp/>ijkl<sp/>where<sp/>the<sp/>first<sp/>2<sp/>ij<sp/>indices<sp/>draw<sp/>a<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rank2<sp/>matrix,<sp/>where<sp/>each<sp/>element<sp/>is<sp/>also<sp/>a<sp/>matrix<sp/>with<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determined<sp/>by<sp/>the<sp/>last<sp/>2<sp/>indices<sp/>kl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>shift<sp/>an<sp/>MPO,<sp/>all<sp/>we<sp/>do<sp/>is<sp/>subtract<sp/>a<sp/>diagonal<sp/>matrix<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>botton<sp/>left<sp/>corner<sp/>of<sp/>the<sp/>ij-matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>extents<sp/>and<sp/>handy<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>mpo.dimensions();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>offset4{shape[0]<sp/>-<sp/>1,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>extent4{1,<sp/>1,<sp/>shape[2],<sp/>shape[3]};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/>extent2{shape[2],<sp/>shape[3]};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/>sigma_Id<sp/>=<sp/>energy_shift<sp/>*<sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;Scalar&gt;::Identity</ref>(extent2[0],<sp/>extent2[1]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::TensorMap&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>sigma_Id_map(sigma_Id.data(),<sp/>sigma_Id.rows(),<sp/>sigma_Id.cols());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>mpo.slice(offset4,<sp/>extent4).reshape(extent2)<sp/>-=<sp/>sigma_Id_map;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;T&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a0760f44e7374265bcb7521e6a67a94db" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;env<sp/>=<sp/>edges.<ref refid="classclass__edges__finite_1a8d8cdfb8e87717d81193100ade30eb0a" kindref="member">get_multisite_ene_blk</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpo<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_multisite_mpo();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(energy_shift<sp/>!=<sp/>0.0)<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1ab45ed389a2550cbd5ab11019804808ad" kindref="member">shift_mpo_energy</ref>(mpo,<sp/>energy_shift);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multisite<sp/>hamiltonian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_ham<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_ham&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>mpo.dimension(2);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/>=<sp/>env.L.dimension(0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/>=<sp/>env.R.dimension(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,<sp/>6&gt;<sp/>ham(dim0,<sp/>dim1,<sp/>dim2,<sp/>dim0,<sp/>dim1,<sp/>dim2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>ham.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.L.contract(mpo,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{0})).contract(env.R,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{2})).shuffle(<ref refid="namespace_textra_1accfb4fc520dc9a420a8a272f0d31c613" kindref="member">Textra::array6</ref>{2,<sp/>0,<sp/>4,<sp/>3,<sp/>1,<sp/>5});</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>ham.dimension(0)<sp/>*<sp/>ham.dimension(1)<sp/>*<sp/>ham.dimension(2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>ham.dimension(3)<sp/>*<sp/>ham.dimension(4)<sp/>*<sp/>ham.dimension(5);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>dim0<sp/>*<sp/>dim1<sp/>*<sp/>dim2;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rows<sp/>!=<sp/>size)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>multisite<sp/>hamiltonian<sp/>rows<sp/>(dim0*dim1*dim2)<sp/>and<sp/>size:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>cols,<sp/>size));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cols<sp/>!=<sp/>size)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>multisite<sp/>hamiltonian<sp/>cols<sp/>(dim3*dim4*dim5)<sp/>and<sp/>size:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>rows,<sp/>size));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>ham_map<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham.data(),<sp/>rows,<sp/>cols);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>non_hermiticity<sp/>=<sp/>(ham_map<sp/>-<sp/>ham_map.adjoint()).cwiseAbs().sum()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ham_map.size());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((ham_map.array().cwiseAbs2()<sp/>!=<sp/>0.0).count())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ham_map.size());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(non_hermiticity<sp/>&gt;<sp/>1e-8)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>is<sp/>not<sp/>hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>non_hermiticity));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(non_hermiticity<sp/>&gt;<sp/>1e-12)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>is<sp/>slightly<sp/>non-hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>non_hermiticity);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ham_map.hasNaN())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>has<sp/>NaN&apos;s!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>nonzeros:<sp/>{:.8f}<sp/>%&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref><sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;T,<sp/>double&gt;)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham.data(),<sp/>rows,<sp/>cols).real().transpose().selfadjointView&lt;Eigen::Lower&gt;();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham.data(),<sp/>rows,<sp/>cols).transpose().selfadjointView&lt;Eigen::Lower&gt;();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;real&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a0760f44e7374265bcb7521e6a67a94db" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;cplx&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a0760f44e7374265bcb7521e6a67a94db" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;T&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1ae6955ca4b018ed330e6f769df01c8742" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpo2<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_multisite_mpo_squared();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;env2<sp/>=<sp/>edges.<ref refid="classclass__edges__finite_1a15f800ec4c50491e8990b6bec9d5e6ff" kindref="member">get_multisite_var_blk</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>multisite<sp/>hamiltonian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_ham<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_ham&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>mpo2.dimension(2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/>=<sp/>env2.L.dimension(0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/>=<sp/>env2.R.dimension(0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;std::complex&lt;double&gt;,<sp/>6&gt;<sp/>ham2(dim0,<sp/>dim1,<sp/>dim2,<sp/>dim0,<sp/>dim1,<sp/>dim2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>ham2.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env2.L.contract(mpo2,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{0})).contract(env2.R,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{2})).shuffle(<ref refid="namespace_textra_1accfb4fc520dc9a420a8a272f0d31c613" kindref="member">Textra::array6</ref>{2,<sp/>0,<sp/>4,<sp/>3,<sp/>1,<sp/>5});</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>ham2.dimension(0)<sp/>*<sp/>ham2.dimension(1)<sp/>*<sp/>ham2.dimension(2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>ham2.dimension(3)<sp/>*<sp/>ham2.dimension(4)<sp/>*<sp/>ham2.dimension(5);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>dim0<sp/>*<sp/>dim1<sp/>*<sp/>dim2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rows<sp/>!=<sp/>size)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>multisite<sp/>hamiltonian<sp/>rows<sp/>(dim0*dim1*dim2)<sp/>and<sp/>size:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>cols,<sp/>size));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cols<sp/>!=<sp/>size)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>multisite<sp/>hamiltonian<sp/>cols<sp/>(dim3*dim4*dim5)<sp/>and<sp/>size:<sp/>{}<sp/>!=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>rows,<sp/>size));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>ham2_map<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham2.data(),<sp/>rows,<sp/>cols);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>non_hermiticity<sp/>=<sp/>(ham2_map<sp/>-<sp/>ham2_map.adjoint()).cwiseAbs().sum()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ham2_map.size());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((ham2_map.array().cwiseAbs2()<sp/>!=<sp/>0.0).count())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ham2_map.size());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(non_hermiticity<sp/>&gt;<sp/>1e-8)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>squared<sp/>is<sp/>not<sp/>hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>non_hermiticity));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(non_hermiticity<sp/>&gt;<sp/>1e-12)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>squared<sp/>is<sp/>slightly<sp/>non-hermitian:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>non_hermiticity);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ham2_map.hasNaN())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>squared<sp/>has<sp/>NaN&apos;s!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;multisite<sp/>hamiltonian<sp/>squared<sp/>nonzeros:<sp/>{:.8f}<sp/>%&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref><sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;T,<sp/>double&gt;)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham2.data(),<sp/>rows,<sp/>cols).real().transpose().selfadjointView&lt;Eigen::Lower&gt;();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;Eigen::MatrixXcd&gt;(ham2.data(),<sp/>rows,<sp/>cols).transpose().selfadjointView&lt;Eigen::Lower&gt;();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;real&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1ae6955ca4b018ed330e6f769df01c8742" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;cplx&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1ae6955ca4b018ed330e6f769df01c8742" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;T&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a5314a0ab05a20ffbe2cb4968791e2bd1" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_subspace_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;edges,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>&amp;candidate_list,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>make<sp/>sure<sp/>every<sp/>candidate<sp/>is<sp/>actually<sp/>a<sp/>basis<sp/>vector,<sp/>otherwise<sp/>this<sp/>computation<sp/>would<sp/>turn<sp/>difficult<sp/>if<sp/>we<sp/>have<sp/>to<sp/>skip<sp/>rows<sp/>and<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;candidate<sp/>:<sp/>candidate_list)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>candidate.is_basis_vector)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;One<sp/>candidate<sp/>is<sp/>not<sp/>a<sp/>basis<sp/>vector.<sp/>When<sp/>constructing<sp/>a<sp/>hamiltonian<sp/>subspace<sp/>matrix,<sp/>make<sp/>sure<sp/>the<sp/>candidates<sp/>are<sp/>all<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;eigenvectors/basis<sp/>vectors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;env2<sp/>=<sp/>edges.<ref refid="classclass__edges__finite_1a15f800ec4c50491e8990b6bec9d5e6ff" kindref="member">get_multisite_var_blk</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mpo2<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_multisite_mpo_squared();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(energy_shift<sp/>!=<sp/>0.0<sp/>and<sp/>not<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.is_compressed_mpo_squared())</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1ab45ed389a2550cbd5ab11019804808ad" kindref="member">shift_mpo_energy</ref>(mpo2,energy_shift);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_opt_sub_hsq<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9ab5612e395f07bd6a022360eb707e73ae" kindref="member">AlgorithmType::xDMRG</ref>][</highlight><highlight class="stringliteral">&quot;t_opt_sub_hsq&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Contracting<sp/>subspace<sp/>hamiltonian<sp/>squared<sp/>new&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/><sp/><sp/>=<sp/>mpo2.dimension(2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/><sp/><sp/>=<sp/>env2.L.dimension(0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/><sp/><sp/>=<sp/>env2.R.dimension(0);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>eignum<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(candidate_list.size());<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>eigenvectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>H2_ij;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>H2_mps(dim0,<sp/>dim1,<sp/>dim2);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>local<sp/>hamiltonian<sp/>multiplied<sp/>by<sp/>mps<sp/>at<sp/>column<sp/>j.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2_sub(eignum,<sp/>eignum);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>local<sp/>hamiltonian<sp/>projected<sp/>to<sp/>the<sp/>subspace<sp/>(spanned<sp/>by<sp/>candidate_list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>eignum;<sp/>col++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_j<sp/>=<sp/>std::next(candidate_list.begin(),<sp/>col)-&gt;get_tensor();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1contraction_1a8fc132d09a968c9503d8491a80d14d35" kindref="member">tools::common::contraction::matrix_vector_product</ref>(H2_mps,<sp/>mps_j,<sp/>mpo2,<sp/>env2.L,<sp/>env2.R);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>col;<sp/>row<sp/>&lt;<sp/>eignum;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::next(candidate_list.begin(),<sp/>row)-&gt;get_tensor();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2_ij.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>mps_i.conjugate().contract(H2_mps,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2}));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2_sub(row,<sp/>col)<sp/>=<sp/>H2_ij(0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2_sub(col,<sp/>row)<sp/>=<sp/>std::conj(H2_ij(0));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same_v&lt;T,<sp/>double&gt;)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H2_sub.real();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H2_sub;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>instantiations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;real&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a5314a0ab05a20ffbe2cb4968791e2bd1" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_subspace_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;<sp/><sp/><sp/><sp/>edges,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>&amp;candidate_list,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="matvec__dense_8cpp_1a54e381b4acc7ec9ccd10a1afca7152cc" kindref="member">MatrixType&lt;cplx&gt;</ref><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a5314a0ab05a20ffbe2cb4968791e2bd1" kindref="member">tools::finite::opt::internal::get_multisite_hamiltonian_squared_subspace_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__edges__finite" kindref="compound">class_edges_finite</ref><sp/>&amp;<sp/><sp/><sp/><sp/>edges,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;opt_mps&gt;<sp/>&amp;candidate_list,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy_shift);</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp"/>
  </compounddef>
</doxygen>
