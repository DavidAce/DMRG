<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="nmspc__tensor__extra_8h" kind="file" language="C++">
    <compoundname>nmspc_tensor_extra.h</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">Eigen/Sparse</includes>
    <includes local="no">unsupported/Eigen/CXX11/Tensor</includes>
    <includes local="no">iterator</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes refid="nmspc__type__check_8h" local="no">general/nmspc_type_check.h</includes>
    <includedby refid="class__x_d_m_r_g_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_xDMRG.cpp</includedby>
    <includedby refid="nmspc__quantum__mechanics_8cpp" local="yes">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/general/nmspc_quantum_mechanics.cpp</includedby>
    <includedby refid="matrix__product__hamiltonian_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/arpack_extra/matrix_product_hamiltonian.h</includedby>
    <includedby refid="class__svd__wrapper_8h" local="yes">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h</includedby>
    <includedby refid="class__model__base_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_model_base.cpp</includedby>
    <includedby refid="class__tf__ising_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_tf_ising.h</includedby>
    <includedby refid="class__selfdual__tf__rf__ising_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising.h</includedby>
    <includedby refid="class__selfdual__tf__rf__ising_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising.cpp</includedby>
    <includedby refid="class__tf__ising_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_tf_ising.cpp</includedby>
    <includedby refid="class__environment_8h" local="yes">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_environment.h</includedby>
    <includedby refid="class__finite__state_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_finite_state.h</includedby>
    <includedby refid="class__infinite__state_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_infinite_state.h</includedby>
    <includedby refid="class__mps__2site_8h" local="yes">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_mps_2site.h</includedby>
    <includedby refid="class__vidal__site_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_vidal_site.h</includedby>
    <includedby refid="accurate_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/accurate.cpp</includedby>
    <includedby refid="finite_2h5pp_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/h5pp.cpp</includedby>
    <includedby refid="finite_2measure_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/measure.cpp</includedby>
    <includedby refid="ops_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/ops.cpp</includedby>
    <includedby refid="finite_2print_8cpp" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/print.cpp</includedby>
    <includedby refid="nmspc__tools_8h" local="no">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/nmspc_tools.h</includedby>
    <incdepgraph>
      <node id="730">
        <label>iomanip</label>
      </node>
      <node id="728">
        <label>iterator</label>
      </node>
      <node id="731">
        <label>general/nmspc_type_check.h</label>
        <link refid="nmspc__type__check_8h"/>
        <childnode refid="732" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="725">
        <label>Eigen/Core</label>
      </node>
      <node id="732">
        <label>experimental/type_traits</label>
      </node>
      <node id="727">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="726">
        <label>Eigen/Sparse</label>
      </node>
      <node id="729">
        <label>iostream</label>
      </node>
      <node id="724">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="726" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="761">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/accurate.cpp</label>
        <link refid="accurate_8cpp"/>
      </node>
      <node id="758">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_fDMRG.cpp</label>
        <link refid="class__f_d_m_r_g_8cpp"/>
      </node>
      <node id="767">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/multisite.cpp</label>
        <link refid="multisite_8cpp"/>
      </node>
      <node id="742">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h</label>
        <link refid="class__svd__wrapper_8h"/>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
      <node id="739">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/ground_state.cpp</label>
        <link refid="ground__state_8cpp"/>
      </node>
      <node id="779">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_infinite.cpp</label>
        <link refid="class__algorithm__infinite_8cpp"/>
      </node>
      <node id="776">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/print.cpp</label>
        <link refid="finite_2print_8cpp"/>
      </node>
      <node id="747">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_tf_ising.h</label>
        <link refid="class__tf__ising_8h"/>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/ceres.cpp</label>
        <link refid="ceres_8cpp"/>
      </node>
      <node id="746">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_model_base.cpp</label>
        <link refid="class__model__base_8cpp"/>
      </node>
      <node id="786">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_mps_2site.cpp</label>
        <link refid="class__mps__2site_8cpp"/>
      </node>
      <node id="751">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising.cpp</label>
        <link refid="class__selfdual__tf__rf__ising_8cpp"/>
      </node>
      <node id="735">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/general/nmspc_quantum_mechanics.cpp</label>
        <link refid="nmspc__quantum__mechanics_8cpp"/>
      </node>
      <node id="738">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_infinite_state.cpp</label>
        <link refid="class__infinite__state_8cpp"/>
      </node>
      <node id="791">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/common/prof.cpp</label>
        <link refid="prof_8cpp"/>
      </node>
      <node id="781">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_iTEBD.cpp</label>
        <link refid="class__i_t_e_b_d_8cpp"/>
      </node>
      <node id="759">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_finite_state.cpp</label>
        <link refid="class__finite__state_8cpp"/>
      </node>
      <node id="777">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/h5pp.cpp</label>
        <link refid="infinite_2h5pp_8cpp"/>
      </node>
      <node id="749">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_tf_ising.cpp</label>
        <link refid="class__tf__ising_8cpp"/>
      </node>
      <node id="752">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_environment.h</label>
        <link refid="class__environment_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="754" relation="include">
        </childnode>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
      <node id="756">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_finite.cpp</label>
        <link refid="class__algorithm__finite_8cpp"/>
      </node>
      <node id="754">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_environment.cpp</label>
        <link refid="class__environment_8cpp"/>
      </node>
      <node id="750">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising.h</label>
        <link refid="class__selfdual__tf__rf__ising_8h"/>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="751" relation="include">
        </childnode>
      </node>
      <node id="764">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/measure.cpp</label>
        <link refid="finite_2measure_8cpp"/>
      </node>
      <node id="734">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_xDMRG.cpp</label>
        <link refid="class__x_d_m_r_g_8cpp"/>
      </node>
      <node id="736">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/arpack_extra/matrix_product_hamiltonian.h</label>
        <link refid="matrix__product__hamiltonian_8h"/>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
      <node id="765">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/mpo.cpp</label>
        <link refid="mpo_8cpp"/>
      </node>
      <node id="763">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/h5pp.cpp</label>
        <link refid="finite_2h5pp_8cpp"/>
      </node>
      <node id="773">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/direct_functor.cpp</label>
        <link refid="direct__functor_8cpp"/>
      </node>
      <node id="737">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/arpack_extra/arpackpp_solver.cpp</label>
        <link refid="arpackpp__solver_8cpp"/>
      </node>
      <node id="762">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/debug.cpp</label>
        <link refid="finite_2debug_8cpp"/>
      </node>
      <node id="741">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/opt.cpp</label>
        <link refid="infinite_2opt_8cpp"/>
      </node>
      <node id="771">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/ceres_functor.cpp</label>
        <link refid="ceres__functor_8cpp"/>
      </node>
      <node id="760">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/common/views.cpp</label>
        <link refid="views_8cpp"/>
      </node>
      <node id="782">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/debug.cpp</label>
        <link refid="infinite_2debug_8cpp"/>
      </node>
      <node id="755">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_finite_state.h</label>
        <link refid="class__finite__state_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="757" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
      </node>
      <node id="784">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/print.cpp</label>
        <link refid="infinite_2print_8cpp"/>
      </node>
      <node id="740">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt.cpp</label>
        <link refid="finite_2opt_8cpp"/>
      </node>
      <node id="743">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp</label>
        <link refid="class__svd__wrapper_8cpp"/>
      </node>
      <node id="757">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_launcher.cpp</label>
        <link refid="class__algorithm__launcher_8cpp"/>
      </node>
      <node id="748">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_model_factory.cpp</label>
        <link refid="class__model__factory_8cpp"/>
      </node>
      <node id="745">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/measure.cpp</label>
        <link refid="infinite_2measure_8cpp"/>
      </node>
      <node id="785">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_mps_2site.h</label>
        <link refid="class__mps__2site_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
      </node>
      <node id="783">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/mps.cpp</label>
        <link refid="infinite_2mps_8cpp"/>
      </node>
      <node id="772">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/direct.cpp</label>
        <link refid="direct_8cpp"/>
      </node>
      <node id="768">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/ops.cpp</label>
        <link refid="ops_8cpp"/>
      </node>
      <node id="774">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace.cpp</label>
        <link refid="subspace_8cpp"/>
      </node>
      <node id="744">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/svd.cpp</label>
        <link refid="svd_8cpp"/>
      </node>
      <node id="780">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_iDMRG.cpp</label>
        <link refid="class__i_d_m_r_g_8cpp"/>
      </node>
      <node id="793">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/report.cpp</label>
        <link refid="report_8cpp"/>
      </node>
      <node id="775">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/subspace_functor.cpp</label>
        <link refid="subspace__functor_8cpp"/>
      </node>
      <node id="769">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt-internals/base_functor.cpp</label>
        <link refid="base__functor_8cpp"/>
      </node>
      <node id="753">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp</label>
        <link refid="class__algorithm__base_8cpp"/>
      </node>
      <node id="766">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/mps.cpp</label>
        <link refid="finite_2mps_8cpp"/>
      </node>
      <node id="792">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/opt.h</label>
        <link refid="opt_8h"/>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="793" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
      </node>
      <node id="795">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/infinite/profile.cpp</label>
        <link refid="infinite_2profile_8cpp"/>
      </node>
      <node id="790">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/common/h5pp.cpp</label>
        <link refid="common_2h5pp_8cpp"/>
      </node>
      <node id="778">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_infinite_state.h</label>
        <link refid="class__infinite__state_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
        <childnode refid="757" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
      </node>
      <node id="733">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
        <childnode refid="751" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
        <childnode refid="752" relation="include">
        </childnode>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="787" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="789" relation="include">
        </childnode>
      </node>
      <node id="789">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/nmspc_tools.h</label>
        <link refid="nmspc__tools_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="790" relation="include">
        </childnode>
        <childnode refid="791" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="792" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="794" relation="include">
        </childnode>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
        <childnode refid="795" relation="include">
        </childnode>
      </node>
      <node id="788">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_vidal_site.cpp</label>
        <link refid="class__vidal__site_8cpp"/>
      </node>
      <node id="794">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/tools/finite/profile.cpp</label>
        <link refid="finite_2profile_8cpp"/>
      </node>
      <node id="787">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_vidal_site.h</label>
        <link refid="class__vidal__site_8h"/>
        <childnode refid="754" relation="include">
        </childnode>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="788" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_textra_1_1idx__dim__pair" prot="public">Textra::idx_dim_pair</innerclass>
    <innernamespace refid="namespace_textra">Textra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>6/7/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TENSOR_EXTRA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TENSOR_EXTRA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Sparse&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unsupported/Eigen/CXX11/Tensor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__type__check_8h" kindref="compound">general/nmspc_type_check.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_textra" kindref="compound">Textra</ref><sp/>{</highlight></codeline>
<codeline lineno="28" refid="namespace_textra_1ad59ad423ffe2196e1b92b0d85e2eff0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad59ad423ffe2196e1b92b0d85e2eff0f" kindref="member">cdouble</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::complex&lt;double&gt;;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="32" refid="namespace_textra_1a358a270e8b355388963a513bd6617131" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a358a270e8b355388963a513bd6617131" kindref="member">VectorType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="33" refid="namespace_textra_1ace777675543f488f279874fd25523d7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ace777675543f488f279874fd25523d7b" kindref="member">SparseMatrixType</ref><sp/><sp/><sp/><sp/>=<sp/>Eigen::SparseMatrix&lt;Scalar&gt;;</highlight></codeline>
<codeline lineno="34" refid="namespace_textra_1ac05ac79c4e225739a3c4b44fb5b577df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rank&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ac05ac79c4e225739a3c4b44fb5b577df" kindref="member">array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,<sp/>rank&gt;;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Shorthand<sp/>for<sp/>the<sp/>list<sp/>of<sp/>index<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length&gt;</highlight></codeline>
<codeline lineno="38" refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" kindref="member">idxlistpair</ref><sp/>=<sp/>Eigen::array&lt;Eigen::IndexPair&lt;Scalar&gt;,<ref refid="namespacetools_1_1finite_1_1measure_1a7ea586a94abc0dc2941e01d1c6ceebc5" kindref="member">length</ref>&gt;;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" kindref="member">idxlistpair&lt;long,0&gt;</ref><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref>(){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::array&lt;Eigen::IndexPair&lt;long&gt;,0&gt;<sp/>empty_index_list<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty_index_list;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="47" refid="namespace_textra_1adb41dcaa749176a53d57268d96efdcc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" kindref="member">idxlistpair&lt;long,N&gt;</ref><sp/><ref refid="namespace_textra_1ad322c080214d3af95e19d611c077ea76" kindref="member">idx</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;list1)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;list2)[N]){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Use<sp/>numpy-style<sp/>indexing<sp/>for<sp/>contraction.<sp/>Each<sp/>list<sp/>contains<sp/>a<sp/>list<sp/>of<sp/>indices<sp/>to<sp/>be<sp/>contracted<sp/>for<sp/>the<sp/>respective</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tensors.<sp/>This<sp/>function<sp/>zips<sp/>them<sp/>together<sp/>into<sp/>pairs<sp/>as<sp/>used<sp/>in<sp/>Eigen::Tensor<sp/>module.<sp/>This<sp/>does<sp/>not<sp/>sort<sp/>the<sp/>indices<sp/>in<sp/>decreasing<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::array&lt;Eigen::IndexPair&lt;long&gt;,N&gt;<sp/>pairlistOut;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pairlistOut[i]<sp/>=<sp/>Eigen::IndexPair&lt;long&gt;{list1[i],<sp/>list2[i]};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="struct_textra_1_1idx__dim__pair" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_textra_1_1idx__dim__pair" kindref="compound">idx_dim_pair</ref>{</highlight></codeline>
<codeline lineno="64" refid="struct_textra_1_1idx__dim__pair_1a467bd14fc634272fea72e0e77a869950" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="struct_textra_1_1idx__dim__pair_1a467bd14fc634272fea72e0e77a869950" kindref="member">idxA</ref>;</highlight></codeline>
<codeline lineno="65" refid="struct_textra_1_1idx__dim__pair_1a8618e3eed1d1e5f478628b8dde260174" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="struct_textra_1_1idx__dim__pair_1a8618e3eed1d1e5f478628b8dde260174" kindref="member">idxB</ref>;</highlight></codeline>
<codeline lineno="66" refid="struct_textra_1_1idx__dim__pair_1ad9e7197a027ca16a3d1a1b067a843f68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="struct_textra_1_1idx__dim__pair_1ad9e7197a027ca16a3d1a1b067a843f68" kindref="member">dimB</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NB,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="70" refid="namespace_textra_1ac89cfa77d023247aabe950ce829f9513" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" kindref="member">idxlistpair&lt;long,N&gt;</ref><sp/><ref refid="namespace_textra_1ac89cfa77d023247aabe950ce829f9513" kindref="member">sortIdx</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::array&lt;long,NB&gt;<sp/>&amp;dimensions,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(&amp;idx_ctrct_A)[N],</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(&amp;idx_ctrct_B)[N]){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//When<sp/>doing<sp/>contractions,<sp/>some<sp/>indices<sp/>may<sp/>be<sp/>larger<sp/>than<sp/>others.<sp/>For<sp/>performance,<sp/>you<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contract<sp/>the<sp/>largest<sp/>indices<sp/>first.<sp/>This<sp/>will<sp/>return<sp/>a<sp/>sorted<sp/>index<sp/>list<sp/>in<sp/>decreasing<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::array&lt;idx_dim_pair&lt;long&gt;,N&gt;<sp/>idx_dim_pair_list;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++<sp/>){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_dim_pair_list[i]<sp/>=<sp/>{idx_ctrct_A[i],<sp/>idx_ctrct_B[i],<sp/>dimensions[idx_ctrct_B[i]]};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(idx_dim_pair_list.begin(),<sp/>idx_dim_pair_list.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>j)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i.dimB<sp/>&gt;<sp/>j.dimB;<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1ac4ea1d05edf6f909513a8ec4af87880a" kindref="member">idxlistpair&lt;long,N&gt;</ref><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<sp/>N;<sp/>i++){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pairlistOut[i]<sp/>=<sp/>Eigen::IndexPair&lt;long&gt;{idx_dim_pair_list[i].idxA,<sp/>idx_dim_pair_list[i].idxB};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="namespace_textra_1a40142e97da00e9a6470ec0637da532e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a40142e97da00e9a6470ec0637da532e3" kindref="member">array8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,8&gt;;</highlight></codeline>
<codeline lineno="88" refid="namespace_textra_1afa2db9c81f29f8e4324e79340e4ab96a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afa2db9c81f29f8e4324e79340e4ab96a" kindref="member">array7</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,7&gt;;</highlight></codeline>
<codeline lineno="89" refid="namespace_textra_1a3d45de3aad22e5851745e69630523d49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3d45de3aad22e5851745e69630523d49" kindref="member">array6</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,6&gt;;</highlight></codeline>
<codeline lineno="90" refid="namespace_textra_1ad77b0c4ddf727b47bd5283b159db860e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ad77b0c4ddf727b47bd5283b159db860e" kindref="member">array5</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,5&gt;;</highlight></codeline>
<codeline lineno="91" refid="namespace_textra_1aed08040fb74720378781c145b88c1d5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aed08040fb74720378781c145b88c1d5a" kindref="member">array4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,4&gt;;</highlight></codeline>
<codeline lineno="92" refid="namespace_textra_1a11ff5da431d0a149284e51800d10c0cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a11ff5da431d0a149284e51800d10c0cc" kindref="member">array3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,3&gt;;</highlight></codeline>
<codeline lineno="93" refid="namespace_textra_1a9f19da2eaa3b2ac621236d06d85ea382" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9f19da2eaa3b2ac621236d06d85ea382" kindref="member">array2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,2&gt;;</highlight></codeline>
<codeline lineno="94" refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" kindref="member">array1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::array&lt;long,1&gt;;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//***************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Different<sp/>views<sp/>for<sp/>rank<sp/>1<sp/>and<sp/>2<sp/>tensors//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//***************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="105" refid="namespace_textra_1a65a7adf70ca3f05a3635830bd91c5787" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/><ref refid="namespace_textra_1a65a7adf70ca3f05a3635830bd91c5787" kindref="member">extractDiagonal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>tensor.dimension(0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>tensor.dimension(1);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tensor.dimension(0)<sp/>==<sp/>tensor.dimension(1)<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;extractDiagonal<sp/>expects<sp/>a<sp/>square<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>diagonals(rows);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagonals(i)<sp/>=<sp/>tensor(i,i);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;diagonals:<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diagonals;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diagonals;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tensor.reshape(array1{rows*cols}).stride(array1{cols+1});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="121" refid="namespace_textra_1a42b2f8b0c5883c74c9fb806db83762da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a42b2f8b0c5883c74c9fb806db83762da" kindref="member">asDiagonal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.inflate(<ref refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" kindref="member">array1</ref>{tensor.size()+1}).reshape(<ref refid="namespace_textra_1a9f19da2eaa3b2ac621236d06d85ea382" kindref="member">array2</ref>{tensor.size(),tensor.size()});</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="126" refid="namespace_textra_1a145b649a880d716e15ad11d43c1d1ce8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a145b649a880d716e15ad11d43c1d1ce8" kindref="member">asDiagonalSquared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.square().inflate(<ref refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" kindref="member">array1</ref>{tensor.size()+1}).reshape(<ref refid="namespace_textra_1a9f19da2eaa3b2ac621236d06d85ea382" kindref="member">array2</ref>{tensor.size(),<sp/>tensor.size()});</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="131" refid="namespace_textra_1a0943a701e495e3c6c3211a7407e7a312" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a0943a701e495e3c6c3211a7407e7a312" kindref="member">asDiagonalInversed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.inverse().inflate(<ref refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" kindref="member">array1</ref>{tensor.size()+1}).reshape(<ref refid="namespace_textra_1a9f19da2eaa3b2ac621236d06d85ea382" kindref="member">array2</ref>{tensor.size(),tensor.size()});</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="136" refid="namespace_textra_1a1eda47ce18fd5ba41628b44b32b6366c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a0943a701e495e3c6c3211a7407e7a312" kindref="member">asDiagonalInversed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tensor.dimension(0)<sp/>==<sp/>tensor.dimension(1)<sp/>and<sp/></highlight><highlight class="stringliteral">&quot;Textra::asDiagonalInversed<sp/>expects<sp/>a<sp/>square<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>inversed<sp/>=<sp/><ref refid="namespace_textra_1a0943a701e495e3c6c3211a7407e7a312" kindref="member">asDiagonalInversed</ref>(<ref refid="namespace_textra_1a65a7adf70ca3f05a3635830bd91c5787" kindref="member">extractDiagonal</ref>(tensor));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;inversed:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inversed<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inversed;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="144" refid="namespace_textra_1a7cd3712f032a50ee9320fc68312c7c20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a7cd3712f032a50ee9320fc68312c7c20" kindref="member">asNormalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;<sp/>map<sp/>(tensor.data(),tensor.size());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;Eigen::Tensor&lt;const<sp/>Scalar,1&gt;&gt;(map.normalized().eval().data(),<sp/><ref refid="namespace_textra_1a4605428e7dc10e4e43f43e69f6ddbd75" kindref="member">array1</ref>{map.size()});</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Matrix<sp/>to<sp/>tensor<sp/>conversions//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Detects<sp/>if<sp/>Derived<sp/>is<sp/>a<sp/>plain<sp/>object,<sp/>like<sp/>&quot;MatrixXd&quot;<sp/>or<sp/>similar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::decay<sp/>removes<sp/>pointer<sp/>or<sp/>ref<sp/>qualifiers<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="163" refid="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" kindref="member">is_plainObject</ref><sp/><sp/>=<sp/>std::is_base_of&lt;Eigen::PlainObjectBase&lt;std::decay_t&lt;Derived&gt;<sp/>&gt;,<sp/>std::decay_t&lt;Derived&gt;<sp/>&gt;<sp/>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="166" refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::array&lt;long,rank&gt;<sp/>&amp;dims){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" kindref="member">is_plainObject&lt;Derived&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Return<sp/>map<sp/>from<sp/>raw<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matrix.derived().eval().data(),<sp/>dims);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType&lt;typename Derived::Scalar&gt;</ref><sp/>matref<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matref.data(),<sp/>dims);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Helpful<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Dims&gt;</highlight></codeline>
<codeline lineno="180" refid="namespace_textra_1a9207bc24390fafec44eee851bf9fdee2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>Eigen::Tensor&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...<sp/>(Dims)&gt;<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dims...<sp/>dims)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(matrix,<sp/>array&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims)&gt;{dims...});</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Helpful<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="185" refid="namespace_textra_1a1a713f14010c8216f87e9f33dcf9ca64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;<sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DSizes&lt;long,rank&gt;<sp/>&amp;dims)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::array&lt;long,rank&gt;<sp/>dim_array<sp/>=<sp/>dims;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(std::begin(dims),<sp/>std::end(dims),<sp/>std::begin(dim_array));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(matrix,<sp/>dim_array);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="195" refid="namespace_textra_1ac457f29be7f94d9d773b47592c65eef3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ac457f29be7f94d9d773b47592c65eef3" kindref="member">Matrix_to_Tensor1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(matrix,<sp/>matrix.size());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="200" refid="namespace_textra_1a183aedbd02b4a84ab362812c8ddf3748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a183aedbd02b4a84ab362812c8ddf3748" kindref="member">Matrix_to_Tensor2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a90452304e6be4b7fd6c520f59be431f7" kindref="member">Matrix_to_Tensor</ref>(matrix,<sp/>matrix.rows(),matrix.cols());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Tensor<sp/>to<sp/>matrix<sp/>conversions//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="214" refid="namespace_textra_1a9860b63ba377587f29fa84cbce5702c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/><ref refid="namespace_textra_1a9860b63ba377587f29fa84cbce5702c0" kindref="member">Tensor2_to_Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.dimension(0),<sp/>tensor.dimension(1));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="219" refid="namespace_textra_1aee5cae05c29a2d54025c36f444591dcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/><ref refid="namespace_textra_1aee5cae05c29a2d54025c36f444591dcd" kindref="member">Tensor1_to_Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,auto<sp/>rank,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sizeType&gt;</highlight></codeline>
<codeline lineno="224" refid="namespace_textra_1abec7b372b4239eac14573685fae5f2e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType&lt;Scalar&gt;</ref><sp/><ref refid="namespace_textra_1abec7b372b4239eac14573685fae5f2e7" kindref="member">Tensor_to_Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,rank&gt;<sp/>&amp;tensor,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>rows,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>cols){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;<sp/>(tensor.data(),<sp/>rows,cols);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="229" refid="namespace_textra_1a01151a1a76f286d61ebc2756991fb17d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1ace777675543f488f279874fd25523d7b" kindref="member">SparseMatrixType&lt;Scalar&gt;</ref><sp/><ref refid="namespace_textra_1a01151a1a76f286d61ebc2756991fb17d" kindref="member">Tensor2_to_SparseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prune_threshold<sp/>=<sp/>1e-15)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.dimension(0),<sp/>tensor.dimension(1)).sparseView().pruned(prune_threshold);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>storage<sp/>layout<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="242" refid="namespace_textra_1a404c21a4f4844edba87cffd8e06536c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,rank,<sp/>Eigen::RowMajor&gt;<sp/><ref refid="namespace_textra_1a404c21a4f4844edba87cffd8e06536c4" kindref="member">to_RowMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,rank,<sp/>Eigen::ColMajor&gt;<sp/>tensor){</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;long,rank&gt;<sp/>neworder;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(std::begin(neworder),<sp/>std::end(neworder),<sp/>0);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(neworder.data(),<sp/>neworder.data()+neworder.size());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.swap_layout().shuffle(neworder);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="251" refid="namespace_textra_1a7ccbf9014eef4fc7fab8e2163d721e89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,Eigen::Dynamic,Eigen::Dynamic,<sp/>Eigen::RowMajor&gt;<sp/><ref refid="namespace_textra_1a404c21a4f4844edba87cffd8e06536c4" kindref="member">to_RowMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;matrix){</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matrix.IsRowMajor)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,Eigen::Dynamic,Eigen::Dynamic,<sp/>Eigen::RowMajor&gt;<sp/>matrowmajor<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrowmajor;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="258" refid="namespace_textra_1a6ce185ef869dc59048058546aedeb24e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,rank,<sp/>Eigen::ColMajor&gt;<sp/><ref refid="namespace_textra_1a6ce185ef869dc59048058546aedeb24e" kindref="member">to_ColMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,rank,<sp/>Eigen::RowMajor&gt;<sp/>tensor){</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;long,rank&gt;<sp/>neworder;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(std::begin(neworder),<sp/>std::end(neworder),<sp/>0);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(neworder.data(),<sp/>neworder.data()+neworder.size());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.swap_layout().shuffle(neworder);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="266" refid="namespace_textra_1ab92f06daa8fdd15320f38aa89bfa7894" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,Eigen::Dynamic,Eigen::Dynamic,<sp/>Eigen::ColMajor&gt;<sp/><ref refid="namespace_textra_1a6ce185ef869dc59048058546aedeb24e" kindref="member">to_ColMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;matrix){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>matrix.IsRowMajor)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,Eigen::Dynamic,Eigen::Dynamic,<sp/>Eigen::ColMajor&gt;<sp/>matrowmajor<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrowmajor;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>real/complex<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="280" refid="namespace_textra_1a134cee5e3300feee66018395aa0ffa05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a134cee5e3300feee66018395aa0ffa05" kindref="member">isReal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;obj,[[maybe_unused]]</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>1e-14)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="struct_type_check_1_1is__specialization" kindref="compound">TypeCheck::is_specialization&lt;Scalar, std::complex&gt;::value</ref>){</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imag_sum<sp/>=<sp/>obj.derived().imag().cwiseAbs().sum();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;&quot;imag<sp/>sum<sp/>&quot;<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>&quot;<sp/>:&quot;<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>std::setprecision(16)&lt;&lt;<sp/>imag_sum<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imag_sum<sp/>&lt;<sp/>threshold;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="293" refid="namespace_textra_1ae7794bc6f089ffe1c7121692c28c7592" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a134cee5e3300feee66018395aa0ffa05" kindref="member">isReal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>1e-14)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::Matrix&lt;Scalar,Eigen::Dynamic,1&gt;&gt;<sp/>vector<sp/>(tensor.data(),tensor.size());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a134cee5e3300feee66018395aa0ffa05" kindref="member">isReal</ref>(vector,<sp/>name,<sp/>threshold);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="299" refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;v){</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>angles;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>std::complex&lt;double&gt;&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.cols();<sp/>i++){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.col(i)(0).imag()<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.emplace_back(0.0);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.emplace_back(std::arg(v.col(i)(0)));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>inv_phase<sp/>=<sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>(0.0,-1.0)<sp/>*<sp/>angles.back();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>exp_inv_phase<sp/>=<sp/>std::exp(inv_phase);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setprecision(20)<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>&quot;inv_phase<sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>inv_phase<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setprecision(20)<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>&quot;exp_inv_phase:<sp/>&quot;<sp/>&lt;&lt;<sp/>exp_inv_phase<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>*=<sp/>exp_inv_phase;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>=<sp/>(v.col(i).array().imag().cwiseAbs()<sp/>&gt;<sp/>1e-15<sp/><sp/>).select(v.col(i),<sp/>v.col(i).real());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angles;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="323" refid="namespace_textra_1adf0b0f09052c2cb60ff713691d9f28ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(Eigen::Tensor&lt;Scalar,rank&gt;<sp/>&amp;tensor){</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map<sp/>=<sp/>Eigen::Map&lt;Eigen::Matrix&lt;Scalar,Eigen::Dynamic,1&gt;&gt;(tensor.data(),tensor.size());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(map);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="330" refid="namespace_textra_1af6755d93497c739f4cab661892897c46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;v,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>angles){</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>std::complex&lt;double&gt;&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.cols()<sp/>!=<sp/>angles.size()<sp/>){</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>columns<sp/>and<sp/>angles<sp/>supplied&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.cols();<sp/>i++){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>exp_phase<sp/>=<sp/>std::exp(<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>(0.0,1.0)<sp/>*<sp/>angles[i]);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>*=<sp/>exp_phase;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>=<sp/>(v.col(i).array().imag().cwiseAbs()<sp/>&gt;<sp/>1e-15<sp/><sp/>).select(v.col(i),<sp/>v.col(i).real());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="344" refid="namespace_textra_1ae8de771b63d94ce09bc102d204eed693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(Eigen::Tensor&lt;Scalar,rank&gt;<sp/>&amp;tensor,<sp/>std::vector&lt;double&gt;<sp/>&amp;angles){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map<sp/>=<sp/>Eigen::Map&lt;Eigen::Matrix&lt;Scalar,Eigen::Dynamic,1&gt;&gt;(tensor.data(),tensor.size());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(map,angles);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>overloads<sp/>for<sp/>dimension()<sp/>and<sp/>array<sp/>objects<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="354" refid="namespace_textra_1a83480b3f75b0a29f652feb8b2152b475" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(std::ostream&amp;<sp/>out,<sp/>const<sp/>Eigen::DSizes&lt;T,L&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy<sp/>(v.begin(),<sp/>v.end(),<sp/>std::ostream_iterator&lt;T&gt;(out,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="365" refid="namespace_textra_1a47079abeb81c780b562da5b9a8d1ff19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(std::ostream&amp;<sp/>out,<sp/>const<sp/>Eigen::array&lt;T,L&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy<sp/>(v.begin(),<sp/>v.end(),<sp/>std::ostream_iterator&lt;T&gt;(out,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="377" refid="namespace_textra_1a9f5d2eac44ffb07d9b83baeb71ed0dda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream<sp/>&amp;operator&lt;&lt;(std::ostream<sp/>&amp;out,<sp/>const<sp/>std::list&lt;T&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.empty())<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(v.begin(),<sp/>v.end(),<sp/>std::ostream_iterator&lt;T&gt;(out,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="388" refid="namespace_textra_1adf8b82a75b1ea346a094d67ff78330ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream<sp/>&amp;operator&lt;&lt;(std::ostream<sp/>&amp;out,<sp/>const<sp/>std::vector&lt;T&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.empty())<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(v.begin(),<sp/>v.end(),<sp/>std::ostream_iterator&lt;T&gt;(out,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//TENSOR_EXTRA_H</highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/general/nmspc_tensor_extra.h"/>
  </compounddef>
</doxygen>
