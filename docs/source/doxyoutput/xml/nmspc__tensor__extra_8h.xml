<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="nmspc__tensor__extra_8h" kind="file" language="C++">
    <compoundname>nmspc_tensor_extra.h</compoundname>
    <includes refid="nmspc__sfinae_8h" local="no">general/nmspc_sfinae.h</includes>
    <includes local="no">unsupported/Eigen/CXX11/Tensor</includes>
    <includedby refid="class__fdmrg_8cpp" local="no">/home/david/GitProjects/DMRG++/source/algorithms/class_fdmrg.cpp</includedby>
    <includedby refid="class__flbit_8cpp" local="no">/home/david/GitProjects/DMRG++/source/algorithms/class_flbit.cpp</includedby>
    <includedby refid="class__idmrg_8cpp" local="no">/home/david/GitProjects/DMRG++/source/algorithms/class_idmrg.cpp</includedby>
    <includedby refid="class__itebd_8cpp" local="no">/home/david/GitProjects/DMRG++/source/algorithms/class_itebd.cpp</includedby>
    <includedby refid="math_2svd_8h" local="no">/home/david/GitProjects/DMRG++/source/math/svd.h</includedby>
    <includedby refid="class__quantum__gates_8cpp" local="no">/home/david/GitProjects/DMRG++/source/physics/class_quantum_gates.cpp</includedby>
    <includedby refid="nmspc__quantum__mechanics_8cpp" local="yes">/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp</includedby>
    <includedby refid="class__env__base_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/edges/class_env_base.cpp</includedby>
    <includedby refid="class__ising__sdual_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_ising_sdual.cpp</includedby>
    <includedby refid="class__ising__tf__rf_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_ising_tf_rf.cpp</includedby>
    <includedby refid="class__lbit_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_lbit.cpp</includedby>
    <includedby refid="class__model__finite_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_model_finite.cpp</includedby>
    <includedby refid="class__model__infinite_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_model_infinite.cpp</includedby>
    <includedby refid="class__mpo__site_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/model/class_mpo_site.cpp</includedby>
    <includedby refid="class__mps__site_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp</includedby>
    <includedby refid="class__state__finite_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/state/class_state_finite.cpp</includedby>
    <includedby refid="class__state__infinite_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp</includedby>
    <includedby refid="expectation__value_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/common/contraction/expectation_value.cpp</includedby>
    <includedby refid="matrix__inverse__vector__product_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/common/contraction/matrix_inverse_vector_product.cpp</includedby>
    <includedby refid="matrix__vector__product_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/common/contraction/matrix_vector_product.cpp</includedby>
    <includedby refid="views_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/common/views.cpp</includedby>
    <includedby refid="finite_2env_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/env.cpp</includedby>
    <includedby refid="finite_2io_2h5resume_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/io/h5resume.cpp</includedby>
    <includedby refid="entropy_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/measure/entropy.cpp</includedby>
    <includedby refid="finite_2measure_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp</includedby>
    <includedby refid="entangled__states_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/mps-internal/entangled_states.cpp</includedby>
    <includedby refid="product__states_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/mps-internal/product_states.cpp</includedby>
    <includedby refid="finite_2mps_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp</includedby>
    <includedby refid="ops_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp</includedby>
    <includedby refid="ceres__subspace_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace.cpp</includedby>
    <includedby refid="ceres__subspace__hamiltonian_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp</includedby>
    <includedby refid="krylov__energy_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_energy.cpp</includedby>
    <includedby refid="krylov__solution_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_solution.cpp</includedby>
    <includedby refid="krylov__variance_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_variance.cpp</includedby>
    <includedby refid="primme__variance_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/primme_variance.cpp</includedby>
    <includedby refid="infinite_2measure_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/infinite/measure.cpp</includedby>
    <includedby refid="measure__ham_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/infinite/measure_ham.cpp</includedby>
    <includedby refid="measure__mom_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/infinite/measure_mom.cpp</includedby>
    <includedby refid="infinite_2opt_8cpp" local="no">/home/david/GitProjects/DMRG++/source/tools/infinite/opt.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="5">
        <label>string_view</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>complex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="30">
        <label>/home/david/GitProjects/DMRG++/source/tools/common/contraction/matrix_inverse_vector_product.cpp</label>
        <link refid="matrix__inverse__vector__product_8cpp"/>
      </node>
      <node id="38">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp</label>
        <link refid="ops_8cpp"/>
      </node>
      <node id="44">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/primme_variance.cpp</label>
        <link refid="primme__variance_8cpp"/>
      </node>
      <node id="39">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace.cpp</label>
        <link refid="ceres__subspace_8cpp"/>
      </node>
      <node id="41">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_energy.cpp</label>
        <link refid="krylov__energy_8cpp"/>
      </node>
      <node id="15">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp</label>
        <link refid="finite_2mps_8cpp"/>
      </node>
      <node id="6">
        <label>/home/david/GitProjects/DMRG++/source/math/svd.h</label>
        <link refid="math_2svd_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/mps-internal/product_states.cpp</label>
        <link refid="product__states_8cpp"/>
      </node>
      <node id="32">
        <label>/home/david/GitProjects/DMRG++/source/tools/common/views.cpp</label>
        <link refid="views_8cpp"/>
      </node>
      <node id="28">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp</label>
        <link refid="class__state__infinite_8cpp"/>
      </node>
      <node id="7">
        <label>/home/david/GitProjects/DMRG++/source/math/eig/matvec/matvec_mpo.cpp</label>
        <link refid="matvec__mpo_8cpp"/>
      </node>
      <node id="9">
        <label>/home/david/GitProjects/DMRG++/source/math/svd/svd_eigen.cpp</label>
        <link refid="svd__eigen_8cpp"/>
      </node>
      <node id="22">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_ising_sdual.cpp</label>
        <link refid="class__ising__sdual_8cpp"/>
      </node>
      <node id="26">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp</label>
        <link refid="class__mps__site_8cpp"/>
      </node>
      <node id="8">
        <label>/home/david/GitProjects/DMRG++/source/math/svd/svd.cpp</label>
        <link refid="math_2svd_2svd_8cpp"/>
      </node>
      <node id="10">
        <label>/home/david/GitProjects/DMRG++/source/math/svd/svd_lapacke.cpp</label>
        <link refid="svd__lapacke_8cpp"/>
      </node>
      <node id="33">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/io/h5resume.cpp</label>
        <link refid="finite_2io_2h5resume_8cpp"/>
      </node>
      <node id="29">
        <label>/home/david/GitProjects/DMRG++/source/tools/common/contraction/expectation_value.cpp</label>
        <link refid="expectation__value_8cpp"/>
      </node>
      <node id="35">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/measure.cpp</label>
        <link refid="finite_2measure_8cpp"/>
      </node>
      <node id="5">
        <label>/home/david/GitProjects/DMRG++/source/algorithms/class_itebd.cpp</label>
        <link refid="class__itebd_8cpp"/>
      </node>
      <node id="21">
        <label>/home/david/GitProjects/DMRG++/source/tensors/edges/class_env_base.cpp</label>
        <link refid="class__env__base_8cpp"/>
      </node>
      <node id="43">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_variance.cpp</label>
        <link refid="krylov__variance_8cpp"/>
      </node>
      <node id="11">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_model_finite.cpp</label>
        <link refid="class__model__finite_8cpp"/>
      </node>
      <node id="36">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/mps-internal/entangled_states.cpp</label>
        <link refid="entangled__states_8cpp"/>
      </node>
      <node id="23">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_ising_tf_rf.cpp</label>
        <link refid="class__ising__tf__rf_8cpp"/>
      </node>
      <node id="31">
        <label>/home/david/GitProjects/DMRG++/source/tools/common/contraction/matrix_vector_product.cpp</label>
        <link refid="matrix__vector__product_8cpp"/>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/david/GitProjects/DMRG++/source/algorithms/class_fdmrg.cpp</label>
        <link refid="class__fdmrg_8cpp"/>
      </node>
      <node id="16">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_direct_functor.cpp</label>
        <link refid="ceres__direct__functor_8cpp"/>
      </node>
      <node id="24">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_lbit.cpp</label>
        <link refid="class__lbit_8cpp"/>
      </node>
      <node id="40">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/ceres_subspace_hamiltonian.cpp</label>
        <link refid="ceres__subspace__hamiltonian_8cpp"/>
      </node>
      <node id="27">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_state_finite.cpp</label>
        <link refid="class__state__finite_8cpp"/>
      </node>
      <node id="25">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_mpo_site.cpp</label>
        <link refid="class__mpo__site_8cpp"/>
      </node>
      <node id="19">
        <label>/home/david/GitProjects/DMRG++/source/physics/class_quantum_gates.cpp</label>
        <link refid="class__quantum__gates_8cpp"/>
      </node>
      <node id="18">
        <label>/home/david/GitProjects/DMRG++/source/tools/infinite/svd.cpp</label>
        <link refid="tools_2infinite_2svd_8cpp"/>
      </node>
      <node id="34">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/measure/entropy.cpp</label>
        <link refid="entropy_8cpp"/>
      </node>
      <node id="46">
        <label>/home/david/GitProjects/DMRG++/source/tools/infinite/measure_mom.cpp</label>
        <link refid="measure__mom_8cpp"/>
      </node>
      <node id="42">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/opt-internal/krylov_solution.cpp</label>
        <link refid="krylov__solution_8cpp"/>
      </node>
      <node id="17">
        <label>/home/david/GitProjects/DMRG++/source/tools/infinite/measure_ham.cpp</label>
        <link refid="measure__ham_8cpp"/>
      </node>
      <node id="45">
        <label>/home/david/GitProjects/DMRG++/source/tools/infinite/measure.cpp</label>
        <link refid="infinite_2measure_8cpp"/>
      </node>
      <node id="47">
        <label>/home/david/GitProjects/DMRG++/source/tools/infinite/opt.cpp</label>
        <link refid="infinite_2opt_8cpp"/>
      </node>
      <node id="12">
        <label>/home/david/GitProjects/DMRG++/source/tensors/model/class_model_infinite.cpp</label>
        <link refid="class__model__infinite_8cpp"/>
      </node>
      <node id="20">
        <label>/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp</label>
        <link refid="nmspc__quantum__mechanics_8cpp"/>
      </node>
      <node id="4">
        <label>/home/david/GitProjects/DMRG++/source/algorithms/class_idmrg.cpp</label>
        <link refid="class__idmrg_8cpp"/>
      </node>
      <node id="13">
        <label>/home/david/GitProjects/DMRG++/source/tools/common/split.cpp</label>
        <link refid="split_8cpp"/>
      </node>
      <node id="14">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/env.cpp</label>
        <link refid="finite_2env_8cpp"/>
      </node>
      <node id="3">
        <label>/home/david/GitProjects/DMRG++/source/algorithms/class_flbit.cpp</label>
        <link refid="class__flbit_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_textra_1_1idx__dim__pair" prot="public">Textra::idx_dim_pair</innerclass>
    <innernamespace refid="namespace_textra">Textra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>6/7/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__sfinae_8h" kindref="compound">general/nmspc_sfinae.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unsupported/Eigen/CXX11/Tensor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_textra" kindref="compound">Textra</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="21" refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType</ref><sp/>=<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="23" refid="namespace_textra_1a358a270e8b355388963a513bd6617131" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a358a270e8b355388963a513bd6617131" kindref="member">VectorType</ref><sp/>=<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;Eigen::Index<sp/>rank&gt;</highlight></codeline>
<codeline lineno="25" refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref><sp/>=<sp/>std::array&lt;Eigen::Index,<sp/>rank&gt;;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespace_textra_1a10f3538b95c4cbb49de58e66b2f567e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a10f3538b95c4cbb49de58e66b2f567e7" kindref="member">array8</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;8&gt;</ref>;</highlight></codeline>
<codeline lineno="28" refid="namespace_textra_1ac3a3122d06a20ecb2be3789b4c396633" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ac3a3122d06a20ecb2be3789b4c396633" kindref="member">array7</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;7&gt;</ref>;</highlight></codeline>
<codeline lineno="29" refid="namespace_textra_1accfb4fc520dc9a420a8a272f0d31c613" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1accfb4fc520dc9a420a8a272f0d31c613" kindref="member">array6</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;6&gt;</ref>;</highlight></codeline>
<codeline lineno="30" refid="namespace_textra_1aa5d67eec58bb02c58a5abb4446fd2e62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa5d67eec58bb02c58a5abb4446fd2e62" kindref="member">array5</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;5&gt;</ref>;</highlight></codeline>
<codeline lineno="31" refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">array4</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;4&gt;</ref>;</highlight></codeline>
<codeline lineno="32" refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">array3</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;3&gt;</ref>;</highlight></codeline>
<codeline lineno="33" refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">array2</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;2&gt;</ref>;</highlight></codeline>
<codeline lineno="34" refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">array1</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;1&gt;</ref>;</highlight></codeline>
<codeline lineno="35" refid="namespace_textra_1a22edfa414f8c3a6a550de61a5da26013" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a22edfa414f8c3a6a550de61a5da26013" kindref="member">array0</ref><sp/>=<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array&lt;0&gt;</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shorthand<sp/>for<sp/>the<sp/>list<sp/>of<sp/>index<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>N&gt;</highlight></codeline>
<codeline lineno="39" refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref><sp/>=<sp/>std::array&lt;Eigen::IndexPair&lt;Eigen::Index&gt;,<sp/>N&gt;;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;0&gt;</ref><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">xType&gt;</highlight></codeline>
<codeline lineno="44" refid="namespace_textra_1a88b1c409bada0f4ef38328f693f13428" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;N&gt;</ref><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idxType<sp/>(&amp;list1)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idxType<sp/>(&amp;list2)[N])<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>numpy-style<sp/>indexing<sp/>for<sp/>contraction.<sp/>Each<sp/>list<sp/>contains<sp/>a<sp/>list<sp/>of<sp/>indices<sp/>to<sp/>be<sp/>contracted<sp/>for<sp/>the<sp/>respective</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tensors.<sp/>This<sp/>function<sp/>zips<sp/>them<sp/>together<sp/>into<sp/>pairs<sp/>as<sp/>used<sp/>in<sp/>Eigen::Tensor<sp/>module.<sp/>This<sp/>does<sp/>not<sp/>sort<sp/>the<sp/>indices<sp/>in<sp/>decreasing<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;N&gt;</ref><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pairlistOut[i]<sp/>=<sp/><ref refid="struct_eigen_1_1_index_pair" kindref="compound">Eigen::IndexPair&lt;Eigen::Index&gt;</ref>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(list1[i]),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(list2[i])};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="struct_textra_1_1idx__dim__pair" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_textra_1_1idx__dim__pair" kindref="compound">idx_dim_pair</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="struct_textra_1_1idx__dim__pair_1a86478621a8d56da3699316693fc7c4a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Index<sp/><ref refid="struct_textra_1_1idx__dim__pair_1a86478621a8d56da3699316693fc7c4a0" kindref="member">idxA</ref>;</highlight></codeline>
<codeline lineno="56" refid="struct_textra_1_1idx__dim__pair_1a2e5b90c7fc58b0c8a104254c9f7ea80a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Index<sp/><ref refid="struct_textra_1_1idx__dim__pair_1a2e5b90c7fc58b0c8a104254c9f7ea80a" kindref="member">idxB</ref>;</highlight></codeline>
<codeline lineno="57" refid="struct_textra_1_1idx__dim__pair_1a014b061f64a22a97842fd4c774b83da5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Index<sp/><ref refid="struct_textra_1_1idx__dim__pair_1a014b061f64a22a97842fd4c774b83da5" kindref="member">dimB</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NB,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="61" refid="namespace_textra_1ab3499a5589fe9c4fd846ad73d5bc592a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;N&gt;</ref><sp/><ref refid="namespace_textra_1ab3499a5589fe9c4fd846ad73d5bc592a" kindref="member">sortIdx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Eigen::Index,<sp/>NB&gt;<sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Index<sp/>(&amp;idx_ctrct_A)[N],</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Index<sp/>(&amp;idx_ctrct_B)[N])<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>doing<sp/>contractions,<sp/>some<sp/>indices<sp/>may<sp/>be<sp/>larger<sp/>than<sp/>others.<sp/>For<sp/>performance,<sp/>you<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contract<sp/>the<sp/>largest<sp/>indices<sp/>first.<sp/>This<sp/>will<sp/>return<sp/>a<sp/>sorted<sp/>index<sp/>list<sp/>in<sp/>decreasing<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;idx_dim_pair,<sp/>N&gt;<sp/>idx_dim_pair_list;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{<sp/>idx_dim_pair_list[i]<sp/>=<sp/>{idx_ctrct_A[i],<sp/>idx_ctrct_B[i],<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[idx_ctrct_B[i]]};<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(idx_dim_pair_list.begin(),<sp/>idx_dim_pair_list.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j)<sp/>{<sp/>return<sp/>i.dimB<sp/>&gt;<sp/>j.dimB;<sp/>});</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;N&gt;</ref><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{<sp/>pairlistOut[i]<sp/>=<sp/><ref refid="struct_eigen_1_1_index_pair" kindref="compound">Eigen::IndexPair&lt;long&gt;</ref>{idx_dim_pair_list[i].idxA,<sp/>idx_dim_pair_list[i].idxB};<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pairlistOut;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluates<sp/>expressions<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" kindref="member">asEval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorBase&lt;T,Eigen::ReadOnlyAccessors&gt;<sp/>&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Evaluator<sp/>=<sp/><sp/>Eigen::TensorEvaluator&lt;const<sp/>Eigen::TensorForcedEvalOp&lt;const<sp/>T&gt;,<sp/>Eigen::DefaultDevice&gt;;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>the<sp/>expression<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::TensorForcedEvalOp&lt;const<sp/>T&gt;<sp/>eval<sp/>=<sp/>expr.eval();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Evaluator<sp/>tensor(eval,<sp/>Eigen::DefaultDevice());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor.evalSubExprsIfNeeded(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//***************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Different<sp/>views<sp/>for<sp/>rank<sp/>1<sp/>and<sp/>2<sp/>tensors//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//***************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="93" refid="namespace_textra_1ae4adc4f53646417d7c2992c393610094" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/><ref refid="namespace_textra_1ae4adc4f53646417d7c2992c393610094" kindref="member">extractDiagonal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensor.dimension(0)<sp/>!=<sp/>tensor.dimension(1))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;extractDiagonal<sp/>expects<sp/>a<sp/>square<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>diagonals(tensor.dimension(0));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Eigen::Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.dimension(0);<sp/>i++)<sp/>diagonals(i)<sp/>=<sp/>tensor(i,<sp/>i);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diagonals;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="101" refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">asDiagonal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.inflate(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">array1</ref>{tensor.size()<sp/>+<sp/>1}).reshape(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">array2</ref>{tensor.size(),<sp/>tensor.size()});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="106" refid="namespace_textra_1a6944810952720760c1bab4e73d67741d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespace_textra_1a6944810952720760c1bab4e73d67741d" kindref="member">asDiagonalSquared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.square().inflate(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">array1</ref>{tensor.size()<sp/>+<sp/>1}).reshape(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">array2</ref>{tensor.size(),<sp/>tensor.size()});</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="111" refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">asDiagonalInversed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.inverse().inflate(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">array1</ref>{tensor.size()<sp/>+<sp/>1}).reshape(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">array2</ref>{tensor.size(),<sp/>tensor.size()});</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="116" refid="namespace_textra_1ac87d98493f40ec2bd0bd37a6e2f82b0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">asDiagonalInversed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>tensor.dimension(0)<sp/>==<sp/>tensor.dimension(1))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Textra::asDiagonalInversed<sp/>expects<sp/>a<sp/>square<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">asDiagonalInversed</ref>(<ref refid="namespace_textra_1ae4adc4f53646417d7c2992c393610094" kindref="member">extractDiagonal</ref>(tensor));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="122" refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorBase&lt;T,Eigen::ReadOnlyAccessors&gt;<sp/>&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" kindref="member">asEval</ref>(expr.square().sum().sqrt().abs()).coeff(0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="128" refid="namespace_textra_1a5f56dc93eefb399b6d351ba7fec85716" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a5f56dc93eefb399b6d351ba7fec85716" kindref="member">asNormalized</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorBase&lt;T,Eigen::ReadOnlyAccessors&gt;<sp/>&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/><ref refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" kindref="member">Textra::asEval</ref>(expr);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eigen::internal::remove_const&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(tensor)::<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>&gt;::type;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DimType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(tensor)::Dimensions::Base;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>DimType{}.size();<sp/></highlight><highlight class="comment">//<sp/>Because<sp/>T::Dimensions<sp/>is<sp/>sometimes<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a5ed7f7b193e60cb8ddbfe1e8aa1f1455" kindref="member">TensorType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,rank&gt;;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensorMap<sp/>=<sp/>Eigen::TensorMap&lt;TensorType&gt;<sp/>(tensor.data(),tensor.dimensions());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;double,0&gt;<sp/>normInverse<sp/>=<sp/>tensorMap.square().sum().sqrt().abs().inverse();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacetools_1_1finite_1_1opt_1_1internal_1a5ed7f7b193e60cb8ddbfe1e8aa1f1455" kindref="member">TensorType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tensorMap<sp/>*<sp/>tensorMap.constant(normInverse.coeff(0)));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="140" refid="namespace_textra_1a2ec3c8de67b04570d63c5e62d0018eaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a2ec3c8de67b04570d63c5e62d0018eaf" kindref="member">normalize</ref>(Eigen::Tensor&lt;Scalar,rank&gt;<sp/>&amp;<sp/>tensor)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;VectorType&lt;Scalar&gt;&gt;<sp/>map(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map.normalize();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="146" refid="namespace_textra_1ae17bce4ded691562012858fb38bbe40c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ae17bce4ded691562012858fb38bbe40c" kindref="member">TensorConstant</ref>(<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>constant,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Eigen::Index,<sp/>rank&gt;<sp/>&amp;dims){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,rank&gt;<sp/>tensor(dims);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor.setConstant(constant);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Dims&gt;</highlight></codeline>
<codeline lineno="153" refid="namespace_textra_1a0a2edc0608bfd555cd06bd5c77e41785" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ae17bce4ded691562012858fb38bbe40c" kindref="member">TensorConstant</ref>(<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>constant,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dims<sp/>...<sp/>dims){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ae17bce4ded691562012858fb38bbe40c" kindref="member">TensorConstant</ref>(constant,<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">std::array</ref>&lt;Eigen::Index,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims)&gt;{dims...});</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="158" refid="namespace_textra_1acd37e413b112a7f8bfb3f5545b3407b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1acd37e413b112a7f8bfb3f5545b3407b0" kindref="member">TensorRandom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Eigen::Index,<sp/>rank&gt;<sp/>&amp;dims){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,rank&gt;<sp/>tensor(dims);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor.setRandom();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Dims&gt;</highlight></codeline>
<codeline lineno="165" refid="namespace_textra_1aa2bcac346273b457e00a84a8b2e74dfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1acd37e413b112a7f8bfb3f5545b3407b0" kindref="member">TensorRandom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dims<sp/>...<sp/>dims){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TensorRandom&lt;Scalar&gt;(<ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">std::array</ref>&lt;Eigen::Index,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims)&gt;{dims...});</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="170" refid="namespace_textra_1acc2dd09752f76d2c1a98a63562a3d32c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1acc2dd09752f76d2c1a98a63562a3d32c" kindref="member">TensorIdentity</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>diagSize){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>tensor(diagSize);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor.setConstant(1.0);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">asDiagonal</ref>(tensor);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="179" refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>rank-2&gt;<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">trace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;1&gt;</ref><sp/>&amp;<sp/>idx_pair)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(rank<sp/>&gt;=<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>must<sp/>be<sp/>&gt;=<sp/>2<sp/>for<sp/>trace<sp/>of<sp/>an<sp/>index<sp/>pair&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx0<sp/>=<sp/>idx_pair[0].first;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx1<sp/>=<sp/>idx_pair[0].second;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tracing<sp/>pair<sp/>%ld<sp/>%ld<sp/>of<sp/>rank<sp/>%ld<sp/>tensor&quot;</highlight><highlight class="normal">,<sp/>idx0,<sp/>idx1,<sp/>rank);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensor.dimension(idx0)<sp/>!=<sp/>tensor.dimension(idx1))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>trace<sp/>index<sp/>pair<sp/>of<sp/>different<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/>=<sp/>tensor.dimension(idx0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/><ref refid="namespaceqm_1_1spin_half_1a6e531542ad7b6d1713f0c60ab77c1b02" kindref="member">id</ref>(dim0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.setConstant(1.0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">asDiagonal</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).contract(tensor,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0l,1l},{idx0,idx1}));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="192" refid="namespace_textra_1ae538462362205a31f540cb244a739588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>rank-4&gt;<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">trace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair&lt;2&gt;</ref><sp/>&amp;<sp/>idx_pair)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(rank<sp/>&gt;=<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>must<sp/>be<sp/>&gt;=<sp/>4<sp/>for<sp/>trace<sp/>of<sp/>2<sp/>index<sp/>pairs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx00<sp/>=<sp/>idx_pair[0].first;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx01<sp/>=<sp/>idx_pair[0].second;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx10<sp/>=<sp/>idx_pair[1].first;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx11<sp/>=<sp/>idx_pair[1].second;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idx_pair[0]<sp/>connect<sp/>to<sp/>each<sp/>other,<sp/>and<sp/>then<sp/>idx_pair[1]<sp/>connect<sp/>to<sp/>each<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensor.dimension(idx00)<sp/>!=<sp/>tensor.dimension(idx01))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>trace<sp/>index<sp/>pair<sp/>of<sp/>different<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensor.dimension(idx10)<sp/>!=<sp/>tensor.dimension(idx11))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>trace<sp/>index<sp/>pair<sp/>of<sp/>different<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim00<sp/>=<sp/>tensor.dimension(idx00);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim11<sp/>=<sp/>tensor.dimension(idx11);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,1&gt;<sp/>id00(dim00),<sp/>id11(dim11);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id00.setConstant(1.0);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id11.setConstant(1.0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">asDiagonal</ref>(id00)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(<ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">asDiagonal</ref>(id11),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>())<sp/></highlight><highlight class="comment">//<sp/>Outer<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(tensor,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0l,1l,2l,3l},{idx00,idx01,idx10,idx11}));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Matrix<sp/>to<sp/>tensor<sp/>conversions//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detects<sp/>if<sp/>Derived<sp/>is<sp/>a<sp/>plain<sp/>object,<sp/>like<sp/>&quot;MatrixXd&quot;<sp/>or<sp/>similar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::decay<sp/>removes<sp/>pointer<sp/>or<sp/>ref<sp/>qualifiers<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="219" refid="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" kindref="member">is_plainObject</ref><sp/>=<sp/>std::is_base_of&lt;Eigen::PlainObjectBase&lt;std::decay_t&lt;Derived&gt;&gt;,<sp/>std::decay_t&lt;Derived&gt;&gt;;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="222" refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,rank&gt;<sp/>&amp;dims)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matrix.derived().eval().data(),<sp/>dims);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="227" refid="namespace_textra_1af300b6545f6073e1a259337c5a195dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;typename<sp/>Derived::Scalar,<sp/>rank&gt;<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DSizes&lt;T,rank&gt;<sp/>&amp;dims)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matrix.derived().eval().data(),<sp/>dims);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helpful<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Dims&gt;</highlight></codeline>
<codeline lineno="233" refid="namespace_textra_1a281cbcd3c3f8d19d1361f8690cafa417" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dims...<sp/>dims)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims)<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;TensorCast:<sp/>sizeof...<sp/>(Dims)<sp/>must<sp/>be<sp/>larger<sp/>than<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(matrix,<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims)&gt;{dims...});</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="239" refid="namespace_textra_1a46291d0e1b234a1c8a086be9ce0fa83b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(Derived::ColsAtCompileTime<sp/>==<sp/>1<sp/>or<sp/>Derived::RowsAtCompileTime<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(matrix,<sp/>matrix.size());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">TensorCast</ref>(matrix,<sp/>matrix.rows(),<sp/>matrix.cols());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="248" refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;long,<sp/>rank&gt;<sp/>&amp;dims)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::TensorMap&lt;const<sp/>Eigen::Tensor&lt;const<sp/>typename<sp/>Derived::Scalar,<sp/>rank&gt;&gt;(matrix.derived().data(),<sp/>dims);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Dims&gt;</highlight></codeline>
<codeline lineno="253" refid="namespace_textra_1a684ff5b7291b8e7ed862586f31f0ad84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dims...<sp/>dims)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(matrix,<sp/><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">std::array</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Dims))&gt;{dims...});</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="258" refid="namespace_textra_1aeb35d2ee77421e594bd469e0f8ada467" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::PlainObjectBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(Derived::ColsAtCompileTime<sp/>==<sp/>1<sp/>or<sp/>Derived::RowsAtCompileTime<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(matrix,<sp/>matrix.size());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">TensorMap</ref>(matrix,<sp/>matrix.rows(),<sp/>matrix.cols());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//Tensor<sp/>to<sp/>matrix<sp/>conversions//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//****************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sizeType&gt;</highlight></codeline>
<codeline lineno="273" refid="namespace_textra_1a337e1d8716e1f2818586f9813eb158d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a337e1d8716e1f2818586f9813eb158d3" kindref="member">MatrixCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorBase&lt;T,Eigen::ReadOnlyAccessors&gt;<sp/>&amp;<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>rows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/><ref refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" kindref="member">asEval</ref>(expr);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eigen::internal::remove_const&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(tensor)::<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>&gt;::type;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_textra_1a7db6974446758b79bad26e168a8daa78" kindref="member">MatrixType&lt;Scalar&gt;</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>rows,<sp/>cols));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="280" refid="namespace_textra_1ae1f575ce11586f1ebc16c1b3206a318e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1ae1f575ce11586f1ebc16c1b3206a318e" kindref="member">VectorCast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::TensorBase&lt;T,Eigen::ReadOnlyAccessors&gt;<sp/>&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/><ref refid="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" kindref="member">asEval</ref>(expr);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>Eigen::internal::array_prod(tensor.dimensions());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eigen::internal::remove_const&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(tensor)::<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>&gt;::type;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_textra_1a358a270e8b355388963a513bd6617131" kindref="member">VectorType&lt;Scalar&gt;</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>size));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sizeType&gt;</highlight></codeline>
<codeline lineno="288" refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">MatrixMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>rows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>rows,<sp/>cols);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sizeType&gt;</highlight></codeline>
<codeline lineno="293" refid="namespace_textra_1a395f19fa66e38f2014da1f2e8b0b62c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">MatrixMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>rows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sizeType<sp/>cols)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>map<sp/>from<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="296" refid="namespace_textra_1ace4d8df259f315e2b9ccba711286d3f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">MatrixMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>MatrixType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.dimension(0),<sp/>tensor.dimension(1));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar&gt;</highlight></codeline>
<codeline lineno="300" refid="namespace_textra_1a50bbaaa027e8530e0817d99d52cd45bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">MatrixMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;&amp;tensor)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>map<sp/>from<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="303" refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">VectorMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Map&lt;const<sp/>VectorType&lt;Scalar&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="307" refid="namespace_textra_1a3737814fc1a458063f769e67313c7ddd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">VectorMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;&amp;tensor)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>map<sp/>from<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>storage<sp/>layout<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="313" refid="namespace_textra_1a3e7f18ef077f7c5fc981fed9c47478f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank,<sp/>Eigen::RowMajor&gt;<sp/><ref refid="namespace_textra_1a3e7f18ef077f7c5fc981fed9c47478f4" kindref="member">to_RowMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank,<sp/>Eigen::ColMajor&gt;<sp/>tensor)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>rank&gt;<sp/>neworder;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(std::begin(neworder),<sp/>std::end(neworder),<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(neworder.data(),<sp/>neworder.data()<sp/>+<sp/>neworder.size());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.swap_layout().shuffle(neworder);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="321" refid="namespace_textra_1aa896827b924587e35680dfa6753362b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Eigen::RowMajor&gt;<sp/><ref refid="namespace_textra_1a3e7f18ef077f7c5fc981fed9c47478f4" kindref="member">to_RowMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matrix.IsRowMajor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;<sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Eigen::RowMajor&gt;<sp/>matrowmajor<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrowmajor;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="328" refid="namespace_textra_1a287411872c7efcfb47651c4b6db00b78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank,<sp/>Eigen::ColMajor&gt;<sp/><ref refid="namespace_textra_1a287411872c7efcfb47651c4b6db00b78" kindref="member">to_ColMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank,<sp/>Eigen::RowMajor&gt;<sp/>tensor)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>rank&gt;<sp/>neworder;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(std::begin(neworder),<sp/>std::end(neworder),<sp/>0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(neworder.data(),<sp/>neworder.data()<sp/>+<sp/>neworder.size());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.swap_layout().shuffle(neworder);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="336" refid="namespace_textra_1a2b36f2257692f7122151e5cab3c067ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Eigen::ColMajor&gt;<sp/><ref refid="namespace_textra_1a287411872c7efcfb47651c4b6db00b78" kindref="member">to_ColMajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>matrix.IsRowMajor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;<sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;typename<sp/>Derived::Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Eigen::ColMajor&gt;<sp/>matrowmajor<sp/>=<sp/>matrix;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrowmajor;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>real/complex<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//******************************************************//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="347" refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" kindref="member">isReal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;obj,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>1e-14)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="structsfinae_1_1is__specialization" kindref="compound">sfinae::is_specialization&lt;Scalar, std::complex&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imag_sum<sp/>=<sp/>obj.derived().imag().cwiseAbs().sum();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imag_sum<sp/>&lt;<sp/>threshold;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="358" refid="namespace_textra_1ae7794bc6f089ffe1c7121692c28c7592" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" kindref="member">isReal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>1e-14)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;&gt;<sp/>vector(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" kindref="member">isReal</ref>(vector,<sp/>name,<sp/>threshold);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="364" refid="namespace_textra_1afe298645862508a85a9695e60345ece4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afe298645862508a85a9695e60345ece4" kindref="member">hasNaN</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;obj,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.derived().hasNaN();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="369" refid="namespace_textra_1a4ee268cf6a8915dd7591bbeb89b0195c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afe298645862508a85a9695e60345ece4" kindref="member">hasNaN</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;const<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;&gt;<sp/>vector(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afe298645862508a85a9695e60345ece4" kindref="member">hasNaN</ref>(vector,<sp/>name);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="375" refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>angles;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>std::complex&lt;double&gt;&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.cols();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.col(i)(0).imag()<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.emplace_back(0.0);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.emplace_back(std::arg(v.col(i)(0)));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>inv_phase<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>(0.0,<sp/>-1.0)<sp/>*<sp/>angles.back();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>exp_inv_phase<sp/>=<sp/>std::exp(inv_phase);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>*=<sp/>exp_inv_phase;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>=<sp/>(v.col(i).array().imag().cwiseAbs()<sp/>&gt;<sp/>1e-15).select(v.col(i),<sp/>v.col(i).real());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angles;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="395" refid="namespace_textra_1adf0b0f09052c2cb60ff713691d9f28ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map<sp/>=<sp/>Eigen::Map&lt;Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" kindref="member">subtract_phase</ref>(map);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="401" refid="namespace_textra_1af6755d93497c739f4cab661892897c46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(Eigen::MatrixBase&lt;Derived&gt;<sp/>&amp;v,<sp/>std::vector&lt;double&gt;<sp/>&amp;angles)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Derived::Scalar</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(std::is_same&lt;<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>,<sp/>std::complex&lt;double&gt;&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.cols()<sp/>!=<sp/>angles.size())<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>columns<sp/>and<sp/>angles<sp/>supplied&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.cols();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>exp_phase<sp/>=<sp/>std::exp(<ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>(0.0,<sp/>1.0)<sp/>*<sp/>angles[i]);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>*=<sp/>exp_phase;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.col(i)<sp/>=<sp/>(v.col(i).array().imag().cwiseAbs()<sp/>&gt;<sp/>1e-15).select(v.col(i),<sp/>v.col(i).real());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="414" refid="namespace_textra_1ae8de771b63d94ce09bc102d204eed693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor,<sp/>std::vector&lt;double&gt;<sp/>&amp;angles)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map<sp/>=<sp/>Eigen::Map&lt;Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1af6755d93497c739f4cab661892897c46" kindref="member">add_phase</ref>(map,<sp/>angles);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>sparcity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="421" refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>rank&gt;<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map<sp/>=<sp/>Eigen::Map&lt;const<sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;&gt;(tensor.data(),<sp/>tensor.size());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((map.array()<sp/>!=<sp/>0.0).count())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(map.size());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="426" refid="namespace_textra_1a95c32bb517f4bd1b99a19d890e6be334" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" kindref="member">sparcity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::EigenBase&lt;Derived&gt;<sp/>&amp;matrix)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((matrix.derived().array()<sp/>!=<sp/>0.0).count())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(matrix.derived().size());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*clang-format<sp/>on<sp/>*/</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h"/>
  </compounddef>
</doxygen>
