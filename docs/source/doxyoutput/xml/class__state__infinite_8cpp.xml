<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class__state__infinite_8cpp" kind="file" language="C++">
    <compoundname>class_state_infinite.cpp</compoundname>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="class__mps__site_8h" local="no">tensors/state/class_mps_site.h</includes>
    <includes refid="class__state__infinite_8h" local="no">tensors/state/class_state_infinite.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="split_8h" local="no">tools/common/split.h</includes>
    <includes refid="views_8h" local="no">tools/common/views.h</includes>
    <includes refid="infinite_2measure_8h" local="no">tools/infinite/measure.h</includes>
    <includes refid="infinite_2mps_8h" local="no">tools/infinite/mps.h</includes>
    <incdepgraph>
      <node id="20">
        <label>measure/state_measure_infinite.h</label>
        <link refid="state__measure__infinite_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>limits</label>
      </node>
      <node id="2">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>tools/infinite/mps.h</label>
        <link refid="infinite_2mps_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="18">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="39">
        <label>tools/infinite/measure.h</label>
        <link refid="infinite_2measure_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="24">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>numeric</label>
      </node>
      <node id="25">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="15">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp</label>
        <link refid="class__state__infinite_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="36">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="22">
        <label>math/svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>fmt/core.h</label>
      </node>
      <node id="7">
        <label>string_view</label>
      </node>
      <node id="37">
        <label>tuple</label>
      </node>
      <node id="27">
        <label>tools/common/split.h</label>
        <link refid="split_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>optional</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="29">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>array</label>
      </node>
      <node id="11">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="34">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="28">
        <label>deque</label>
      </node>
      <node id="31">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="12">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="41">
        <label>set</label>
      </node>
      <node id="16">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>tools/common/views.h</label>
        <link refid="views_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>complex</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="4">
        <label>enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>tensors/state/class_state_infinite.h</label>
        <link refid="class__state__infinite_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="class__state__infinite_8cpp_1a3c7b5b32755c4001baed0efb5c20517d" prot="public" static="no">
        <type><ref refid="classclass__state__infinite_1aa579cd672ec5860930cd3cb5f8f9534d" kindref="member">class_state_infinite::Scalar</ref></type>
        <definition>using Scalar =  class_state_infinite::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp" line="14" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>7/22/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mps__site_8h" kindref="compound">tensors/state/class_mps_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__infinite_8h" kindref="compound">tensors/state/class_state_infinite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="split_8h" kindref="compound">tools/common/split.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="views_8h" kindref="compound">tools/common/views.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="infinite_2measure_8h" kindref="compound">tools/infinite/measure.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="infinite_2mps_8h" kindref="compound">tools/infinite/mps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class__state__infinite_8cpp_1a3c7b5b32755c4001baed0efb5c20517d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__state__infinite_1aa579cd672ec5860930cd3cb5f8f9534d" kindref="member">class_state_infinite::Scalar</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="classclass__state__infinite_1a1bd3def0c65075eaa7f9cbaf91517103" refkind="member"><highlight class="normal"><ref refid="classclass__state__infinite_1a1bd3def0c65075eaa7f9cbaf91517103" kindref="member">class_state_infinite::class_state_infinite</ref>()<sp/>:<sp/>MPS_A(std::make_unique&lt;<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref>&gt;()),<sp/>MPS_B(std::make_unique&lt;<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref>&gt;())<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Constructing<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>define<sp/>the<sp/>destructor<sp/>and<sp/>other<sp/>special<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>enclose<sp/>data<sp/>in<sp/>unique_ptr<sp/>for<sp/>this<sp/>pimpl<sp/>idiom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>unique_ptr<sp/>will<sp/>forcibly<sp/>inline<sp/>its<sp/>own<sp/>default<sp/>deleter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>follow<sp/>&quot;rule<sp/>of<sp/>five&quot;,<sp/>so<sp/>we<sp/>must<sp/>also<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>own<sp/>copy/move<sp/>ctor<sp/>and<sp/>copy/move<sp/>assignments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>has<sp/>the<sp/>side<sp/>effect<sp/>that<sp/>we<sp/>must<sp/>define<sp/>our<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator=<sp/>and<sp/>copy<sp/>assignment<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>more:<sp/>https://stackoverflow.com/questions/33212686/how-to-use-unique-ptr-with-forward-declared-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>here:<sp/><sp/>https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="classclass__state__infinite_1a490a4b1801a9f41f5d6f838dcac2feb8" kindref="member">class_state_infinite::~class_state_infinite</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classclass__state__infinite_1a1bd3def0c65075eaa7f9cbaf91517103" kindref="member">class_state_infinite::class_state_infinite</ref>(<ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a6b7ffdadbfa19a051863ffe8daff02be" kindref="member">class_state_infinite::operator=</ref>(<ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classclass__state__infinite_1ab5e0ed98eaaf1d3c152ff7cc99a4a5fa" refkind="member"><highlight class="normal"><ref refid="classclass__state__infinite_1a1bd3def0c65075eaa7f9cbaf91517103" kindref="member">class_state_infinite::class_state_infinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;other):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS_A(std::make_unique&lt;<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref>&gt;(*other.MPS_A)),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS_B(std::make_unique&lt;<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref>&gt;(*other.MPS_B)),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>swapped(other.swapped),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>cache(other.cache),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>name(other.name),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>algo(other.algo),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>measurements(other.measurements),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>lowest_recorded_variance(other.lowest_recorded_variance){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classclass__state__infinite_1a1f5d5480e1f7005ec5ed7e2e5d79c97d" refkind="member"><highlight class="normal"><ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a6b7ffdadbfa19a051863ffe8daff02be" kindref="member">class_state_infinite::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite" kindref="compound">class_state_infinite</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(*other.<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(*other.<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1abad9c51136ef58f8ca82ce5576a5a176" kindref="member">swapped</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1abad9c51136ef58f8ca82ce5576a5a176" kindref="member">swapped</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a1ad27ada2e042d55103d11061a480bef" kindref="member">name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1a1ad27ada2e042d55103d11061a480bef" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1adc7a60752569ea4a63b0fd8716c9033f" kindref="member">algo</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1adc7a60752569ea4a63b0fd8716c9033f" kindref="member">algo</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a5a4ce8f495013148609cd943088090ab" kindref="member">measurements</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1a5a4ce8f495013148609cd943088090ab" kindref="member">measurements</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a307cb6e8369fd82697ae9e052c4c8cab" kindref="member">lowest_recorded_variance</ref><sp/>=<sp/>other.<ref refid="classclass__state__infinite_1a307cb6e8369fd82697ae9e052c4c8cab" kindref="member">lowest_recorded_variance</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classclass__state__infinite_1a6ce346168d171f2bb61f60506318021d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6ce346168d171f2bb61f60506318021d" kindref="member">class_state_infinite::initialize</ref>(<ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15d" kindref="member">ModelType</ref><sp/><ref refid="namespacesettings_1_1model_1a3628af587c3663ba75c2a3d6db7e16e6" kindref="member">model_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1model_1a3628af587c3663ba75c2a3d6db7e16e6" kindref="member">model_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15da4ccfba77ccf8015dcaa6f9315b148509" kindref="member">ModelType::ising_tf_rf</ref>:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">settings::model::ising_tf_rf::spin_dim</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9f27db0468ce0ce2994eb68dc919b15da858fa9ae925c795dfa31e8ccab44cc76" kindref="member">ModelType::ising_sdual</ref>:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/><ref refid="namespacesettings_1_1model_1_1ising__sdual_1a75153b8008a9b96417f44676ee0100a2" kindref="member">settings::model::ising_sdual::spin_dim</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>M(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>L(1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>is<sp/>a<sp/>product<sp/>state,<sp/>spins<sp/>pointing<sp/>up<sp/>in<sp/>z.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>M.setZero();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>M(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>L.setConstant(1.0);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(M,<sp/>L,<sp/>0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(M,<sp/>L,<sp/>1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_LC(L);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classclass__state__infinite_1a839faecde06778d5f407aa43e29502ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a839faecde06778d5f407aa43e29502ad" kindref="member">class_state_infinite::set_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;statename)<sp/>{<sp/><ref refid="classclass__state__infinite_1a1ad27ada2e042d55103d11061a480bef" kindref="member">name</ref><sp/>=<sp/>statename;<sp/>}</highlight></codeline>
<codeline lineno="82" refid="classclass__state__infinite_1afb1891d32becd2eaf99b3e1a2901f1ec" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classclass__state__infinite_1afb1891d32becd2eaf99b3e1a2901f1ec" kindref="member">class_state_infinite::get_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a1ad27ada2e042d55103d11061a480bef" kindref="member">name</ref>;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classclass__state__infinite_1a2c86f883998ec7c76a6ffe02a500ad9d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a2c86f883998ec7c76a6ffe02a500ad9d" kindref="member">class_state_infinite::set_algorithm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref><sp/>&amp;algo_type)<sp/>{<sp/><ref refid="classclass__state__infinite_1adc7a60752569ea4a63b0fd8716c9033f" kindref="member">algo</ref><sp/>=<sp/>algo_type;<sp/>}</highlight></codeline>
<codeline lineno="85" refid="classclass__state__infinite_1ad3f7811859817af204e1524ddfc35da5" refkind="member"><highlight class="normal"><ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9" kindref="member">AlgorithmType</ref><sp/><ref refid="classclass__state__infinite_1ad3f7811859817af204e1524ddfc35da5" kindref="member">class_state_infinite::get_algorithm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1adc7a60752569ea4a63b0fd8716c9033f" kindref="member">algo</ref>;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classclass__state__infinite_1a920da3f9787c4ea0f4b98de4d5db7ba8" refkind="member"><highlight class="normal">std::pair&lt;size_t,<sp/>size_t&gt;<sp/><ref refid="classclass__state__infinite_1a920da3f9787c4ea0f4b98de4d5db7ba8" kindref="member">class_state_infinite::get_positions</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_position(),<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_position());<sp/>}</highlight></codeline>
<codeline lineno="88" refid="classclass__state__infinite_1a671df6470f3780504848ec4562a72aee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a671df6470f3780504848ec4562a72aee" kindref="member">class_state_infinite::get_positionA</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_position();<sp/>}</highlight></codeline>
<codeline lineno="89" refid="classclass__state__infinite_1a4f5507dae5e9ae1572cbcdb60b3e2338" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4f5507dae5e9ae1572cbcdb60b3e2338" kindref="member">class_state_infinite::get_positionB</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_position();<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classclass__state__infinite_1a9df057bd8817774da31206ab823562a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a9df057bd8817774da31206ab823562a1" kindref="member">class_state_infinite::chiC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_LC().dimension(0);<sp/>}</highlight></codeline>
<codeline lineno="92" refid="classclass__state__infinite_1a2fe758e3c9db71d470a6db86583f0ffc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a2fe758e3c9db71d470a6db86583f0ffc" kindref="member">class_state_infinite::chiA</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L().dimension(0);<sp/>}</highlight></codeline>
<codeline lineno="93" refid="classclass__state__infinite_1a6fe9a16f8940af3014097cc5795a56eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6fe9a16f8940af3014097cc5795a56eb" kindref="member">class_state_infinite::chiB</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_L().dimension(0);<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>long<sp/>class_state_infinite::get_chi_lim()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Should<sp/>get<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>chi_lim.value();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>long<sp/>class_state_infinite::get_chi_max()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Should<sp/>get<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>chi_max.value();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classclass__state__infinite_1a2b173cce003a21d3ff55231ec663e978" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a2b173cce003a21d3ff55231ec663e978" kindref="member">class_state_infinite::get_spin_dimA</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;spin_dim();<sp/>}</highlight></codeline>
<codeline lineno="105" refid="classclass__state__infinite_1a13083c8e51ddcfa75337e81378e2ff83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a13083c8e51ddcfa75337e81378e2ff83" kindref="member">class_state_infinite::get_spin_dimB</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;spin_dim();<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>class_state_infinite::set_chi_lim(long<sp/>chi_lim_)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Should<sp/>set<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(chi_lim_<sp/>==<sp/>0)<sp/>throw<sp/>std::runtime_error(&quot;Can&apos;t<sp/>set<sp/>chi<sp/>limit<sp/>to<sp/>zero!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>chi_lim<sp/>=<sp/>chi_lim_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>class_state_infinite::set_chi_max(long<sp/>chi_max_)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Should<sp/>set<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(chi_max_<sp/>==<sp/>0)<sp/>throw<sp/>std::runtime_error(&quot;Can&apos;t<sp/>set<sp/>chi<sp/>max<sp/>to<sp/>zero!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>chi_max<sp/>=<sp/>chi_max_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classclass__state__infinite_1afd32f9139276e02f5d00a928ef5ec30e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1afd32f9139276e02f5d00a928ef5ec30e" kindref="member">class_state_infinite::get_truncation_error</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>get<sp/>the<sp/>the<sp/>current<sp/>limit<sp/>on<sp/>allowed<sp/>bond<sp/>dimension<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a2b404450f994e880160314fbecadf4d4" kindref="member">get_mps_siteA</ref>().<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classclass__state__infinite_1aa4621d378c7e1332903a0af727b64415" refkind="member"><highlight class="normal">Eigen::DSizes&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__state__infinite_1aa4621d378c7e1332903a0af727b64415" kindref="member">class_state_infinite::dimensions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::DSizes&lt;long,<sp/>3&gt;{<ref refid="classclass__state__infinite_1a2b173cce003a21d3ff55231ec663e978" kindref="member">get_spin_dimA</ref>()<sp/>*<sp/><ref refid="classclass__state__infinite_1a13083c8e51ddcfa75337e81378e2ff83" kindref="member">get_spin_dimB</ref>(),<sp/><ref refid="classclass__state__infinite_1a2fe758e3c9db71d470a6db86583f0ffc" kindref="member">chiA</ref>(),<sp/><ref refid="classclass__state__infinite_1a6fe9a16f8940af3014097cc5795a56eb" kindref="member">chiB</ref>()};<sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classclass__state__infinite_1a2b404450f994e880160314fbecadf4d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a2b404450f994e880160314fbecadf4d4" kindref="member">class_state_infinite::get_mps_siteA</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;<sp/>}</highlight></codeline>
<codeline lineno="127" refid="classclass__state__infinite_1a30dc3e657d22c9acd651b5ecb56a0026" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a30dc3e657d22c9acd651b5ecb56a0026" kindref="member">class_state_infinite::get_mps_siteB</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a2b404450f994e880160314fbecadf4d4" kindref="member">class_state_infinite::get_mps_siteA</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a30dc3e657d22c9acd651b5ecb56a0026" kindref="member">class_state_infinite::get_mps_siteB</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;<sp/>}</highlight></codeline>
<codeline lineno="130" refid="classclass__state__infinite_1a0fece68034245e5a685ece0143db1a91" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a0fece68034245e5a685ece0143db1a91" kindref="member">class_state_infinite::get_mps_site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Got<sp/>wrong<sp/>site<sp/>position<sp/>{}.<sp/>Expected<sp/>0<sp/>or<sp/>1&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135" refid="classclass__state__infinite_1a2e08642aca5b2df835db9676c5864633" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a0fece68034245e5a685ece0143db1a91" kindref="member">class_state_infinite::get_mps_site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Got<sp/>wrong<sp/>site<sp/>position<sp/>{}.<sp/>Expected<sp/>0<sp/>or<sp/>1&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140" refid="classclass__state__infinite_1a4c725e67b51726057da8604351a8f6a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a0fece68034245e5a685ece0143db1a91" kindref="member">class_state_infinite::get_mps_site</ref>(std::string_view<sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Got<sp/>wrong<sp/>site<sp/>position<sp/>{}.<sp/>Expected<sp/>0<sp/>or<sp/>1&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145" refid="classclass__state__infinite_1a2f11e2b7cbbf35a2bb82f6cede592cc8" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__state__infinite_1a0fece68034245e5a685ece0143db1a91" kindref="member">class_state_infinite::get_mps_site</ref>(std::string_view<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Got<sp/>wrong<sp/>site<sp/>position<sp/>{}.<sp/>Expected<sp/>0<sp/>or<sp/>1&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classclass__state__infinite_1a70ac44387422458f346b0feaa29e1d33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a70ac44387422458f346b0feaa29e1d33" kindref="member">class_state_infinite::A_bare</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_M_bare();<sp/>}</highlight></codeline>
<codeline lineno="153" refid="classclass__state__infinite_1af0611141cb73e28f845311a5bd4b8a77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1af0611141cb73e28f845311a5bd4b8a77" kindref="member">class_state_infinite::A</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_M();<sp/>}</highlight></codeline>
<codeline lineno="154" refid="classclass__state__infinite_1a3f158ccfa299749074dde6f7cf0631e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a3f158ccfa299749074dde6f7cf0631e8" kindref="member">class_state_infinite::B</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_M();<sp/>}</highlight></codeline>
<codeline lineno="155" refid="classclass__state__infinite_1af447918805d3fa5fe4b2e9a866d4ae90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1af447918805d3fa5fe4b2e9a866d4ae90" kindref="member">class_state_infinite::LC_diag</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1afeb60eaad5360f9e7d567ee8598999fa" kindref="member">LC_diag</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1afeb60eaad5360f9e7d567ee8598999fa" kindref="member">LC_diag</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1afeb60eaad5360f9e7d567ee8598999fa" kindref="member">LC_diag</ref><sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_LC());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1afeb60eaad5360f9e7d567ee8598999fa" kindref="member">LC_diag</ref>.value();}</highlight></codeline>
<codeline lineno="156" refid="classclass__state__infinite_1a5d38c3c9d36cb1ae30e3901a57c634de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a5d38c3c9d36cb1ae30e3901a57c634de" kindref="member">class_state_infinite::LA_diag</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1adca4f760a4108c13fdb16adf79071fb0" kindref="member">LA_diag</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1adca4f760a4108c13fdb16adf79071fb0" kindref="member">LA_diag</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1adca4f760a4108c13fdb16adf79071fb0" kindref="member">LA_diag</ref><sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1adca4f760a4108c13fdb16adf79071fb0" kindref="member">LA_diag</ref>.value();}</highlight></codeline>
<codeline lineno="157" refid="classclass__state__infinite_1a2f5b80165d4d9c994dce99fc1a5a054b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a2f5b80165d4d9c994dce99fc1a5a054b" kindref="member">class_state_infinite::LB_diag</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1ae2a5a5370a1051577e7d5ead4bbaa177" kindref="member">LB_diag</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1ae2a5a5370a1051577e7d5ead4bbaa177" kindref="member">LB_diag</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1ae2a5a5370a1051577e7d5ead4bbaa177" kindref="member">LB_diag</ref><sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_L());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1ae2a5a5370a1051577e7d5ead4bbaa177" kindref="member">LB_diag</ref>.value();}</highlight></codeline>
<codeline lineno="158" refid="classclass__state__infinite_1a1a12b24b142b6f1e469acc670e1fc071" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a1a12b24b142b6f1e469acc670e1fc071" kindref="member">class_state_infinite::LC_diag_inv</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5408ade7afd042d500fecee2ce96a596" kindref="member">LC_diag_inv</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5408ade7afd042d500fecee2ce96a596" kindref="member">LC_diag_inv</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5408ade7afd042d500fecee2ce96a596" kindref="member">LC_diag_inv</ref><sp/>=<sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">Textra::asDiagonalInversed</ref>(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_LC());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5408ade7afd042d500fecee2ce96a596" kindref="member">LC_diag_inv</ref>.value();}</highlight></codeline>
<codeline lineno="159" refid="classclass__state__infinite_1a17a24e46a956dd29385375b703d77f0d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a17a24e46a956dd29385375b703d77f0d" kindref="member">class_state_infinite::LA_diag_inv</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5551e326630b868d9968235e0cb9793e" kindref="member">LA_diag_inv</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5551e326630b868d9968235e0cb9793e" kindref="member">LA_diag_inv</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5551e326630b868d9968235e0cb9793e" kindref="member">LA_diag_inv</ref><sp/>=<sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">Textra::asDiagonalInversed</ref>(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5551e326630b868d9968235e0cb9793e" kindref="member">LA_diag_inv</ref>.value();}</highlight></codeline>
<codeline lineno="160" refid="classclass__state__infinite_1acf52d6c6a76fbd8f8db90acb7d204ca9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1acf52d6c6a76fbd8f8db90acb7d204ca9" kindref="member">class_state_infinite::LB_diag_inv</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a2450548da385e2a1cbdc456e901ead92" kindref="member">LB_diag_inv</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a2450548da385e2a1cbdc456e901ead92" kindref="member">LB_diag_inv</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a2450548da385e2a1cbdc456e901ead92" kindref="member">LB_diag_inv</ref><sp/>=<sp/><ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">Textra::asDiagonalInversed</ref>(<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_L());<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a2450548da385e2a1cbdc456e901ead92" kindref="member">LB_diag_inv</ref>.value();}</highlight></codeline>
<codeline lineno="161" refid="classclass__state__infinite_1a6ef456d46f23394a12509cb07bf57fdd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a6ef456d46f23394a12509cb07bf57fdd" kindref="member">class_state_infinite::GA</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1acc881b5adda4cf2f2a2503ce02d94078" kindref="member">GA</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1acc881b5adda4cf2f2a2503ce02d94078" kindref="member">GA</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1acc881b5adda4cf2f2a2503ce02d94078" kindref="member">GA</ref><sp/>=<sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_M_bare().contract(<ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">Textra::asDiagonalInversed</ref>(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L()),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({1},<sp/>{1})).shuffle(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{0,<sp/>2,<sp/>1});<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1acc881b5adda4cf2f2a2503ce02d94078" kindref="member">GA</ref>.value();}</highlight></codeline>
<codeline lineno="162" refid="classclass__state__infinite_1a901fb62e668b43da0e7a8d69d9f437c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a901fb62e668b43da0e7a8d69d9f437c7" kindref="member">class_state_infinite::GB</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5ae4285ddee202fcea7f60adf6666ac7" kindref="member">GB</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5ae4285ddee202fcea7f60adf6666ac7" kindref="member">GB</ref>.value();<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5ae4285ddee202fcea7f60adf6666ac7" kindref="member">GB</ref><sp/>=<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_M_bare().contract(<ref refid="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" kindref="member">Textra::asDiagonalInversed</ref>(<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_L()),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{0}));<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a5ae4285ddee202fcea7f60adf6666ac7" kindref="member">GB</ref>.value();}</highlight></codeline>
<codeline lineno="163" refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">class_state_infinite::LC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_LC();<sp/>}</highlight></codeline>
<codeline lineno="164" refid="classclass__state__infinite_1af68300a38b46664e5cbad74c20ecfdf9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1af68300a38b46664e5cbad74c20ecfdf9" kindref="member">class_state_infinite::LA</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L();<sp/>}</highlight></codeline>
<codeline lineno="165" refid="classclass__state__infinite_1a1f0d81e7f9d46999d0cb929de6b8b479" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a1f0d81e7f9d46999d0cb929de6b8b479" kindref="member">class_state_infinite::LB</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_L();<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classclass__state__infinite_1a1f21f7b40c9e37fe4d66bea5ee57b8f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__state__infinite_1a1f21f7b40c9e37fe4d66bea5ee57b8f6" kindref="member">class_state_infinite::get_2site_mps</ref>(<ref refid="classclass__state__infinite_1aa579cd672ec5860930cd3cb5f8f9534d" kindref="member">Scalar</ref><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a6de5b3bce14b66576c30cb4345cd0cdc" kindref="member">twosite_mps</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a6de5b3bce14b66576c30cb4345cd0cdc" kindref="member">twosite_mps</ref>.value();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;spin_dim()<sp/>*<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;spin_dim();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_chiL();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dim2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_chiR();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a6de5b3bce14b66576c30cb4345cd0cdc" kindref="member">twosite_mps</ref><sp/>=<sp/><ref refid="classclass__state__infinite_1af0611141cb73e28f845311a5bd4b8a77" kindref="member">A</ref>().contract(<ref refid="classclass__state__infinite_1a3f158ccfa299749074dde6f7cf0631e8" kindref="member">B</ref>(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1})).shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{0,<sp/>2,<sp/>1,<sp/>3}).reshape(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{dim0,<sp/>dim1,<sp/>dim2})<sp/>/<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref>.<ref refid="structclass__state__infinite_1_1_cache_1a6de5b3bce14b66576c30cb4345cd0cdc" kindref="member">twosite_mps</ref>.value();</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classclass__state__infinite_1ad05a7ad5517ca199ca636f67deb5e988" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1ad05a7ad5517ca199ca636f67deb5e988" kindref="member">class_state_infinite::assert_validity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;assert_validity();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;assert_validity();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197" refid="classclass__state__infinite_1acdcb2a644cba061f4e02b05313379b14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1acdcb2a644cba061f4e02b05313379b14" kindref="member">class_state_infinite::is_real</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;is_real()<sp/>and<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;is_real();<sp/>}</highlight></codeline>
<codeline lineno="198" refid="classclass__state__infinite_1a9727e0c468cef9119ecb9ea106bfdba1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a9727e0c468cef9119ecb9ea106bfdba1" kindref="member">class_state_infinite::has_nan</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;has_nan()<sp/>or<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;has_nan();<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>class_state_infinite::get_H_local_matrix()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>5&gt;<sp/>tempL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>5&gt;<sp/>tempR;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same&lt;T,<sp/>double&gt;::value)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>Lblock-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>Lblock<sp/>when<sp/>building<sp/>H_local&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>Rblock-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>Rblock<sp/>when<sp/>building<sp/>H_local&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>HA-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>MPO<sp/>A<sp/>when<sp/>building<sp/>H_local&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>HB-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>MPO<sp/>B<sp/>when<sp/>building<sp/>H_local&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempL<sp/>=<sp/>Lblock-&gt;block.contract(HA-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{0})).real().shuffle(Textra::array5{4,<sp/>1,<sp/>3,<sp/>0,<sp/>2}).real();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempR<sp/>=<sp/>Rblock-&gt;block.contract(HB-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{1})).real().shuffle(Textra::array5{4,<sp/>1,<sp/>3,<sp/>0,<sp/>2}).real();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempL<sp/>=<sp/>Lblock-&gt;block.contract(HA-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{0})).shuffle(Textra::array5{4,<sp/>1,<sp/>3,<sp/>0,<sp/>2});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempR<sp/>=<sp/>Rblock-&gt;block.contract(HB-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{1})).shuffle(Textra::array5{4,<sp/>1,<sp/>3,<sp/>0,<sp/>2});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape<sp/><sp/><sp/>=<sp/>mps_sites-&gt;chiA()<sp/>*<sp/>mps_sites-&gt;spindim()<sp/>*<sp/>mps_sites-&gt;chiB()<sp/>*<sp/>mps_sites-&gt;spin_dim_A();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>8&gt;<sp/>H_local<sp/>=<sp/>tempL.contract(tempR,<sp/>Textra::idx({4},<sp/>{4})).shuffle(Textra::array8{0,<sp/>1,<sp/>4,<sp/>5,<sp/>2,<sp/>3,<sp/>6,<sp/>7});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>Eigen::Map&lt;Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;&gt;(H_local.data(),<sp/>shape,<sp/>shape);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>Eigen::Matrix&lt;double,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state_infinite::get_H_local_matrix&lt;double&gt;()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>Eigen::Matrix&lt;std::complex&lt;double&gt;,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>class_state_infinite::get_H_local_matrix&lt;std::complex&lt;double&gt;&gt;()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>class_state_infinite::get_H_local_sq_matrix()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>6&gt;<sp/>tempL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>6&gt;<sp/>tempR;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same&lt;T,<sp/>double&gt;::value)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>Lblock2-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>Lblock2<sp/>when<sp/>building<sp/>H_local_sq&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>Rblock2-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>Rblock2<sp/>when<sp/>building<sp/>H_local_sq&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>HA-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>MPO<sp/>A<sp/>when<sp/>building<sp/>H_local_sq&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>HB-&gt;isReal())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Discarding<sp/>imaginary<sp/>data<sp/>from<sp/>MPO<sp/>B<sp/>when<sp/>building<sp/>H_local_sq&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempL<sp/>=<sp/>Lblock2-&gt;block.contract(HA-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{0}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(HA-&gt;MPO(),<sp/>Textra::idx({2,<sp/>5},<sp/>{0,<sp/>2}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.real()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(Textra::array6{5,<sp/>1,<sp/>3,<sp/>0,<sp/>2,<sp/>4});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempR<sp/>=<sp/>Rblock2-&gt;block.contract(HB-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{1}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(HB-&gt;MPO(),<sp/>Textra::idx({2,<sp/>5},<sp/>{1,<sp/>2}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.real()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(Textra::array6{5,<sp/>1,<sp/>3,<sp/>0,<sp/>2,<sp/>4});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempL<sp/>=<sp/>Lblock2-&gt;block.contract(HA-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{0}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(HA-&gt;MPO(),<sp/>Textra::idx({2,<sp/>5},<sp/>{0,<sp/>2}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(Textra::array6{5,<sp/>1,<sp/>3,<sp/>0,<sp/>2,<sp/>4});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempR<sp/>=<sp/>Rblock2-&gt;block.contract(HB-&gt;MPO(),<sp/>Textra::idx({2},<sp/>{1}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(HB-&gt;MPO(),<sp/>Textra::idx({2,<sp/>5},<sp/>{1,<sp/>2}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(Textra::array6{5,<sp/>1,<sp/>3,<sp/>0,<sp/>2,<sp/>4});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape<sp/><sp/><sp/>=<sp/>mps_sites-&gt;chiA()<sp/>*<sp/>mps_sites-&gt;spindim()<sp/>*<sp/>mps_sites-&gt;chiB()<sp/>*<sp/>mps_sites-&gt;spin_dim_A();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;T,<sp/>8&gt;<sp/>H_local<sp/>=<sp/>tempL.contract(tempR,<sp/>Textra::idx({4,<sp/>5},<sp/>{4,<sp/>5})).shuffle(Textra::array8{0,<sp/>1,<sp/>4,<sp/>5,<sp/>2,<sp/>3,<sp/>6,<sp/>7});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>Eigen::Map&lt;Eigen::Matrix&lt;T,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;&gt;(H_local.data(),<sp/>shape,<sp/>shape);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>Eigen::Matrix&lt;double,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_state_infinite::get_H_local_sq_matrix&lt;double&gt;()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>Eigen::Matrix&lt;std::complex&lt;double&gt;,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>class_state_infinite::get_H_local_sq_matrix&lt;std::complex&lt;double&gt;&gt;()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>class_state_infinite::enlarge_environment(int<sp/>direction)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>assert_positions();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>position_A_new<sp/>=<sp/>mps_sites-&gt;MPS_A-&gt;get_position()<sp/>+<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*Lblock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Lblock-&gt;enlarge(*mps_sites-&gt;MPS_A,<sp/>*HA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*Rblock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Rblock-&gt;enlarge(*mps_sites-&gt;MPS_B,<sp/>*HB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*Lblock2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Lblock2-&gt;enlarge(*mps_sites-&gt;MPS_A,<sp/>*HA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*Rblock2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Rblock2-&gt;enlarge(*mps_sites-&gt;MPS_B,<sp/>*HB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>set_positions(position_A_new);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(direction<sp/>!=<sp/>0)<sp/>throw<sp/>std::runtime_error(&quot;Ooops,<sp/>direction<sp/>!=<sp/>0&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(direction<sp/>==<sp/>1){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Lblock<sp/><sp/>=<sp/>Lblock-&gt;enlarge(*mps_sites-&gt;MPS_A,<sp/><sp/>*HA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Lblock2<sp/>=<sp/>Lblock2-&gt;enlarge(*mps_sites-&gt;MPS_A,<sp/>*HA);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lblock-&gt;set_position<sp/>(HB-&gt;get_position());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lblock2-&gt;set_position(HB-&gt;get_position());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}else<sp/>if<sp/>(direction<sp/>==<sp/>-1){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Rblock<sp/><sp/>=<sp/>Rblock-&gt;enlarge(*mps_sites-&gt;MPS_B,<sp/><sp/>*HB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Rblock2<sp/>=<sp/>Rblock2-&gt;enlarge(*mps_sites-&gt;MPS_B,<sp/>*HB);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rblock-&gt;set_position<sp/>(HA-&gt;get_position());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rblock2-&gt;set_position(HA-&gt;get_position());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}else<sp/>if(direction<sp/>==<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>clear_measurements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>assert_positions();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classclass__state__infinite_1ad3bf00292b4a6099513dad05b6dd9d23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1ad3bf00292b4a6099513dad05b6dd9d23" kindref="member">class_state_infinite::set_positions</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_position(position);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;set_position(position<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">class_state_infinite::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;twosite_tensor,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1infinite_1_1mps_1af57214b0a7d4746c89d1771dbd1fb966" kindref="member">tools::infinite::mps::merge_twosite_tensor</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>twosite_tensor,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classclass__state__infinite_1ac20ae0bf7c955bb8a08aae9cdc038da4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">class_state_infinite::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;class_mps_site&gt;<sp/>&amp;mps_list)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps_list.size()<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Expected<sp/>2<sp/>sites,<sp/>got:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">std::to_string</ref>(mps_list.size()));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpsA<sp/>=<sp/>*std::next(mps_list.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpsB<sp/>=<sp/>*std::next(mps_list.begin(),<sp/>1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">set_mps</ref>(mpsA,<sp/>mpsB);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classclass__state__infinite_1a3e30e1699de47c0e1141f88db819229c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">class_state_infinite::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;mpsA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;mpsB)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>mpsA.<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Given<sp/>mps<sp/>for<sp/>site<sp/>A<sp/>is<sp/>not<sp/>a<sp/>center&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(mpsA);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref><sp/>=<sp/>std::make_unique&lt;class_mps_site&gt;(mpsB);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="classclass__state__infinite_1aaca2c7e53724b1c25ad3efe689b3d275" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">class_state_infinite::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;MA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;LC,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;MB)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_M(MA);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_LC(<ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">LC</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;set_M(MB);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330" refid="classclass__state__infinite_1a6460235eccdbce1f2299d099b6db7dc0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a20d07a565add5f6dae84ebccd567b4c5" kindref="member">class_state_infinite::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;LA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;MA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;LC,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;MB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;LB)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_mps(MA,<sp/><ref refid="classclass__state__infinite_1af68300a38b46664e5cbad74c20ecfdf9" kindref="member">LA</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_LC(<ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">LC</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;set_mps(MB,<sp/><ref refid="classclass__state__infinite_1a1f0d81e7f9d46999d0cb929de6b8b479" kindref="member">LB</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">class_state_infinite::clear_cache</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="classclass__state__infinite_1a6288a31a22c5c842b424a9033f7c2b0e" kindref="member">cache</ref><sp/>=<sp/><ref refid="structclass__state__infinite_1_1_cache" kindref="compound">Cache</ref>();<sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classclass__state__infinite_1aabcec49f59d2234d4509bbc72ab9e832" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1aabcec49f59d2234d4509bbc72ab9e832" kindref="member">class_state_infinite::clear_measurements</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a5a4ce8f495013148609cd943088090ab" kindref="member">measurements</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="structstate__measure__infinite" kindref="compound">state_measure_infinite</ref>();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1views_1a9639d785b811f258c4687f49a2aeb7e5" kindref="member">tools::common::views::components_computed</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="classclass__state__infinite_1aa337cbd68bed88136c332c12b8f920b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1aa337cbd68bed88136c332c12b8f920b0" kindref="member">class_state_infinite::do_all_measurements</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="namespacetools_1_1infinite_1_1measure_1a8f2a9f5a8d62b3621fcd83df9b21c5ca" kindref="member">tools::infinite::measure::do_all_measurements</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classclass__state__infinite_1a83a9a18970c6dd4b0f77bffbfb657a1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__state__infinite_1a83a9a18970c6dd4b0f77bffbfb657a1e" kindref="member">class_state_infinite::swap_AB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Swapping<sp/>AB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1abad9c51136ef58f8ca82ce5576a5a176" kindref="member">swapped</ref><sp/>=<sp/>!<ref refid="classclass__state__infinite_1abad9c51136ef58f8ca82ce5576a5a176" kindref="member">swapped</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>position_left<sp/><sp/>=<sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_position();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>position_right<sp/>=<sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;get_position();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>Gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/><ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">LC</ref><sp/>=<sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_LC();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;unset_LC();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;unset_LC();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>.swap(<ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_LC(<ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;get_L());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_L(<ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">LC</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;set_L(<ref refid="classclass__state__infinite_1aea8cf2bcf9f27f013e366e84fd84ef38" kindref="member">LC</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a581c7731467d58cfeb505cae4fbf9e9a" kindref="member">MPS_A</ref>-&gt;set_position(position_left);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a09b9a56c0939759fadf2e4afbf6ff11d" kindref="member">MPS_B</ref>-&gt;set_position(position_right);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1a4ac1cb90698101565bdbe2f775a5c635" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__state__infinite_1aabcec49f59d2234d4509bbc72ab9e832" kindref="member">clear_measurements</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tensors/state/class_state_infinite.cpp"/>
  </compounddef>
</doxygen>
