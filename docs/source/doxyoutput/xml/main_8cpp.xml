<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes refid="class__algorithm__launcher_8h" local="no">algorithms/class_algorithm_launcher.h</includes>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes local="no">h5pp/h5pp.h</includes>
    <includes refid="filesystem_8h" local="no">io/filesystem.h</includes>
    <includes refid="rnd_8h" local="no">math/rnd.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="class__dmrg__config_8h" local="no">config/class_dmrg_config.h</includes>
    <includes refid="stack__trace_8h" local="no">general/stack_trace.h</includes>
    <includes local="no">getopt.h</includes>
    <includes local="no">gitversion.h</includes>
    <includes local="no">thread</includes>
    <incdepgraph>
      <node id="4">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="21">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>numeric</label>
      </node>
      <node id="22">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="24">
        <label>config/class_dmrg_config.h</label>
        <link refid="class__dmrg__config_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="13">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>general/stack_trace.h</label>
        <link refid="stack__trace_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>io/filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="20">
        <label>random</label>
      </node>
      <node id="9">
        <label>string_view</label>
      </node>
      <node id="19">
        <label>optional</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="28">
        <label>gitversion.h</label>
      </node>
      <node id="17">
        <label>math/rnd.h</label>
        <link refid="rnd_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>h5pp/h5pp.h</label>
      </node>
      <node id="25">
        <label>unordered_map</label>
      </node>
      <node id="27">
        <label>getopt.h</label>
      </node>
      <node id="29">
        <label>thread</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="18">
        <label>complex</label>
      </node>
      <node id="2">
        <label>algorithms/class_algorithm_launcher.h</label>
        <link refid="class__algorithm__launcher_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="6">
        <label>enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_usage</definition>
        <argsstring>()</argsstring>
        <name>print_usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/main.cpp" line="33" column="6" bodyfile="/home/david/GitProjects/DMRG++/source/main.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ada7f892aa09adca3647631590ca1beb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clean_up</definition>
        <argsstring>()</argsstring>
        <name>clean_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/main.cpp" line="38" column="6" bodyfile="/home/david/GitProjects/DMRG++/source/main.cpp" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af78b8ebb1041d6cbde60015c3ec139fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string filename_append_number</definition>
        <argsstring>(const std::string &amp;filename, const long number)</argsstring>
        <name>filename_append_number</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/main.cpp" line="50" column="13" bodyfile="/home/david/GitProjects/DMRG++/source/main.cpp" bodystart="50" bodyend="59"/>
        <references refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" compoundref="debug_8h" startline="7">settings::debug</references>
        <references refid="namespacesettings_1_1output_1a3a4473cd67fe51cc676ee77aa267b839" compoundref="nmspc__settings_8h" startline="50">settings::output::use_temp_dir</references>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Main function. Sets simulation parameters and excecutes the desired algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an integer 0 upon exit success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>It&apos;s important that we do things in this order: A1: config file not given: use the default input/input.config A2: config file given with .config/h5 extension: load given config</para>
<para>B: Override settings with parameters given through CLI</para>
<para>C: generate output filename. If the seed is already on the filename, it is not appended again.</para>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/main.cpp" line="66" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/main.cpp" bodystart="66" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="3"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__algorithm__launcher_8h" kindref="compound">algorithms/class_algorithm_launcher.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;h5pp/h5pp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="filesystem_8h" kindref="compound">io/filesystem.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="rnd_8h" kindref="compound">math/rnd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OPENBLAS_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;cblas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;openblas_config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MKL_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MKL_Complex8<sp/><sp/>std::complex&lt;float&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MKL_Complex16<sp/>std::complex&lt;double&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&lt;mkl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;mkl_service.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__dmrg__config_8h" kindref="compound">config/class_dmrg_config.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stack__trace_8h" kindref="compound">general/stack_trace.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gitversion.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;unistd.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="main_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" kindref="member">print_usage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::printf(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">==========<sp/><sp/>DMRG++<sp/><sp/>============</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">Usage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>DMRG++<sp/>[-option<sp/>&lt;value&gt;].</highlight></codeline>
<codeline lineno="38" refid="main_8cpp_1ada7f892aa09adca3647631590ca1beb0" refkind="member"><highlight class="stringliteral">-h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Help.<sp/>Shows<sp/>this<sp/>text.</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">-b<sp/>&lt;positive<sp/>integer&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Integer<sp/>whose<sp/>bitfield<sp/>sets<sp/>the<sp/>initial<sp/>product<sp/>state.<sp/>Negative<sp/>is<sp/>unused<sp/>(default<sp/>-1)</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">-c<sp/>&lt;.cfg<sp/>or<sp/>.h5<sp/>filename&gt;<sp/><sp/><sp/>:<sp/>Full<sp/>or<sp/>relative<sp/>path<sp/>to<sp/>a<sp/>config<sp/>file<sp/>or<sp/>hdf5<sp/>file<sp/>from<sp/>a<sp/>previous<sp/>simulation<sp/>(which<sp/>has<sp/>a<sp/>config<sp/>file)<sp/>(default<sp/>=<sp/>input.cfg)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">-n<sp/>&lt;stl<sp/>threads&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Number<sp/>of<sp/>C++11<sp/>threads<sp/>(Used<sp/>by<sp/>Eigen::Tensor)</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">-o<sp/>&lt;output<sp/>filename<sp/>base&gt;<sp/><sp/><sp/>:<sp/>Full<sp/>or<sp/>relative<sp/>path<sp/>to<sp/>the<sp/>output<sp/>file<sp/>(output).<sp/>The<sp/>seed<sp/>number<sp/>will<sp/>be<sp/>appended<sp/>to<sp/>this<sp/>filename<sp/>unless<sp/>-x<sp/>is<sp/>passed.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">-i<sp/>&lt;.cfg<sp/>or<sp/>.h5<sp/>filename&gt;<sp/><sp/><sp/>:<sp/>Full<sp/>or<sp/>relative<sp/>path<sp/>to<sp/>a<sp/>config<sp/>file<sp/>or<sp/>hdf5<sp/>file<sp/>from<sp/>a<sp/>previous<sp/>simulation<sp/>(which<sp/>has<sp/>a<sp/>config<sp/>file)<sp/>(default<sp/>=<sp/>input.cfg)</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">-s<sp/>&lt;seed&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Positive<sp/>number<sp/>that<sp/>seeds<sp/>the<sp/>random<sp/>number<sp/>generator<sp/>(default<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">-t<sp/>&lt;omp<sp/>threads&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Number<sp/>of<sp/>OpenMP<sp/>threads</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">-v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Enables<sp/>trace-level<sp/>verbosity</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">-x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Do<sp/>not<sp/>append<sp/>seed<sp/>to<sp/>the<sp/>output<sp/>filename.</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">)&quot;);</highlight></codeline>
<codeline lineno="50" refid="main_8cpp_1af78b8ebb1041d6cbde60015c3ec139fb" refkind="member"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ada7f892aa09adca3647631590ca1beb0" kindref="member">clean_up</ref>()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespacesettings_1_1output_1a3a4473cd67fe51cc676ee77aa267b839" kindref="member">settings::output::use_temp_dir</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fs::exists(<ref refid="namespacesettings_1_1output_1_1tmp_1a0b5776306469718bea2359acea5e4e88" kindref="member">settings::output::tmp::hdf5_temp_path</ref>))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Cleaning<sp/>up<sp/>temporary<sp/>file:<sp/>[{}]&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacesettings_1_1output_1_1tmp_1a0b5776306469718bea2359acea5e4e88" kindref="member">settings::output::tmp::hdf5_temp_path</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h5pp::hdf5::moveFile(<ref refid="namespacesettings_1_1output_1_1tmp_1a0b5776306469718bea2359acea5e4e88" kindref="member">settings::output::tmp::hdf5_temp_path</ref>,<sp/><ref refid="namespacesettings_1_1output_1_1tmp_1a10c82d288cbc37459097ccec8658ad20" kindref="member">settings::output::tmp::hdf5_final_path</ref>,<sp/>h5pp::FilePermission::REPLACE);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;err)<sp/>{<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Cleaning<sp/>not<sp/>needed:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>err.what());<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>H5garbage_collect();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>H5Eprint(H5E_DEFAULT,<sp/>stderr);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">std::string<sp/><ref refid="main_8cpp_1af78b8ebb1041d6cbde60015c3ec139fb" kindref="member">filename_append_number</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(number<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filename;</highlight></codeline>
<codeline lineno="66" refid="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>the<sp/>seed_model<sp/>to<sp/>the<sp/>output<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>h5pp::fs::path<sp/>oldFileName<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>h5pp::fs::path<sp/>newFileName<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oldFileName.stem().string().find(<ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">std::to_string</ref>(number))<sp/>!=<sp/>std::string::npos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filename;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>newFileName.replace_filename(oldFileName.stem().string()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">std::to_string</ref>(number)<sp/>+<sp/>oldFileName.extension().string());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Appended<sp/>number<sp/>[{}]<sp/>to<sp/>filename:<sp/>[{}]&quot;</highlight><highlight class="normal">,<sp/>number,<sp/>newFileName.string());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newFileName.string();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>termination<sp/>codes<sp/>and<sp/>what<sp/>to<sp/>do<sp/>in<sp/>those<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedebug_1a2774636e7327b6cff8d7ca2ca4a5841e" kindref="member">debug::register_callbacks</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>to<sp/>move<sp/>the<sp/>file<sp/>back<sp/>from<sp/>temp<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atexit(<ref refid="main_8cpp_1ada7f892aa09adca3647631590ca1beb0" kindref="member">clean_up</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::at_quick_exit(<ref refid="main_8cpp_1ada7f892aa09adca3647631590ca1beb0" kindref="member">clean_up</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref><sp/>=<sp/><ref refid="namespacetools_1_1_logger_1a226e4a9b901367b2e4cb3e17809385b1" kindref="member">tools::Logger::setLogger</ref>(</highlight><highlight class="stringliteral">&quot;DMRG++<sp/>main&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetools" kindref="compound">tools</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;unistd.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[HOST_NAME_MAX];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>gethostname(name,<sp/>HOST_NAME_MAX);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>==<sp/>0)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Hostname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>current<sp/>Git<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Git<sp/>branch<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>GIT::BRANCH);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>commit<sp/>hash<sp/>:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>GIT::COMMIT_HASH);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>revision<sp/><sp/><sp/><sp/>:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>GIT::REVISION);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>use<sp/>getopt<sp/>to<sp/>parse<sp/>CLI<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>CLI<sp/>input<sp/>always<sp/>override<sp/>config-file<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wherever<sp/>they<sp/>are<sp/>found<sp/>(config<sp/>file,<sp/>h5<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_seed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>config;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">verbosity</ref><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">seed</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">omp_threads</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">stl_threads</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>opt<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getopt(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;hb:c:i:n:o:s:t:vx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt<sp/>==<sp/>EOF)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(optarg<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>input<sp/>argument:<sp/>-{}&quot;</highlight><highlight class="normal">,<sp/>opt);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>input<sp/>argument:<sp/>-{}<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>opt,<sp/>optarg);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(opt)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref><sp/>=<sp/>std::strtol(optarg,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/>config<sp/>=<sp/>std::string(optarg);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">stl_threads</ref><sp/>=<sp/>std::strtol(optarg,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/>output<sp/>=<sp/>std::string(optarg);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">seed</ref><sp/>=<sp/>std::strtol(optarg,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">omp_threads</ref><sp/>=<sp/>std::strtol(optarg,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">verbosity</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/>append_seed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;error(</highlight><highlight class="stringliteral">&quot;Option<sp/>-{}<sp/>needs<sp/>a<sp/>value&quot;</highlight><highlight class="normal">,<sp/>opt);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="main_8cpp_1ae5ad5cbeccaedc03a48d3c7eaa803e79" kindref="member">print_usage</ref>();<sp/>exit(0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>There<sp/>may<sp/>be<sp/>multiple<sp/>config<sp/>files<sp/>to<sp/>consider:</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>Given<sp/>from<sp/>CLI<sp/>(.config/.h5)</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>Inside<sp/>the<sp/>output<sp/>file<sp/>&quot;&lt;output&gt;_&lt;seed&gt;.h5&quot;<sp/>if<sp/>it<sp/>already<sp/>exists.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>What<sp/>should<sp/>one<sp/>do?</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Simplest<sp/>solution:<sp/>Always<sp/>ignore<sp/>case<sp/>2)!</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Taking<sp/>2)<sp/>into<sp/>account<sp/>leads<sp/>to<sp/>very<sp/>confusing<sp/>policies.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>What<sp/>are<sp/>the<sp/>implications?</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>CLI<sp/>passes<sp/>a<sp/>.config<sp/>file<sp/>we<sp/>have<sp/>to<sp/>override<sp/>some<sp/>of<sp/>its<sp/>settings:</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>output</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B:<sp/>Try<sp/>loading<sp/>given<sp/>config<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Note<sp/>that<sp/>there<sp/>is<sp/>a<sp/>default<sp/>&quot;input/input.config&quot;<sp/>if<sp/>none<sp/>was<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>config.empty())<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__dmrg__config" kindref="compound">class_dmrg_config</ref><sp/>dmrg_config(config);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dmrg_config.file_exists)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmrg_config.load();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1a8bbba7ea217bebfd94944dd43d9513cf" kindref="member">settings::load_config</ref>(dmrg_config);<sp/></highlight><highlight class="comment">//<sp/>B2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>config<sp/>file:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>config));<sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>file<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1input_1a2cec3efecce2fdb179786cc6525372c1" kindref="member">settings::input::config_filename</ref><sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>else<sp/>use<sp/>default<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B:<sp/>Override<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">seed</ref><sp/>&gt;=<sp/>0)<sp/><ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">settings::input::seed</ref><sp/>=<sp/><ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">seed</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref><sp/>&gt;=<sp/>0)<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">settings::input::bitfield</ref><sp/>=<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">stl_threads</ref><sp/>&gt;=<sp/>0)<sp/><ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">stl_threads</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">omp_threads</ref><sp/>&gt;=<sp/>0)<sp/><ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">settings::threading::omp_threads</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">omp_threads</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>output.empty())<sp/><ref refid="namespacesettings_1_1output_1a250dcb715268c07a745af0c289998d6b" kindref="member">settings::output::output_filepath</ref><sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">verbosity</ref><sp/>&gt;=<sp/>0)<sp/><ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">settings::console::verbosity</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">verbosity</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref><sp/>=<sp/><ref refid="namespacetools_1_1_logger_1a226e4a9b901367b2e4cb3e17809385b1" kindref="member">tools::Logger::setLogger</ref>(</highlight><highlight class="stringliteral">&quot;DMRG++<sp/>main&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" kindref="member">settings::console::verbosity</ref>,<sp/><ref refid="namespacesettings_1_1console_1a82c11e45aadd82f57643ef3624d2e7be" kindref="member">settings::console::timestamp</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C:<sp/>Generate<sp/>the<sp/>correct<sp/>output<sp/>filename<sp/>based<sp/>on<sp/>given<sp/>seeds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(append_seed)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1output_1a250dcb715268c07a745af0c289998d6b" kindref="member">settings::output::output_filepath</ref><sp/>=<sp/><ref refid="main_8cpp_1af78b8ebb1041d6cbde60015c3ec139fb" kindref="member">filename_append_number</ref>(<ref refid="namespacesettings_1_1output_1a250dcb715268c07a745af0c289998d6b" kindref="member">settings::output::output_filepath</ref>,<sp/><ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">settings::input::seed</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1output_1a250dcb715268c07a745af0c289998d6b" kindref="member">settings::output::output_filepath</ref><sp/>=<sp/><ref refid="main_8cpp_1af78b8ebb1041d6cbde60015c3ec139fb" kindref="member">filename_append_number</ref>(<ref refid="namespacesettings_1_1output_1a250dcb715268c07a745af0c289998d6b" kindref="member">settings::output::output_filepath</ref>,<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">settings::input::bitfield</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>with<sp/>random::device<sp/>initially<sp/>(This<sp/>also<sp/>takes<sp/>care<sp/>of<sp/>srand<sp/>used<sp/>by<sp/>Eigen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>to<sp/>make<sp/>reproducible<sp/>simulations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacernd_1aedbd405b79a78a71d4b2c3f7983bc36d" kindref="member">rnd::seed</ref>(<ref refid="namespacesettings_1_1input_1a79e48e7293bd7dc9c7197940b0f07ac3" kindref="member">settings::input::seed</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EIGEN_USE_THREADS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref><sp/>&lt;=<sp/>0)<sp/>{<sp/><ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref><sp/>=<sp/>(int)<sp/>std::thread::hardware_concurrency();<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1_1omp_1adc191ecf05abfe6a4d9156e9b07d014c" kindref="member">Textra::omp::setNumThreads</ref>(<ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Using<sp/>Eigen<sp/>Tensor<sp/>with<sp/>{}<sp/>C++11<sp/>threads&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1_1omp_1a2bc11781ba6d6fd5472be0b4c6e1d354" kindref="member">Textra::omp::num_threads</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref><sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;EIGEN_USE_THREADS<sp/>is<sp/>not<sp/>defined:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>threading<sp/>in<sp/>Eigen::Tensor<sp/>with<sp/>stl_threads<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1threading_1a6f748ad6753cf2d6fb06df4c2c74df85" kindref="member">settings::threading::stl_threads</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_OPENMP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">settings::threading::omp_threads</ref><sp/>&lt;=<sp/>0)<sp/>{<sp/><ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">settings::threading::omp_threads</ref><sp/>=<sp/>(int)<sp/>std::thread::hardware_concurrency();<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_num_threads(<ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">settings::threading::omp_threads</ref>);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>only<sp/>need<sp/>this.<sp/>Both<sp/>Eigen<sp/>(non-Tensor)<sp/>and<sp/>MKL<sp/>listen<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>omp_set_max_active_levels(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Using<sp/>OpenMP<sp/>with<sp/>{}<sp/>threads<sp/>and<sp/>{}<sp/>active<sp/>levels&quot;</highlight><highlight class="normal">,<sp/>omp_get_max_threads(),<sp/>omp_get_max_active_levels());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OPENBLAS_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openblas_parallel_mode<sp/>=<sp/>openblas_get_parallel();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>openblas_parallel_str;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(openblas_parallel_mode<sp/>==<sp/>0)<sp/>openblas_parallel_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;seq&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(openblas_parallel_mode<sp/>==<sp/>1)<sp/>openblas_parallel_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;threads&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(openblas_parallel_mode<sp/>==<sp/>2)<sp/>openblas_parallel_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;openmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(openblas_parallel_mode<sp/>==<sp/>1)<sp/>openblas_set_num_threads(<ref refid="namespacesettings_1_1threading_1a21654ab99b02c9e259e87c8389e679b0" kindref="member">settings::threading::omp_threads</ref>);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>omp_threads<sp/>level<sp/>for<sp/>blas-related<sp/>threading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;{}<sp/>compiled<sp/>with<sp/>parallel<sp/>mode<sp/>[{}]<sp/>for<sp/>target<sp/>{}<sp/>with<sp/>config<sp/>{}<sp/>|<sp/>multithread<sp/>threshold<sp/>{}<sp/>|<sp/>running<sp/>with<sp/>{}<sp/>threads&quot;</highlight><highlight class="normal">,<sp/>OPENBLAS_VERSION,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openblas_parallel_str,<sp/>openblas_get_corename(),<sp/>openblas_get_config(),<sp/>OPENBLAS_GEMM_MULTITHREAD_THRESHOLD,<sp/>openblas_get_num_threads());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MKL_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Using<sp/>Intel<sp/>MKL<sp/>with<sp/>{}<sp/>threads&quot;</highlight><highlight class="normal">,<sp/>mkl_get_max_threads());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>algorithm<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>stores<sp/>simulation<sp/>data<sp/>automatically<sp/>to<sp/>a<sp/>file<sp/>specified<sp/>in<sp/>the<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__algorithm__launcher" kindref="compound">class_algorithm_launcher</ref><sp/>launcher;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>launcher.<ref refid="classclass__algorithm__launcher_1a04e4a7a48a2233154f3ad2afed0ad432" kindref="member">run_algorithms</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/main.cpp"/>
  </compounddef>
</doxygen>
