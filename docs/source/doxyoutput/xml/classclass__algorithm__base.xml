<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classclass__algorithm__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>class_algorithm_base</compoundname>
    <derivedcompoundref refid="classclass__algorithm__finite" prot="public" virt="non-virtual">class_algorithm_finite</derivedcompoundref>
    <derivedcompoundref refid="classclass__algorithm__infinite" prot="public" virt="non-virtual">class_algorithm_infinite</derivedcompoundref>
    <includes refid="class__algorithm__base_8h" local="no">class_algorithm_base.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4" prot="public" static="no">
        <name>StopReason</name>
        <enumvalue id="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4ad0d58d957971f2445cffa419a01ce4a3" prot="public">
          <name>CONVERGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4a5c290ac23e3d60150ad896708595fcb7" prot="public">
          <name>SATURATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4afa27cb4ac5137cda270dcfbb239077d2" prot="public">
          <name>MAX_STEPS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="35" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="typedef" id="classclass__algorithm__base_1ac2a5042c5337ef3b8c6d29a115e25843" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using class_algorithm_base::Scalar =  std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="30" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; spdlog::logger &gt;</type>
        <definition>std::shared_ptr&lt;spdlog::logger&gt; class_algorithm_base::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="28" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classclass__algorithm__base_1af36e30da0595f116629422821e1e4ced" prot="public" static="no" mutable="no">
        <type>enum <ref refid="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4" kindref="member">class_algorithm_base::StopReason</ref></type>
        <definition>enum class_algorithm_base::StopReason  class_algorithm_base::stop_reason</definition>
        <argsstring></argsstring>
        <name>stop_reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; h5pp::File &gt;</type>
        <definition>std::shared_ptr&lt;h5pp::File&gt; class_algorithm_base::h5pp_file</definition>
        <argsstring></argsstring>
        <name>h5pp_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="38" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a4ae9a05248866219f0df931d6160e3d7" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classclass__hdf5__log" kindref="compound">class_hdf5_log</ref>&lt; <ref refid="classclass__log__profiling" kindref="compound">class_log_profiling</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;class_hdf5_log&lt;class_log_profiling&gt; &gt; class_algorithm_base::log_profiling</definition>
        <argsstring></argsstring>
        <name>log_profiling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="39" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a8b718fe0f45ad5636ec2b432c11568e0" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classclass__hdf5__log" kindref="compound">class_hdf5_log</ref>&lt; <ref refid="classclass__log__simulation__status" kindref="compound">class_log_simulation_status</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;class_hdf5_log&lt;class_log_simulation_status&gt; &gt; class_algorithm_base::log_sim_status</definition>
        <argsstring></argsstring>
        <name>log_sim_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="40" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a64e1bbd06c9d036b60d1cd9536e8f0c8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string class_algorithm_base::sim_name</definition>
        <argsstring></argsstring>
        <name>sim_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="42" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a7ee19b5bbea7bb4dca809914690039a8" prot="public" static="no" mutable="no">
        <type><ref refid="nmspc__settings_8h_1ad69f3cf5fdb6ef307d85180c346e7921" kindref="member">SimulationType</ref></type>
        <definition>SimulationType class_algorithm_base::sim_type</definition>
        <argsstring></argsstring>
        <name>sim_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="43" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__simulation__status" kindref="compound">class_simulation_status</ref></type>
        <definition>class_simulation_status class_algorithm_base::sim_status</definition>
        <argsstring></argsstring>
        <name>sim_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="44" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__tic__toc" kindref="compound">class_tic_toc</ref></type>
        <definition>class_tic_toc class_algorithm_base::t_tot</definition>
        <argsstring></argsstring>
        <name>t_tot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="81" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1ac4665ca1f14f3b97154c961502c483c7" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__tic__toc" kindref="compound">class_tic_toc</ref></type>
        <definition>class_tic_toc class_algorithm_base::t_sim</definition>
        <argsstring></argsstring>
        <name>t_sim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="82" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__tic__toc" kindref="compound">class_tic_toc</ref></type>
        <definition>class_tic_toc class_algorithm_base::t_prt</definition>
        <argsstring></argsstring>
        <name>t_prt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="83" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__algorithm__base_1a41e28970ec5e7a0cf2a1700b217f5152" prot="public" static="no" mutable="no">
        <type><ref refid="classclass__tic__toc" kindref="compound">class_tic_toc</ref></type>
        <definition>class_tic_toc class_algorithm_base::t_con</definition>
        <argsstring></argsstring>
        <name>t_con</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="84" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" prot="public" static="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double class_algorithm_base::quietNaN</definition>
        <argsstring></argsstring>
        <name>quietNaN</name>
        <initializer>= std::numeric_limits&lt;double&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="49" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classclass__algorithm__base_1a35e482872c1dec9372c74c40a82208d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_base::class_algorithm_base</definition>
        <argsstring>()=default</argsstring>
        <name>class_algorithm_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a790233233d4352402e651a312e7ae76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_algorithm_base::class_algorithm_base</definition>
        <argsstring>(std::shared_ptr&lt; h5pp::File &gt; h5ppFile_, std::string sim_name_, SimulationType sim_type_)</argsstring>
        <name>class_algorithm_base</name>
        <param>
          <type>std::shared_ptr&lt; h5pp::File &gt;</type>
          <declname>h5ppFile_</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>sim_name_</declname>
        </param>
        <param>
          <type><ref refid="nmspc__settings_8h_1ad69f3cf5fdb6ef307d85180c346e7921" kindref="member">SimulationType</ref></type>
          <declname>sim_type_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="32" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="31" bodyend="51"/>
        <references refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" compoundref="class__algorithm__base_8h" startline="28">log</references>
        <references refid="namespace_logger_1a342c5c50f871cc563758e13c1fbf7d58" compoundref="nmspc__logger_8h" startline="33" endline="44">Logger::setLogger</references>
        <references refid="classclass__algorithm__base_1a64e1bbd06c9d036b60d1cd9536e8f0c8" compoundref="class__algorithm__base_8h" startline="42">sim_name</references>
        <references refid="namespacesettings_1_1console_1af5a0b931a18f3b2c1f12db4768c02aa9" compoundref="nmspc__settings_8h" startline="148">settings::console::verbosity</references>
        <references refid="namespacesettings_1_1console_1a82c11e45aadd82f57643ef3624d2e7be" compoundref="nmspc__settings_8h" startline="149">settings::console::timestamp</references>
        <references refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" compoundref="nmspc__tools_8h" startline="29">tools::log</references>
        <references refid="classclass__algorithm__base_1a539f089e4d2c8d121fbd0b9765529f72" compoundref="class__algorithm__base_8cpp" startline="233" endline="251">set_profiling_labels</references>
        <references refid="namespacetools_1_1finite_1_1profile_1a03758f528f727a4b09a678e6b9cdcd8f" compoundref="finite_2profile_8cpp" startline="21" endline="30">tools::finite::profile::init_profiling</references>
        <references refid="classclass__algorithm__base_1a4ae9a05248866219f0df931d6160e3d7" compoundref="class__algorithm__base_8h" startline="39">log_profiling</references>
        <references refid="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" compoundref="class__algorithm__base_8h" startline="38">h5pp_file</references>
        <references refid="classclass__algorithm__base_1a8b718fe0f45ad5636ec2b432c11568e0" compoundref="class__algorithm__base_8h" startline="40">log_sim_status</references>
        <references refid="namespacesettings_1_1input_1ab6ac8cfb0c1835dde36563f175f36bd7" compoundref="nmspc__settings_8h" startline="30">settings::input::input_file</references>
        <references refid="namespacesettings_1_1input_1a2529f9b5acd0b9f096fadd56bb7d4074" compoundref="nmspc__settings_8h" startline="31">settings::input::input_filename</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a539f089e4d2c8d121fbd0b9765529f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_base::set_profiling_labels</definition>
        <argsstring>()</argsstring>
        <name>set_profiling_labels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="36" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="233" bodyend="251"/>
        <references refid="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" compoundref="class__algorithm__base_8h" startline="81">t_tot</references>
        <references refid="classclass__tic__toc_1a235fdbf16b92fac52940f351d8459ab3" compoundref="class__tic__toc_8cpp" startline="22" endline="24">class_tic_toc::set_properties</references>
        <references refid="namespacesettings_1_1profiling_1ad748212c3c0325ea3821a62a0299bf3b" compoundref="nmspc__settings_8h" startline="144">settings::profiling::precision</references>
        <references refid="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" compoundref="class__algorithm__base_8h" startline="83">t_prt</references>
        <references refid="namespacesettings_1_1idmrg_1ac5b947fd1c6fd076ebbe1d3d5cf20a1f" compoundref="nmspc__settings_8h" startline="83">settings::idmrg::on</references>
        <references refid="classclass__algorithm__base_1a41e28970ec5e7a0cf2a1700b217f5152" compoundref="class__algorithm__base_8h" startline="84">t_con</references>
        <references refid="classclass__algorithm__base_1ac4665ca1f14f3b97154c961502c483c7" compoundref="class__algorithm__base_8h" startline="82">t_sim</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a41b199782e43aeaccf607b8191c3a027" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::run</definition>
        <argsstring>()=0</argsstring>
        <name>run</name>
        <reimplementedby refid="classclass__algorithm__infinite_1aab4b6749fea057d0f5e85c026bab919e">run</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a9bc7b209ddc5b1c246038d33ca327640">run</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1aaf615286a87f9d57401cbadc3c21b19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::compute_observables</definition>
        <argsstring>()=0</argsstring>
        <name>compute_observables</name>
        <reimplementedby refid="classclass__algorithm__infinite_1aafc806c6b29040a7273b4e1f163748d7">compute_observables</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a500bb23e547c5ab425e9678bfd2d177a">compute_observables</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a6d37e1472c3e74f8e50a11c71a8b03ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::check_convergence</definition>
        <argsstring>()=0</argsstring>
        <name>check_convergence</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1ad06337dc6d59f356ae4b408db1e34dbf">check_convergence</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1aac645a52a00193e6a8d15543117e455f">check_convergence</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1a90fabacf5cc62542140594000e3bdb6b">check_convergence</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1af421f5c16fa46ee2a75769bdd06f069a">check_convergence</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a6c823b9e21741e5aa47b75ef8c3be1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::write_measurements</definition>
        <argsstring>(bool force=false)=0</argsstring>
        <name>write_measurements</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a89dd9b352a0d683981bdbd3e8410225a">write_measurements</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a52035b9297cdc7a3a7a8450790d22c6b">write_measurements</reimplementedby>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1ae0e00d00bc9a0d33cb709ca625bddbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::write_state</definition>
        <argsstring>(bool force=false)=0</argsstring>
        <name>write_state</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a2410f9a94f5e90c9124643dc32412dbf">write_state</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a4cd57e7f868eeb1b7fc7ebd3acc98645">write_state</reimplementedby>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a881cc8f8ece0220f988663834996a219" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::write_logs</definition>
        <argsstring>(bool force=false)=0</argsstring>
        <name>write_logs</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1aaf0ecf5569f9c2670d98871e7cbeec33">write_logs</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1a4654f5d47acaecd8317f090899fb9afd">write_logs</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1a60bd820616381dc37b7b2c8d09913eac">write_logs</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1ae54acde0320ddbef4f0a8d497cf1fd9d">write_logs</reimplementedby>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1ae08aa4b8e9bbd286c9ec76f15553a037" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool class_algorithm_base::sim_on</definition>
        <argsstring>()=0</argsstring>
        <name>sim_on</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1ad20909b9e63dfcb1724a0c53268bdb51">sim_on</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1af6173971aac8a926019069605ffbe012">sim_on</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1ab174102e5a66349fb77eea583171b90b">sim_on</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1aed05140d7fb6474a7fc4326d8cad8e7b">sim_on</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a76ef69cebc415e32298214af4cf9003b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>long</type>
        <definition>virtual long class_algorithm_base::chi_max</definition>
        <argsstring>()=0</argsstring>
        <name>chi_max</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1a904706d36e61c0739a15823d672c0ca7">chi_max</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1aac4be7a4fa0dd0dc7a2b15509fb2f485">chi_max</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1a2568a7aae71bcd07fc211f167e35abeb">chi_max</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a4b7948508b5f399524bf6e7120f128d5">chi_max</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a0f6c17cedfeb0baba3df055e87655ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t class_algorithm_base::num_sites</definition>
        <argsstring>()=0</argsstring>
        <name>num_sites</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1afb5e5b37f63d3a92f2171c0685e50043">num_sites</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1a8a544d36345f8a75addcb271391b0783">num_sites</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1afe90098dcff03675aa6d7e1a1724262e">num_sites</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a36ece62ac9ecdcf78268cd2724129adf">num_sites</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a14c1cf2ee0f07ec3d4d3acd55ac213a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t class_algorithm_base::write_freq</definition>
        <argsstring>()=0</argsstring>
        <name>write_freq</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1a1eb94f25ffcd7a6d634327bfde1bf14d">write_freq</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1a496158a75304ab88926f7389d3994108">write_freq</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1ad63d1643b1020b0c2192697d558ed783">write_freq</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a458445c4e75e36919ef2a179f0e54644">write_freq</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a5d6af987e476e9a93a2bab9261ac16bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t class_algorithm_base::print_freq</definition>
        <argsstring>()=0</argsstring>
        <name>print_freq</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1a6831d6885838a4e9a94ebe27ce6dc201">print_freq</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1acf56cd65b80cad2317d6a6fd13d6cab2">print_freq</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1a712b186e3c063cb219fb2b2f391e74e9">print_freq</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a9bc785121de761779c324fd39ddfdb43">print_freq</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a77520add9ead85c0b5a98cdbb46edaf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool class_algorithm_base::chi_grow</definition>
        <argsstring>()=0</argsstring>
        <name>chi_grow</name>
        <reimplementedby refid="classclass__i_d_m_r_g_1ab329d7ed446dab62ccbf2330c53b6874">chi_grow</reimplementedby>
        <reimplementedby refid="classclass__f_d_m_r_g_1a36bc398c7f73f56386d4d048a5b38df4">chi_grow</reimplementedby>
        <reimplementedby refid="classclass__i_t_e_b_d_1a4b9d274c6d8b0f4874e3034a168daeb5">chi_grow</reimplementedby>
        <reimplementedby refid="classclass__x_d_m_r_g_1a5e47dd1fa4ee4d970220ebe0ca3b2133">chi_grow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a803b366e66ffaef47479278cbdb1a738" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::print_status_update</definition>
        <argsstring>()=0</argsstring>
        <name>print_status_update</name>
        <reimplementedby refid="classclass__algorithm__infinite_1af232e6d037549f0aae338b402aa9c722">print_status_update</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1ac996a89d34ba9c9323e04c8e1fad54e2">print_status_update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a96f34d67e881abd4d1ec4dd2d89728ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::print_status_full</definition>
        <argsstring>()=0</argsstring>
        <name>print_status_full</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a993724b938167db865be9b23f291b5d9">print_status_full</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a31460024ef07df92bc57719b2234a725">print_status_full</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1aeed6c86b2bb499b7b8977a9bca82e6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::print_profiling</definition>
        <argsstring>()=0</argsstring>
        <name>print_profiling</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a2f87c10d5c9c76ba1cf13becd4a3e786">print_profiling</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1ab43ed4eaab089d3ae2347a919258b750">print_profiling</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a4155242b70bbe53a9b7e887dfa5c37d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::print_profiling_sim</definition>
        <argsstring>(class_tic_toc &amp;t_parent)=0</argsstring>
        <name>print_profiling_sim</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a58411e4adb7dba48f3ba2c150e4ce392">print_profiling_sim</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1acd7c76938078bcf659c54fa901665fd7">print_profiling_sim</reimplementedby>
        <param>
          <type><ref refid="classclass__tic__toc" kindref="compound">class_tic_toc</ref> &amp;</type>
          <declname>t_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1afc54d558dbfc26bb8ae4f6607a2edbee" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::reset_to_random_state</definition>
        <argsstring>(const std::string parity)=0</argsstring>
        <name>reset_to_random_state</name>
        <reimplementedby refid="classclass__algorithm__infinite_1ae1fa5306f4179791aad85be014532787">reset_to_random_state</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1aec4f51a884302a5ae4c09f0106d8d79e">reset_to_random_state</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>parity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1adae1b7c6678d8c52304a3bcf64c1b521" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void class_algorithm_base::clear_saturation_status</definition>
        <argsstring>()=0</argsstring>
        <name>clear_saturation_status</name>
        <reimplementedby refid="classclass__algorithm__infinite_1a7cfa931e8444f5aba7bfee278f4a6b58">clear_saturation_status</reimplementedby>
        <reimplementedby refid="classclass__algorithm__finite_1a453b5c2fb7cbbce1e3572259bc81c7d8">clear_saturation_status</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1a5bf9787e3825f33baafbd06c4946babc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_base::write_status</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>write_status</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="73" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="133" bodyend="143"/>
        <references refid="namespacemath_1a950ba2c26eab3a176711e689337ad0e9" compoundref="nmspc__math_8h" startline="33" endline="36">math::mod</references>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="44">sim_status</references>
        <references refid="structstatus__data_1a0bf230f68ab2587ea9d80f4ef1aca4dc" compoundref="class__simulation__status_8h" startline="18">status_data::iteration</references>
        <references refid="classclass__algorithm__base_1a14c1cf2ee0f07ec3d4d3acd55ac213a7">write_freq</references>
        <references refid="namespacesettings_1_1hdf5_1ad844524c5a813073cc1cd8aed6e07537" compoundref="nmspc__settings_8h" startline="139">settings::hdf5::storage_level</references>
        <references refid="nmspc__settings_8h_1ab7c7349414d78d7a1f590dc61f9594adab50339a10e1de285ac99d4c3990b8693">NONE</references>
        <references refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" compoundref="class__algorithm__base_8h" startline="28">log</references>
        <references refid="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" compoundref="class__algorithm__base_8h" startline="38">h5pp_file</references>
        <references refid="classclass__algorithm__base_1a64e1bbd06c9d036b60d1cd9536e8f0c8" compoundref="class__algorithm__base_8h" startline="42">sim_name</references>
        <references refid="namespacetools_1_1common_1_1io_1a585ff2336f06f4cfa09cc0f9e514ece4" compoundref="common_2h5pp_8cpp" startline="9" endline="44">tools::common::io::write_simulation_status</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1aa8e759aeb0f79b39ac5d8e4c4a3bb18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_algorithm_base::update_bond_dimension</definition>
        <argsstring>()</argsstring>
        <name>update_bond_dimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="74" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="146" bodyend="163"/>
        <references refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" compoundref="class__algorithm__base_8h" startline="44">sim_status</references>
        <references refid="structstatus__data_1a394209e7e516250158bc78e854504288" compoundref="class__simulation__status_8h" startline="22">status_data::chi_max</references>
        <references refid="classclass__algorithm__base_1a76ef69cebc415e32298214af4cf9003b">chi_max</references>
        <references refid="classclass__algorithm__base_1a77520add9ead85c0b5a98cdbb46edaf6">chi_grow</references>
        <references refid="structstatus__data_1af5687f03a5f223cffd3a736a8c78a3e9" compoundref="class__simulation__status_8h" startline="40">status_data::bond_dimension_has_reached_max</references>
        <references refid="structstatus__data_1a4a0b0a001500ae9bc36b29d068f4103d" compoundref="class__simulation__status_8h" startline="21">status_data::chi_temp</references>
        <references refid="structstatus__data_1a66507c5502dd9342583929e5a0953321" compoundref="class__simulation__status_8h" startline="37">status_data::simulation_has_converged</references>
        <references refid="structstatus__data_1af54b3e221c66558f5f564f48d9974958" compoundref="class__simulation__status_8h" startline="38">status_data::simulation_has_saturated</references>
        <references refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" compoundref="class__algorithm__base_8h" startline="28">log</references>
        <references refid="classclass__algorithm__base_1adae1b7c6678d8c52304a3bcf64c1b521">clear_saturation_status</references>
      </memberdef>
      <memberdef kind="function" id="classclass__algorithm__base_1ada828b1dc778d6c547a8c03875a26b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_algorithm_base::process_memory_in_mb</definition>
        <argsstring>(std::string name)</argsstring>
        <name>process_memory_in_mb</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="75" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="207" bodyend="231"/>
        <references refid="namespaceqm_1_1spin_one_half_1a6f58116f2a00a0ee5e00f64e66813b74" compoundref="nmspc__quantum__mechanics_8cpp" startline="42">qm::spinOneHalf::sz</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classclass__algorithm__base_1a9d6b4c72b6f2e026a446ced69309e3ee" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool class_algorithm_base::check_saturation_using_slope</definition>
        <argsstring>(std::list&lt; bool &gt; &amp;B_vec, std::list&lt; double &gt; &amp;Y_vec, std::list&lt; int &gt; &amp;X_vec, double new_data, int iter, int rate, double tolerance, double &amp;slope)</argsstring>
        <name>check_saturation_using_slope</name>
        <param>
          <type>std::list&lt; bool &gt; &amp;</type>
          <declname>B_vec</declname>
        </param>
        <param>
          <type>std::list&lt; double &gt; &amp;</type>
          <declname>Y_vec</declname>
        </param>
        <param>
          <type>std::list&lt; int &gt; &amp;</type>
          <declname>X_vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>new_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>slope</declname>
        </param>
        <briefdescription>
<para>Checks convergence based on slope. We want to check once every &quot;rate&quot; steps. First, check the sim_state.iteration number when you last measured. If the measurement happened less than rate iterations ago, return. Otherwise, compute the slope of the last 25% of the measurements that have been made. The slope here is defined as the relative slope, i.e. <formula id="0">$ \frac{1}{ \langle y\rangle} * \frac{dy}{dx} $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="87" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.cpp" bodystart="58" bodyend="131"/>
        <references refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" compoundref="class__algorithm__base_8h" startline="28">log</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="16">
        <label>class_fDMRG</label>
        <link refid="classclass__f_d_m_r_g"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>class_algorithm_infinite</label>
        <link refid="classclass__algorithm__infinite"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>class_xDMRG</label>
        <link refid="classclass__x_d_m_r_g"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>class_iTEBD</label>
        <link refid="classclass__i_t_e_b_d"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>class_algorithm_finite</label>
        <link refid="classclass__algorithm__finite"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
      </node>
      <node id="19">
        <label>class_iDMRG</label>
        <link refid="classclass__i_d_m_r_g"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="24">
        <label>class_tic_toc</label>
        <link refid="classclass__tic__toc"/>
      </node>
      <node id="23">
        <label>status_data</label>
        <link refid="structstatus__data"/>
      </node>
      <node id="22">
        <label>class_simulation_status</label>
        <link refid="classclass__simulation__status"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>class_algorithm_base</label>
        <link refid="classclass__algorithm__base"/>
        <childnode refid="22" relation="usage">
          <edgelabel>sim_status</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>t_con</edgelabel>
          <edgelabel>t_sim</edgelabel>
          <edgelabel>t_tot</edgelabel>
          <edgelabel>t_prt</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" line="26" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_algorithm_base.h" bodystart="26" bodyend="96"/>
    <listofallmembers>
      <member refid="classclass__algorithm__base_1a6d37e1472c3e74f8e50a11c71a8b03ee" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>check_convergence</name></member>
      <member refid="classclass__algorithm__base_1a9d6b4c72b6f2e026a446ced69309e3ee" prot="protected" virt="non-virtual"><scope>class_algorithm_base</scope><name>check_saturation_using_slope</name></member>
      <member refid="classclass__algorithm__base_1a77520add9ead85c0b5a98cdbb46edaf6" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>chi_grow</name></member>
      <member refid="classclass__algorithm__base_1a76ef69cebc415e32298214af4cf9003b" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>chi_max</name></member>
      <member refid="classclass__algorithm__base_1a35e482872c1dec9372c74c40a82208d0" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__base_1a790233233d4352402e651a312e7ae76a" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>class_algorithm_base</name></member>
      <member refid="classclass__algorithm__base_1adae1b7c6678d8c52304a3bcf64c1b521" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>clear_saturation_status</name></member>
      <member refid="classclass__algorithm__base_1aaf615286a87f9d57401cbadc3c21b19a" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>compute_observables</name></member>
      <member refid="classclass__algorithm__base_1a39fdccbd48afa02c5526ecce4e7cf0e8" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>h5pp_file</name></member>
      <member refid="classclass__algorithm__base_1a7d8b31e09c367e1ce51d4586a8adf906" prot="protected" virt="non-virtual"><scope>class_algorithm_base</scope><name>log</name></member>
      <member refid="classclass__algorithm__base_1a4ae9a05248866219f0df931d6160e3d7" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>log_profiling</name></member>
      <member refid="classclass__algorithm__base_1a8b718fe0f45ad5636ec2b432c11568e0" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>log_sim_status</name></member>
      <member refid="classclass__algorithm__base_1a0f6c17cedfeb0baba3df055e87655ea8" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>num_sites</name></member>
      <member refid="classclass__algorithm__base_1a5d6af987e476e9a93a2bab9261ac16bb" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>print_freq</name></member>
      <member refid="classclass__algorithm__base_1aeed6c86b2bb499b7b8977a9bca82e6ab" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>print_profiling</name></member>
      <member refid="classclass__algorithm__base_1a4155242b70bbe53a9b7e887dfa5c37d9" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>print_profiling_sim</name></member>
      <member refid="classclass__algorithm__base_1a96f34d67e881abd4d1ec4dd2d89728ad" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>print_status_full</name></member>
      <member refid="classclass__algorithm__base_1a803b366e66ffaef47479278cbdb1a738" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>print_status_update</name></member>
      <member refid="classclass__algorithm__base_1ada828b1dc778d6c547a8c03875a26b9a" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>process_memory_in_mb</name></member>
      <member refid="classclass__algorithm__base_1aeec0f1d83000ef7ba92bbcdd74bdcabb" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>quietNaN</name></member>
      <member refid="classclass__algorithm__base_1afc54d558dbfc26bb8ae4f6607a2edbee" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>reset_to_random_state</name></member>
      <member refid="classclass__algorithm__base_1a41b199782e43aeaccf607b8191c3a027" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>run</name></member>
      <member refid="classclass__algorithm__base_1ac2a5042c5337ef3b8c6d29a115e25843" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>Scalar</name></member>
      <member refid="classclass__algorithm__base_1a539f089e4d2c8d121fbd0b9765529f72" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>set_profiling_labels</name></member>
      <member refid="classclass__algorithm__base_1a64e1bbd06c9d036b60d1cd9536e8f0c8" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>sim_name</name></member>
      <member refid="classclass__algorithm__base_1ae08aa4b8e9bbd286c9ec76f15553a037" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>sim_on</name></member>
      <member refid="classclass__algorithm__base_1a0dfe4e91492006565c1129e45ac185b8" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>sim_status</name></member>
      <member refid="classclass__algorithm__base_1a7ee19b5bbea7bb4dca809914690039a8" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>sim_type</name></member>
      <member refid="classclass__algorithm__base_1af36e30da0595f116629422821e1e4ced" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>stop_reason</name></member>
      <member refid="classclass__algorithm__base_1a9bef39d158c6e6d1eed969116c7345b4" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>StopReason</name></member>
      <member refid="classclass__algorithm__base_1a41e28970ec5e7a0cf2a1700b217f5152" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>t_con</name></member>
      <member refid="classclass__algorithm__base_1ad14c71fb99e1eb2b0e0d81e1a51a98c8" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>t_prt</name></member>
      <member refid="classclass__algorithm__base_1ac4665ca1f14f3b97154c961502c483c7" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>t_sim</name></member>
      <member refid="classclass__algorithm__base_1acc0a9428cfd271631302e375bfad3e92" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>t_tot</name></member>
      <member refid="classclass__algorithm__base_1aa8e759aeb0f79b39ac5d8e4c4a3bb18f" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>update_bond_dimension</name></member>
      <member refid="classclass__algorithm__base_1a14c1cf2ee0f07ec3d4d3acd55ac213a7" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>write_freq</name></member>
      <member refid="classclass__algorithm__base_1a881cc8f8ece0220f988663834996a219" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>write_logs</name></member>
      <member refid="classclass__algorithm__base_1a6c823b9e21741e5aa47b75ef8c3be1a3" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>write_measurements</name></member>
      <member refid="classclass__algorithm__base_1ae0e00d00bc9a0d33cb709ca625bddbde" prot="public" virt="pure-virtual"><scope>class_algorithm_base</scope><name>write_state</name></member>
      <member refid="classclass__algorithm__base_1a5bf9787e3825f33baafbd06c4946babc" prot="public" virt="non-virtual"><scope>class_algorithm_base</scope><name>write_status</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
