<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespace_textra" kind="namespace" language="C++">
    <compoundname>Textra</compoundname>
    <innerclass refid="struct_textra_1_1idx__dim__pair" prot="public">Textra::idx_dim_pair</innerclass>
    <innernamespace refid="namespace_textra_1_1omp">Textra::omp</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_textra_1a7db6974446758b79bad26e168a8daa78" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using Textra::MatrixType = typedef Eigen::Matrix&lt;Scalar, Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="21" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a358a270e8b355388963a513bd6617131" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, Eigen::Dynamic, 1 &gt;</type>
        <definition>using Textra::VectorType = typedef Eigen::Matrix&lt;Scalar, Eigen::Dynamic, 1&gt;</definition>
        <argsstring></argsstring>
        <name>VectorType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="23" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>Eigen::Index</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; Eigen::Index, rank &gt;</type>
        <definition>using Textra::array = typedef std::array&lt;Eigen::Index, rank&gt;</definition>
        <argsstring></argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="25" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a10f3538b95c4cbb49de58e66b2f567e7" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 8 &gt;</type>
        <definition>using Textra::array8 = typedef array&lt;8&gt;</definition>
        <argsstring></argsstring>
        <name>array8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="27" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1ac3a3122d06a20ecb2be3789b4c396633" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 7 &gt;</type>
        <definition>using Textra::array7 = typedef array&lt;7&gt;</definition>
        <argsstring></argsstring>
        <name>array7</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="28" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1accfb4fc520dc9a420a8a272f0d31c613" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 6 &gt;</type>
        <definition>using Textra::array6 = typedef array&lt;6&gt;</definition>
        <argsstring></argsstring>
        <name>array6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="29" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1aa5d67eec58bb02c58a5abb4446fd2e62" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 5 &gt;</type>
        <definition>using Textra::array5 = typedef array&lt;5&gt;</definition>
        <argsstring></argsstring>
        <name>array5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="30" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 4 &gt;</type>
        <definition>using Textra::array4 = typedef array&lt;4&gt;</definition>
        <argsstring></argsstring>
        <name>array4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="31" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 3 &gt;</type>
        <definition>using Textra::array3 = typedef array&lt;3&gt;</definition>
        <argsstring></argsstring>
        <name>array3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="32" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 2 &gt;</type>
        <definition>using Textra::array2 = typedef array&lt;2&gt;</definition>
        <argsstring></argsstring>
        <name>array2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="33" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 1 &gt;</type>
        <definition>using Textra::array1 = typedef array&lt;1&gt;</definition>
        <argsstring></argsstring>
        <name>array1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="34" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a22edfa414f8c3a6a550de61a5da26013" prot="public" static="no">
        <type><ref refid="namespace_textra_1aea7a06694107fdb524c71a1676dc0c01" kindref="member">array</ref>&lt; 0 &gt;</type>
        <definition>using Textra::array0 = typedef array&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>array0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="35" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; <ref refid="struct_eigen_1_1_index_pair" kindref="compound">Eigen::IndexPair</ref>&lt; Eigen::Index &gt;, N &gt;</type>
        <definition>using Textra::idxlistpair = typedef std::array&lt;Eigen::IndexPair&lt;Eigen::Index&gt;, N&gt;</definition>
        <argsstring></argsstring>
        <name>idxlistpair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="39" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_textra_1aa765d7f6f02b2cf8d8a0a615f8524fc1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>std::is_base_of&lt; Eigen::PlainObjectBase&lt; std::decay_t&lt; Derived &gt; &gt;, std::decay_t&lt; Derived &gt; &gt;</type>
        <definition>using Textra::is_plainObject = typedef std::is_base_of&lt;Eigen::PlainObjectBase&lt;std::decay_t&lt;Derived&gt; &gt;, std::decay_t&lt;Derived&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_plainObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="219" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref>&lt; 0 &gt;</type>
        <definition>constexpr idxlistpair&lt;0&gt; Textra::idx</definition>
        <argsstring>()</argsstring>
        <name>idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="41" column="34" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a88b1c409bada0f4ef38328f693f13428" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename idxType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref>&lt; N &gt;</type>
        <definition>constexpr idxlistpair&lt;N&gt; Textra::idx</definition>
        <argsstring>(const idxType(&amp;list1)[N], const idxType(&amp;list2)[N])</argsstring>
        <name>idx</name>
        <param>
          <type>const idxType(&amp;)</type>
          <declname>list1</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const idxType(&amp;)</type>
          <declname>list2</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="44" column="27" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ab3499a5589fe9c4fd846ad73d5bc592a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>NB</declname>
            <defname>NB</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref>&lt; N &gt;</type>
        <definition>constexpr idxlistpair&lt;N&gt; Textra::sortIdx</definition>
        <argsstring>(const std::array&lt; Eigen::Index, NB &gt; &amp;dimensions, const Eigen::Index(&amp;idx_ctrct_A)[N], const Eigen::Index(&amp;idx_ctrct_B)[N])</argsstring>
        <name>sortIdx</name>
        <param>
          <type>const std::array&lt; Eigen::Index, NB &gt; &amp;</type>
          <declname>dimensions</declname>
        </param>
        <param>
          <type>const Eigen::Index(&amp;)</type>
          <declname>idx_ctrct_A</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const Eigen::Index(&amp;)</type>
          <declname>idx_ctrct_B</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="61" column="27" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="61" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a37687efdda82cdb06c9fcb9ae9c7a866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::asEval</definition>
        <argsstring>(const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;expr)</argsstring>
        <name>asEval</name>
        <param>
          <type>const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="76" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae4adc4f53646417d7c2992c393610094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, 1&gt; Textra::extractDiagonal</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>extractDiagonal</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="93" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, 2&gt; Textra::asDiagonal</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;tensor)</argsstring>
        <name>asDiagonal</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="101" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a6944810952720760c1bab4e73d67741d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, 2&gt; Textra::asDiagonalSquared</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;tensor)</argsstring>
        <name>asDiagonalSquared</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="106" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1acc59a4f20b99a0fd697c204183b9b6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, 2&gt; Textra::asDiagonalInversed</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;tensor)</argsstring>
        <name>asDiagonalInversed</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="111" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ac87d98493f40ec2bd0bd37a6e2f82b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, 2&gt; Textra::asDiagonalInversed</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>asDiagonalInversed</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="116" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Textra::norm</definition>
        <argsstring>(const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;expr)</argsstring>
        <name>norm</name>
        <param>
          <type>const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="122" column="12" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a5f56dc93eefb399b6d351ba7fec85716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::asNormalized</definition>
        <argsstring>(const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;expr)</argsstring>
        <name>asNormalized</name>
        <param>
          <type>const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="128" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="128" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a2ec3c8de67b04570d63c5e62d0018eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Textra::normalize</definition>
        <argsstring>(Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor)</argsstring>
        <name>normalize</name>
        <param>
          <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="140" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae17bce4ded691562012858fb38bbe40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorConstant</definition>
        <argsstring>(Scalar constant, const std::array&lt; Eigen::Index, rank &gt; &amp;dims)</argsstring>
        <name>TensorConstant</name>
        <param>
          <type><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const std::array&lt; Eigen::Index, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="146" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a0a2edc0608bfd555cd06bd5c77e41785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dims</declname>
            <defname>Dims</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorConstant</definition>
        <argsstring>(Scalar constant, const Dims ... dims)</argsstring>
        <name>TensorConstant</name>
        <param>
          <type><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const Dims ...</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="153" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1acd37e413b112a7f8bfb3f5545b3407b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorRandom</definition>
        <argsstring>(const std::array&lt; Eigen::Index, rank &gt; &amp;dims)</argsstring>
        <name>TensorRandom</name>
        <param>
          <type>const std::array&lt; Eigen::Index, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="158" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1aa2bcac346273b457e00a84a8b2e74dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dims</declname>
            <defname>Dims</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorRandom</definition>
        <argsstring>(const Dims ... dims)</argsstring>
        <name>TensorRandom</name>
        <param>
          <type>const Dims ...</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="165" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1acc2dd09752f76d2c1a98a63562a3d32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorIdentity</definition>
        <argsstring>(long diagSize)</argsstring>
        <name>TensorIdentity</name>
        <param>
          <type>long</type>
          <declname>diagSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="170" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank-2 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, rank-2&gt; Textra::trace</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, const idxlistpair&lt; 1 &gt; &amp;idx_pair)</argsstring>
        <name>trace</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref>&lt; 1 &gt; &amp;</type>
          <declname>idx_pair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="179" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="179" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae538462362205a31f540cb244a739588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank-4 &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, rank-4&gt; Textra::trace</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, const idxlistpair&lt; 2 &gt; &amp;idx_pair)</argsstring>
        <name>trace</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_textra_1a9295bf71b1a3c80de05e9e3611893fe6" kindref="member">idxlistpair</ref>&lt; 2 &gt; &amp;</type>
          <declname>idx_pair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="192" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="192" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename <ref refid="infinite_2opt_8cpp_1aef6f3cd9efa41457bfe193372cef0c77" kindref="member">Derived::Scalar</ref>, rank &gt;</type>
        <definition>Eigen::Tensor&lt;typename Derived::Scalar, rank&gt; Textra::TensorCast</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const std::array&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>TensorCast</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="222" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1af300b6545f6073e1a259337c5a195dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename <ref refid="infinite_2opt_8cpp_1aef6f3cd9efa41457bfe193372cef0c77" kindref="member">Derived::Scalar</ref>, rank &gt;</type>
        <definition>Eigen::Tensor&lt;typename Derived::Scalar, rank&gt; Textra::TensorCast</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const Eigen::DSizes&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>TensorCast</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const Eigen::DSizes&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="227" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a281cbcd3c3f8d19d1361f8690cafa417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dims</declname>
            <defname>Dims</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorCast</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const Dims... dims)</argsstring>
        <name>TensorCast</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const Dims...</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="233" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a46291d0e1b234a1c8a086be9ce0fa83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorCast</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix)</argsstring>
        <name>TensorCast</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="239" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a3087116f15e45dc51ccef75506151be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorMap</definition>
        <argsstring>(const Eigen::PlainObjectBase&lt; Derived &gt; &amp;matrix, const std::array&lt; long, rank &gt; &amp;dims)</argsstring>
        <name>TensorMap</name>
        <param>
          <type>const Eigen::PlainObjectBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; long, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="248" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a684ff5b7291b8e7ed862586f31f0ad84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Dims</declname>
            <defname>Dims</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorMap</definition>
        <argsstring>(const Eigen::PlainObjectBase&lt; Derived &gt; &amp;matrix, const Dims... dims)</argsstring>
        <name>TensorMap</name>
        <param>
          <type>const Eigen::PlainObjectBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const Dims...</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="253" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1aeb35d2ee77421e594bd469e0f8ada467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::TensorMap</definition>
        <argsstring>(const Eigen::PlainObjectBase&lt; Derived &gt; &amp;matrix)</argsstring>
        <name>TensorMap</name>
        <param>
          <type>const Eigen::PlainObjectBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="258" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a337e1d8716e1f2818586f9813eb158d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename sizeType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::MatrixCast</definition>
        <argsstring>(const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;expr, const sizeType rows, const sizeType cols)</argsstring>
        <name>MatrixCast</name>
        <param>
          <type>const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="273" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae1f575ce11586f1ebc16c1b3206a318e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::VectorCast</definition>
        <argsstring>(const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;expr)</argsstring>
        <name>VectorCast</name>
        <param>
          <type>const Eigen::TensorBase&lt; T, Eigen::ReadOnlyAccessors &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="280" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="280" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
          <param>
            <type>typename sizeType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::MatrixMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, const sizeType rows, const sizeType cols)</argsstring>
        <name>MatrixMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="288" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a395f19fa66e38f2014da1f2e8b0b62c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
          <param>
            <type>typename sizeType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::MatrixMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;&amp;tensor, const sizeType rows, const sizeType cols)=delete</argsstring>
        <name>MatrixMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;&amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const sizeType</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="293" column="10" declfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" declline="293" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ace4d8df259f315e2b9ccba711286d3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::MatrixMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>MatrixMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="296" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a50bbaaa027e8530e0817d99d52cd45bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::MatrixMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;&amp;tensor)=delete</argsstring>
        <name>MatrixMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;&amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="300" column="10" declfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" declline="300" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::VectorMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor)</argsstring>
        <name>VectorMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="303" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a3737814fc1a458063f769e67313c7ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::VectorMap</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;&amp;tensor)=delete</argsstring>
        <name>VectorMap</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;&amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="307" column="10" declfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" declline="307" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a3e7f18ef077f7c5fc981fed9c47478f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank, Eigen::RowMajor &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, rank, Eigen::RowMajor&gt; Textra::to_RowMajor</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank, Eigen::ColMajor &gt; tensor)</argsstring>
        <name>to_RowMajor</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank, Eigen::ColMajor &gt;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="313" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1aa896827b924587e35680dfa6753362b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; typename <ref refid="infinite_2opt_8cpp_1aef6f3cd9efa41457bfe193372cef0c77" kindref="member">Derived::Scalar</ref>, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
        <definition>Eigen::Matrix&lt;typename Derived::Scalar, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor&gt; Textra::to_RowMajor</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix)</argsstring>
        <name>to_RowMajor</name>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="321" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a287411872c7efcfb47651c4b6db00b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank, Eigen::ColMajor &gt;</type>
        <definition>Eigen::Tensor&lt;Scalar, rank, Eigen::ColMajor&gt; Textra::to_ColMajor</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank, Eigen::RowMajor &gt; tensor)</argsstring>
        <name>to_ColMajor</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank, Eigen::RowMajor &gt;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="328" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a2b36f2257692f7122151e5cab3c067ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; typename <ref refid="infinite_2opt_8cpp_1aef6f3cd9efa41457bfe193372cef0c77" kindref="member">Derived::Scalar</ref>, Eigen::Dynamic, Eigen::Dynamic, Eigen::ColMajor &gt;</type>
        <definition>Eigen::Matrix&lt;typename Derived::Scalar, Eigen::Dynamic, Eigen::Dynamic, Eigen::ColMajor&gt; Textra::to_ColMajor</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix)</argsstring>
        <name>to_ColMajor</name>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="336" column="19" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Textra::isReal</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;obj, [[maybe_unused]] const std::string &amp;name=&quot;&quot;, double threshold=1e-14)</argsstring>
        <name>isReal</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval>1e-14</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="347" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="347" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae7794bc6f089ffe1c7121692c28c7592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Textra::isReal</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, const std::string &amp;name=&quot;&quot;, double threshold=1e-14)</argsstring>
        <name>isReal</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval>1e-14</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="358" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1afe298645862508a85a9695e60345ece4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Textra::hasNaN</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;obj, [[maybe_unused]] const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>hasNaN</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="364" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a4ee268cf6a8915dd7591bbeb89b0195c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Textra::hasNaN</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>hasNaN</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="369" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a34123857104ed8a9c77ce2f6365bda74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::subtract_phase</definition>
        <argsstring>(Eigen::MatrixBase&lt; Derived &gt; &amp;v)</argsstring>
        <name>subtract_phase</name>
        <param>
          <type>Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="375" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="375" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1adf0b0f09052c2cb60ff713691d9f28ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Textra::subtract_phase</definition>
        <argsstring>(Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor)</argsstring>
        <name>subtract_phase</name>
        <param>
          <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="395" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1af6755d93497c739f4cab661892897c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Textra::add_phase</definition>
        <argsstring>(Eigen::MatrixBase&lt; Derived &gt; &amp;v, std::vector&lt; double &gt; &amp;angles)</argsstring>
        <name>add_phase</name>
        <param>
          <type>Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>angles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="401" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="401" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1ae8de771b63d94ce09bc102d204eed693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Textra::add_phase</definition>
        <argsstring>(Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, std::vector&lt; double &gt; &amp;angles)</argsstring>
        <name>add_phase</name>
        <param>
          <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>angles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="414" column="10" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a4b7023317b7791adc6a9b5338b816c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Textra::sparcity</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor)</argsstring>
        <name>sparcity</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="421" column="12" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespace_textra_1a95c32bb517f4bd1b99a19d890e6be334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Textra::sparcity</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix)</argsstring>
        <name>sparcity</name>
        <param>
          <type>const Eigen::EigenBase&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="426" column="12" bodyfile="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" bodystart="426" bodyend="428"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><bold><ref refid="namespace_textra" kindref="compound">Textra</ref></bold> stands for &quot;Tensor Extra&quot;. Provides extra functionality to Eigen::Tensor. </para>
    </briefdescription>
    <detaileddescription>
<para>This namespace makes shorthand typedef&apos;s to <ref refid="namespace_eigen" kindref="compound">Eigen</ref>&apos;s unsupported Tensor module, and provides handy functions to interface between <computeroutput>Eigen::Tensor</computeroutput> and <computeroutput>Eigen::Matrix</computeroutput> objects. The contents of this namespace is co clear it is self-documenting ;) </para>
    </detaileddescription>
    <location file="/home/david/GitProjects/DMRG++/source/general/nmspc_tensor_extra.h" line="11" column="1"/>
  </compounddef>
</doxygen>
