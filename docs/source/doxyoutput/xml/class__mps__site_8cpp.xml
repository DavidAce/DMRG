<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class__mps__site_8cpp" kind="file" language="C++">
    <compoundname>class_mps_site.cpp</compoundname>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes refid="class__mps__site_8h" local="yes">class_mps_site.h</includes>
    <includes refid="debug_8h" local="no">config/debug.h</includes>
    <includes refid="hash_8h" local="no">math/hash.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="tools_2common_2fmt_8h" local="no">tools/common/fmt.h</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="20">
        <label>tools/common/fmt.h</label>
        <link refid="tools_2common_2fmt_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="15">
        <label>config/debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="17">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="10">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp</label>
        <link refid="class__mps__site_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="13">
        <label>optional</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>math/hash.h</label>
        <link refid="hash_8h"/>
      </node>
      <node id="3">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="class__mps__site_8cpp_1a2aaa9aa883d823e7282e93007e67e712" prot="public" static="no">
        <type><ref refid="classclass__mps__site_1ab867e2c6bd3acce8d616d5ae8fb59def" kindref="member">class_mps_site::Scalar</ref></type>
        <definition>using Scalar =  class_mps_site::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp" line="15" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-07-06.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>textra<sp/>must<sp/>appear<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="class__mps__site_8h" kindref="compound">class_mps_site.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="debug_8h" kindref="compound">config/debug.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hash_8h" kindref="compound">math/hash.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_2common_2fmt_8h" kindref="compound">tools/common/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class__mps__site_8cpp_1a2aaa9aa883d823e7282e93007e67e712" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/><ref refid="classclass__mps__site_1ab867e2c6bd3acce8d616d5ae8fb59def" kindref="member">class_mps_site::Scalar</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="classclass__mps__site_1afe524eebeb7995ac8681d8f4ecab2c7e" kindref="member">class_mps_site::class_mps_site</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18" refid="classclass__mps__site_1a864089bd17c4ab921d48f2f87fe9a91d" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site_1afe524eebeb7995ac8681d8f4ecab2c7e" kindref="member">class_mps_site::class_mps_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;M_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;L_,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label_)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>:<sp/>M(M_),<sp/>L(L_),<sp/>position(pos),<sp/>truncation_error(error),<sp/>label(std::move(label_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aa442a1a8f0feda7dea59d0c7642f0385" kindref="member">set_position</ref>(pos);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">set_label</ref>(label_);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(M_);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(L_);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" kindref="member">set_truncation_error</ref>(error);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classclass__mps__site_1a9959335613db5b85998f0e5cc87753a8" refkind="member"><highlight class="normal"><ref refid="classclass__mps__site_1afe524eebeb7995ac8681d8f4ecab2c7e" kindref="member">class_mps_site::class_mps_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;M_,<sp/>std::optional&lt;Eigen::Tensor&lt;Scalar,<sp/>1&gt;&gt;<sp/>L_,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label_)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>:<sp/>M(M_),<sp/>L(std::move(L_)),<sp/>position(pos),<sp/>truncation_error(error),<sp/>label(std::move(label_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aa442a1a8f0feda7dea59d0c7642f0385" kindref="member">set_position</ref>(pos);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">set_label</ref>(label_);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(M_);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L_)<sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(L_.value());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" kindref="member">set_truncation_error</ref>(error);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>define<sp/>the<sp/>destructor<sp/>and<sp/>other<sp/>special<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>enclose<sp/>data<sp/>in<sp/>unique_ptr<sp/>for<sp/>this<sp/>pimpl<sp/>idiom.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>unique_ptr<sp/>will<sp/>forcibly<sp/>inline<sp/>its<sp/>own<sp/>default<sp/>deleter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>follow<sp/>&quot;rule<sp/>of<sp/>five&quot;,<sp/>so<sp/>we<sp/>must<sp/>also<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>own<sp/>copy/move<sp/>ctor<sp/>and<sp/>copy/move<sp/>assignments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>has<sp/>the<sp/>side<sp/>effect<sp/>that<sp/>we<sp/>must<sp/>define<sp/>our<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator=<sp/>and<sp/>copy<sp/>assignment<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>more:<sp/>https://stackoverflow.com/questions/33212686/how-to-use-unique-ptr-with-forward-declared-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>And<sp/>here:<sp/><sp/>https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classclass__mps__site_1a576bab3f91247f999b377e2b7a6ebaa1" kindref="member">class_mps_site::~class_mps_site</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>dtor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="classclass__mps__site_1afe524eebeb7995ac8681d8f4ecab2c7e" kindref="member">class_mps_site::class_mps_site</ref>(<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__mps__site_1af087144acf0bdd640993409f5b556c28" kindref="member">class_mps_site::operator=</ref>(<ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>move<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classclass__mps__site_1afe524eebeb7995ac8681d8f4ecab2c7e" kindref="member">class_mps_site::class_mps_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;other)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;<ref refid="classclass__mps__site_1af087144acf0bdd640993409f5b556c28" kindref="member">class_mps_site::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">class_mps_site::isCenter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.has_value();<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classclass__mps__site_1ab08c40dc7ab9cb4fa63323f4246cc90f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ab08c40dc7ab9cb4fa63323f4246cc90f" kindref="member">class_mps_site::has_L</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>.has_value();<sp/>}</highlight></codeline>
<codeline lineno="58" refid="classclass__mps__site_1adb7e82753d2ac523482b5cbc9a020e3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1adb7e82753d2ac523482b5cbc9a020e3b" kindref="member">class_mps_site::has_M</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a595aabeb4e775b4ee6b16ff623ae06a6" kindref="member">M</ref>.has_value();<sp/>}</highlight></codeline>
<codeline lineno="59" refid="classclass__mps__site_1ab35e901e3a6f89bb180a8d329f3048f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ab35e901e3a6f89bb180a8d329f3048f8" kindref="member">class_mps_site::has_LC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.has_value();<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" refkind="member"><highlight class="normal">Eigen::DSizes&lt;long,<sp/>3&gt;<sp/><ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">class_mps_site::dimensions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::DSizes&lt;long,<sp/>3&gt;{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()};<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classclass__mps__site_1adc127ddd66aa7f3abbe3620f07fed7f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1adc127ddd66aa7f3abbe3620f07fed7f1" kindref="member">class_mps_site::is_real</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" kindref="member">Textra::isReal</ref>(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;M_bare&quot;</highlight><highlight class="normal">)<sp/>and<sp/><ref refid="namespace_textra_1aa36ece75987a034d93a8afeb81cb1e46" kindref="member">Textra::isReal</ref>(<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="64" refid="classclass__mps__site_1af9837feb3806fea3457b96b2e68efd5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1af9837feb3806fea3457b96b2e68efd5c" kindref="member">class_mps_site::has_nan</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afe298645862508a85a9695e60345ece4" kindref="member">Textra::hasNaN</ref>(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;M_bare&quot;</highlight><highlight class="normal">)<sp/>and<sp/><ref refid="namespace_textra_1afe298645862508a85a9695e60345ece4" kindref="member">Textra::hasNaN</ref>(<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="65" refid="classclass__mps__site_1a40e9b9ae5b59d38eb0e279a5b164139a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a40e9b9ae5b59d38eb0e279a5b164139a" kindref="member">class_mps_site::assert_validity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af9837feb3806fea3457b96b2e68efd5c" kindref="member">has_nan</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::assert_validity():<sp/>MPS<sp/>(M<sp/>or<sp/>L)<sp/>at<sp/>position<sp/>{}<sp/>has<sp/>NaN&apos;s&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classclass__mps__site_1a744c77e94243365ca9049df2b40b7c68" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a744c77e94243365ca9049df2b40b7c68" kindref="member">class_mps_site::assert_dimensions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>!=<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().dimension(0))</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>Assert<sp/>failed:<sp/>Dimensions<sp/>for<sp/>B<sp/>and<sp/>L<sp/>are<sp/>incompatible<sp/>at<sp/>site<sp/>{}:<sp/>B<sp/>{}<sp/>|<sp/>L<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>!=<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().dimension(0))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>Assert<sp/>failed:<sp/>Dimensions<sp/>for<sp/>A<sp/>and<sp/>L<sp/>are<sp/>incompatible<sp/>at<sp/>site<sp/>{}:<sp/>A<sp/>{}<sp/>|<sp/>L<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AC&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>!=<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().dimension(0))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>Assert<sp/>failed:<sp/>Dimensions<sp/>for<sp/>AC<sp/>and<sp/>L<sp/>are<sp/>incompatible<sp/>at<sp/>site<sp/>{}:<sp/>AC<sp/>{}<sp/>|<sp/>L<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>!=<sp/><ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>().dimension(0))</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>Assert<sp/>failed:<sp/>Dimensions<sp/>for<sp/>AC<sp/>and<sp/>L<sp/>are<sp/>incompatible<sp/>at<sp/>site<sp/>{}:<sp/>AC<sp/>{}<sp/>|<sp/>LC{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classclass__mps__site_1a0d9bd5bc4251ebb74b3357632ff999a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a0d9bd5bc4251ebb74b3357632ff999a9" kindref="member">class_mps_site::assert_identity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().contract(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>2},<sp/>{0,<sp/>2}));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).isIdentity(1e-10))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>{0}^dagger<sp/>{0}<sp/>is<sp/>not<sp/>identity<sp/>at<sp/>pos<sp/>{1}:<sp/>\n{2}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>()));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().contract(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1},<sp/>{0,<sp/>1}));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).isIdentity(1e-10))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>{0}^dagger<sp/>{0}<sp/>is<sp/>not<sp/>identity<sp/>at<sp/>pos<sp/>{1}:<sp/>\n{2}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>()));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>()<sp/>or<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AC&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>0&gt;<sp/>MM<sp/><sp/><sp/>=<sp/><ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>().contract(<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>().conjugate(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2}));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>=<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(MM(0));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/>1e-10)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site:<sp/>{0}^dagger<sp/>{0}<sp/>is<sp/>not<sp/>unity<sp/>at<sp/>pos<sp/>{1}:<sp/>{2:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">class_mps_site::get_M_bare</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a595aabeb4e775b4ee6b16ff623ae06a6" kindref="member">M</ref>)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a595aabeb4e775b4ee6b16ff623ae06a6" kindref="member">M</ref>.value().size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_M_bare():<sp/>M<sp/>has<sp/>size<sp/>0<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a595aabeb4e775b4ee6b16ff623ae06a6" kindref="member">M</ref>.value();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_M_bare():<sp/>M<sp/>has<sp/>not<sp/>been<sp/>set<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115" refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">class_mps_site::get_M</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.value().dimension(0)<sp/>!=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(2))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_M():<sp/>M<sp/>and<sp/>LC<sp/>dim<sp/>mismatch:<sp/>{}<sp/>!=<sp/>{}<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(2),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.value().dimension(0),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.value().size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_M():<sp/>MC<sp/>has<sp/>size<sp/>0<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.value();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;(<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>-&gt;device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().contract(<ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>()),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{0}));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>-&gt;size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_M():<sp/>built<sp/>MC<sp/>with<sp/>size<sp/>0<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.value();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">class_mps_site::get_L</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>-&gt;size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_L():<sp/>L<sp/>has<sp/>size<sp/>0<sp/>at<sp/>position<sp/>{}<sp/>|<sp/>label<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>-&gt;size()<sp/>!=<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_L():<sp/>L.size()<sp/>{}<sp/>!=<sp/>chiL<sp/>{}<sp/>at<sp/>position<sp/>{}<sp/>|<sp/>M<sp/>dims<sp/>{}<sp/>|<sp/>label<sp/>{}&quot;</highlight><highlight class="normal">,<ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>-&gt;size(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>-&gt;size()<sp/>!=<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>())</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_L():<sp/>L.size()<sp/>{}<sp/>!=<sp/>chiR<sp/>{}<sp/>at<sp/>position<sp/>{}<sp/>|<sp/>M<sp/>dims<sp/>{}<sp/>|<sp/>label<sp/>{}&quot;</highlight><highlight class="normal">,<ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>-&gt;size(),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref>.value();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_L():<sp/>L<sp/>has<sp/>not<sp/>been<sp/>set<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146" refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">class_mps_site::get_LC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>-&gt;dimension(0)<sp/>!=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(2))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_LC():<sp/>M<sp/>dimensions<sp/>{}<sp/>are<sp/>incompatible<sp/>with<sp/>LC<sp/>dimensions<sp/>{}<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.value().dimensions(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.value().size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_LC():<sp/>LC<sp/>has<sp/>size<sp/>0<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref>.value();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_LC():<sp/>Site<sp/>at<sp/>position<sp/>{}<sp/>is<sp/>not<sp/>a<sp/>center&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classclass__mps__site_1a4369c9c4f7950fce81b37c9af13c21bb" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">class_mps_site::get_M_bare</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::as_const(*this).get_M_bare());<sp/>}</highlight></codeline>
<codeline lineno="158" refid="classclass__mps__site_1a346a7458ecee54ef01fb4b462daf1d39" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">class_mps_site::get_M</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::as_const(*this).get_M());<sp/>}</highlight></codeline>
<codeline lineno="159" refid="classclass__mps__site_1aa60f0056e3084fc8cfb8c98a002baafa" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">class_mps_site::get_L</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::as_const(*this).get_L());<sp/>}</highlight></codeline>
<codeline lineno="160" refid="classclass__mps__site_1acd304ba6e94c47b32cc91d4ec20ceb45" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">class_mps_site::get_LC</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::as_const(*this).get_LC());<sp/>}</highlight></codeline>
<codeline lineno="161" refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">class_mps_site::get_truncation_error</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a4bc8241778b983484bd8038422af03fd" kindref="member">truncation_error</ref>;<sp/>}</highlight></codeline>
<codeline lineno="162" refid="classclass__mps__site_1afc16104aba7efa1893cd417653fccf1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afc16104aba7efa1893cd417653fccf1c" kindref="member">class_mps_site::get_truncation_error_LC</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ae164f8098ffd735936dfcddcbfa57dd3" kindref="member">truncation_error_LC</ref>;<sp/>}</highlight></codeline>
<codeline lineno="163" refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" refkind="member"><highlight class="normal">std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">class_mps_site::get_label</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref>.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;No<sp/>label<sp/>found<sp/>at<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167" refid="classclass__mps__site_1ace3ae49b18d3e3272b5fc5cb29bc910b" refkind="member"><highlight class="normal">std::tuple&lt;long,<sp/>long,<sp/>long&gt;<sp/><ref refid="classclass__mps__site_1ace3ae49b18d3e3272b5fc5cb29bc910b" kindref="member">class_mps_site::get_dims</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()};<sp/>}</highlight></codeline>
<codeline lineno="168" refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">class_mps_site::spin_dim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(0);<sp/>}</highlight></codeline>
<codeline lineno="169" refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">class_mps_site::get_chiL</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(1);<sp/>}</highlight></codeline>
<codeline lineno="170" refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">class_mps_site::get_chiR</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(2);<sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classclass__mps__site_1aa442a1a8f0feda7dea59d0c7642f0385" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aa442a1a8f0feda7dea59d0c7642f0385" kindref="member">class_mps_site::set_position</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position_)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref><sp/>=<sp/>position_;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.reset();</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="178" refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" refkind="member"><highlight class="normal">T<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">class_mps_site::get_position</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>.value());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;class_mps_site::get_position():<sp/>Position<sp/>hasn&apos;t<sp/>been<sp/>set<sp/>on<sp/>mps<sp/>site.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>class_mps_site::get_position&lt;size_t&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>class_mps_site::get_position&lt;long&gt;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classclass__mps__site_1afd5078441c3d8ee955759fed9fda792a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afd5078441c3d8ee955759fed9fda792a" kindref="member">class_mps_site::set_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;M_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;L_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;label_)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>has<sp/>to<sp/>be<sp/>a<sp/>&quot;bare&quot;<sp/>matrix,<sp/>i.e.<sp/>not<sp/>an<sp/>MC<sp/>which<sp/>would<sp/>include<sp/>LC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(M_);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(L_);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" kindref="member">set_truncation_error</ref>(error);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">set_label</ref>(label_);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">class_mps_site::set_M</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;M_)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M<sp/>has<sp/>to<sp/>be<sp/>a<sp/>&quot;bare&quot;<sp/>matrix,<sp/>i.e.<sp/>not<sp/>an<sp/>MC<sp/>which<sp/>would<sp/>include<sp/>LC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a595aabeb4e775b4ee6b16ff623ae06a6" kindref="member">M</ref><sp/>=<sp/>M_;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.reset();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;class_mps_site::set_M(const<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;):<sp/>Can&apos;t<sp/>set<sp/>M:<sp/>Position<sp/>hasn&apos;t<sp/>been<sp/>set<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205" refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">class_mps_site::set_L</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;L_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(L_).norm();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/>1e-8)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;class_mps_site::set_L():<sp/>Norm<sp/>of<sp/>L<sp/>is<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(fmt::format(&quot;class_mps_site::set_L():<sp/>Can&apos;t<sp/>set<sp/>L:<sp/>Norm<sp/>of<sp/>L<sp/>is<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;,<sp/>norm));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(position<sp/>and<sp/>position.value()<sp/>==<sp/>0<sp/>and<sp/>get_label()<sp/>!=<sp/>&quot;B&quot;){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(L_.size()<sp/>!=<sp/>1)<sp/>throw<sp/>std::logic_error(&quot;Left<sp/>edge<sp/>L<sp/>should<sp/>have<sp/>size<sp/>1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::abs(L_.coeff(0))<sp/>!=<sp/>1.0)<sp/>throw<sp/>std::logic_error(&quot;Left<sp/>edge<sp/>L<sp/>should<sp/>be<sp/>equal<sp/>to<sp/>1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>L_;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a4bc8241778b983484bd8038422af03fd" kindref="member">truncation_error</ref><sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>set<sp/>L:<sp/>Position<sp/>hasn&apos;t<sp/>been<sp/>set<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224" refid="classclass__mps__site_1add74ff40c39694e4eb5c7177bc97c2c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">class_mps_site::set_L</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Eigen::Tensor&lt;Scalar,<sp/>1&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&amp;L_and_error)<sp/>{<sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(L_and_error.first,<sp/>L_and_error.second);<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">class_mps_site::set_LC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;LC_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(LC_).norm();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/>1e-8)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;class_mps_site::set_LC():<sp/>Norm<sp/>of<sp/>LC<sp/>is<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_textra_1afaa9f7837b252493251f108e0b64fc1b" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(fmt::format(&quot;class_mps_site::set_LC():<sp/>Can&apos;t<sp/>set<sp/>L:<sp/>Norm<sp/>of<sp/>LC<sp/>is<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;,<sp/>norm));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref><sp/>and<sp/><ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>.value()<sp/>==<sp/>0<sp/>and<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Only<sp/>an<sp/>A-site<sp/>can<sp/>become<sp/>an<sp/>AC<sp/>site<sp/>(not<sp/>really<sp/>true<sp/>though&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a644fd37b2fa54516a3ce0a62ec2a2e7e" kindref="member">position</ref>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref><sp/>=<sp/>LC_;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref>.reset();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ae164f8098ffd735936dfcddcbfa57dd3" kindref="member">truncation_error_LC</ref><sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">set_label</ref>(</highlight><highlight class="stringliteral">&quot;AC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>set<sp/>LC:<sp/>Position<sp/>hasn&apos;t<sp/>been<sp/>set<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="classclass__mps__site_1a590251ed494bdd2670074e5f8f8a2dbc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">class_mps_site::set_LC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Eigen::Tensor&lt;Scalar,<sp/>1&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&amp;LC_and_error)<sp/>{<sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">set_LC</ref>(LC_and_error.first,<sp/>LC_and_error.second);<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ad1e7e31cdd1e0bc0f619c46b9259654e" kindref="member">class_mps_site::set_truncation_error</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{<sp/><ref refid="classclass__mps__site_1a4bc8241778b983484bd8038422af03fd" kindref="member">truncation_error</ref><sp/>=<sp/>error;<sp/>}</highlight></codeline>
<codeline lineno="249" refid="classclass__mps__site_1ad35e234bbbd5d53a9aedde6f5435a496" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ad35e234bbbd5d53a9aedde6f5435a496" kindref="member">class_mps_site::set_truncation_error_LC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error)<sp/>{<sp/><ref refid="classclass__mps__site_1ae164f8098ffd735936dfcddcbfa57dd3" kindref="member">truncation_error_LC</ref><sp/>=<sp/>error;<sp/>}</highlight></codeline>
<codeline lineno="250" refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">class_mps_site::set_label</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;label_)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>flipping<sp/>the<sp/>kind<sp/>of<sp/>site<sp/>from<sp/>B<sp/>to<sp/>non<sp/>B<sp/>(or<sp/>vice-versa),<sp/>then<sp/>the<sp/>L<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>removed<sp/>since<sp/>it<sp/>changes<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref>.empty()<sp/>and<sp/>not<sp/>label_.empty()<sp/>and<sp/><ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref>.front()<sp/>!=<sp/>label_.front())<sp/><ref refid="classclass__mps__site_1a41bf36d811a5ab8b260ef7a79a597604" kindref="member">unset_L</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>=<sp/>label_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257" refid="classclass__mps__site_1a8b9c026baf5785cff95c919f5d96de95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a8b9c026baf5785cff95c919f5d96de95" kindref="member">class_mps_site::unset_LC</ref>()<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a99352170c2830820c09046f46deb2519" kindref="member">LC</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afbf01dcf9cb9a7bb625d2f9c6bbaee0c" kindref="member">MC</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AC&quot;</highlight><highlight class="normal">)<sp/><ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="classclass__mps__site_1a41bf36d811a5ab8b260ef7a79a597604" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a41bf36d811a5ab8b260ef7a79a597604" kindref="member">class_mps_site::unset_L</ref>(){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a4ac1723dc1be6691da78157b4d20f82c" kindref="member">L</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classclass__mps__site_1a479d72f266fe8c7e555093486f0ce3fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a479d72f266fe8c7e555093486f0ce3fd" kindref="member">class_mps_site::merge_mps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>is<sp/>done<sp/>when<sp/>merging<sp/>mps<sp/>after<sp/>an<sp/>svd<sp/>split,<sp/>for<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>!=<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>())</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;class_mps_site::merge_mps(const<sp/>class_mps_site<sp/>&amp;):<sp/>position<sp/>mismatch:<sp/>this<sp/>pos<sp/>{}<sp/>!=<sp/>other<sp/>pos<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>other.<ref refid="classclass__mps__site_1adb7e82753d2ac523482b5cbc9a020e3b" kindref="member">has_M</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;class_mps_site::merge_mps(const<sp/>class_mps_site<sp/>&amp;):<sp/>Got<sp/>mps<sp/>site<sp/>with<sp/>undefined<sp/>M&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1ab08c40dc7ab9cb4fa63323f4246cc90f" kindref="member">has_L</ref>())</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>{}[{}]<sp/>|<sp/>M<sp/>dims<sp/>{}<sp/>|<sp/>L<sp/>dim<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().dimensions());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;{}[{}]<sp/>|<sp/>M<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>other.<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>copy<sp/>the<sp/>bare<sp/>&quot;M&quot;,<sp/>i.e.<sp/>not<sp/>MC,<sp/>which<sp/>would<sp/>include<sp/>LC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(other.<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>A/AC/B<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8ff4b89a63db23de290d517048f084e2" kindref="member">set_label</ref>(other.<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>flipping<sp/>the<sp/>kind<sp/>of<sp/>site<sp/>from<sp/>B<sp/>to<sp/>non<sp/>B<sp/>(or<sp/>vice<sp/>versa),<sp/>then<sp/>the<sp/>L<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>removed<sp/>since<sp/>it<sp/>changes<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>().front()<sp/>!=<sp/>other.<ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>().front())<sp/><ref refid="classclass__mps__site_1a41bf36d811a5ab8b260ef7a79a597604" kindref="member">unset_L</ref>();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>only<sp/>copy<sp/>the<sp/>L<sp/>matrix<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>does<sp/>not<sp/>exist<sp/>it<sp/>may<sp/>just<sp/>not<sp/>have<sp/>been<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>instance,<sp/>when<sp/>splitting<sp/>a<sp/>multisite<sp/>tensor<sp/>into<sp/>its<sp/>contituent<sp/>mps<sp/>sites,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>edge<sp/>mps<sp/>sites<sp/>have<sp/>empty<sp/>L<sp/>matrices<sp/>on<sp/>them<sp/>because<sp/>these<sp/>are<sp/>not<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>intended,<sp/>but<sp/>should<sp/>be<sp/>checked<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>if<sp/>there<sp/>is<sp/>no<sp/>L<sp/>on<sp/>the<sp/>other<sp/>mps,<sp/>there<sp/>has<sp/>to<sp/>exist<sp/>a<sp/>previous<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>this<sp/>mps<sp/>--<sp/>we<sp/>can&apos;t<sp/>leave<sp/>here<sp/>without<sp/>having<sp/>defined<sp/>L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1ab08c40dc7ab9cb4fa63323f4246cc90f" kindref="member">has_L</ref>())</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(other.<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>(),<sp/>other.<ref refid="classclass__mps__site_1ad90a47294f7bb6066f117cc61a85723a" kindref="member">get_truncation_error</ref>());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="classclass__mps__site_1ab08c40dc7ab9cb4fa63323f4246cc90f" kindref="member">has_L</ref>()){</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>have<sp/>a<sp/>situation<sp/>where<sp/>no<sp/>L<sp/>was<sp/>given,<sp/>and<sp/>no<sp/>L<sp/>is<sp/>found<sp/>on<sp/>this<sp/>site.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>edge-sites<sp/>this<sp/>is<sp/>simple:<sp/>then<sp/>the<sp/>mps<sp/>has<sp/>edge-dimension<sp/>==<sp/>1,<sp/>so<sp/>the<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>way<sp/>to<sp/>have<sp/>a<sp/>normalized<sp/>L<sp/>is<sp/>to<sp/>set<sp/>it<sp/>to<sp/>1.<sp/>Otherwise,<sp/>this<sp/>is<sp/>a<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>Eigen::Tensor&lt;Scalar,1&gt;(1).setConstant(1.0);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>==<sp/>1)<sp/>or<sp/>(<ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>==<sp/>1))<sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(one);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;class_mps_site::merge_mps(const<sp/>class_mps_site<sp/>&amp;):<sp/>position<sp/>{}<sp/>|<sp/>label<sp/>{}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>other<sp/>mps<sp/>without<sp/>an<sp/>L,<sp/>and<sp/>there<sp/>is<sp/>no<sp/>preexisting<sp/>L&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>()));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>center<sp/>LC<sp/>if<sp/>it&apos;s<sp/>in<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">set_LC</ref>(other.<ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>(),<sp/>other.<ref refid="classclass__mps__site_1afc16104aba7efa1893cd417653fccf1c" kindref="member">get_truncation_error_LC</ref>());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().dimension(2)<sp/>!=<sp/><ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>().dimension(0))</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Got<sp/>center<sp/>of<sp/>wrong<sp/>dimension.<sp/>M<sp/>dims<sp/>{}<sp/>are<sp/>not<sp/>compatible<sp/>with<sp/>LC<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/><ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classclass__mps__site_1a7dc50135d9e136844dcd1ce2d23a84ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a7dc50135d9e136844dcd1ce2d23a84ab" kindref="member">class_mps_site::apply_mpo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>&amp;mpo)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Applying<sp/>mpo<sp/>(dims<sp/>{})<sp/>at<sp/>position<sp/>{}<sp/>|<sp/>isCenter:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mpo.dimensions(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mpoDimL<sp/>=<sp/>mpo.dimension(0);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mpoDimR<sp/>=<sp/>mpo.dimension(1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mpoDimL<sp/>!=<sp/>mpoDimR)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>apply<sp/>mpo&apos;s<sp/>with<sp/>different<sp/>L/R<sp/>dims:<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a7fdd521f619a8c39b8549d450814c419" kindref="member">isCenter</ref>())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>LC_temp<sp/>=<sp/><ref refid="classclass__mps__site_1a27a658f24c50b4b815122aacab41d7e4" kindref="member">get_LC</ref>().broadcast(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">Textra::array1</ref>{mpoDimR});</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a2ec3c8de67b04570d63c5e62d0018eaf" kindref="member">Textra::normalize</ref>(LC_temp);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">set_LC</ref>(LC_temp);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>M_bare_temp(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>*<sp/>mpoDimL,<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>*<sp/>mpoDimR});</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>M_bare_temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>()</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(mpo,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0},<sp/>{2}))</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(<ref refid="namespace_textra_1aa5d67eec58bb02c58a5abb4446fd2e62" kindref="member">Textra::array5</ref>{4,<sp/>0,<sp/>2,<sp/>1,<sp/>3})</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reshape(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>*<sp/>mpoDimL,<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>*<sp/>mpoDimR});</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>L_temp<sp/>=<sp/><ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().broadcast(<ref refid="namespace_textra_1a95357bf0fb199a2918cecc55e91cfa18" kindref="member">Textra::array1</ref>{mpoDimL});</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a2ec3c8de67b04570d63c5e62d0018eaf" kindref="member">Textra::normalize</ref>(L_temp);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(L_temp);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(M_bare_temp);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classclass__mps__site_1a3ff64592e765842d39c4aac985a00cd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a7dc50135d9e136844dcd1ce2d23a84ab" kindref="member">class_mps_site::apply_mpo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;mpo)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>M_bare_temp(mpo.dimension(1),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>M_bare_temp.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>mpo.contract(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(M_bare_temp);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classclass__mps__site_1a37d941231ea325c682129c9a2ac92f42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a37d941231ea325c682129c9a2ac92f42" kindref="member">class_mps_site::stash_U</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;U,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,3&gt;</ref>&gt;{U,0,dst};</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359" refid="classclass__mps__site_1a68f9dcffdb536c2b7a827b41a4359a79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a68f9dcffdb536c2b7a827b41a4359a79" kindref="member">class_mps_site::stash_S</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;S,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{S,error,dst};</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362" refid="classclass__mps__site_1adeccba4ad422bd84ce59570f5d665378" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a68f9dcffdb536c2b7a827b41a4359a79" kindref="member">class_mps_site::stash_S</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Eigen::Tensor&lt;Scalar,<sp/>1&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&amp;S_and_error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{S_and_error.first,S_and_error.second,dst};</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365" refid="classclass__mps__site_1abd9710073f93799d896721d372e08b2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1abd9710073f93799d896721d372e08b2b" kindref="member">class_mps_site::stash_C</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>&amp;C,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{C,error,dst};</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368" refid="classclass__mps__site_1af25fd1cf4dc8b058fe57f550ceeb942c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1abd9710073f93799d896721d372e08b2b" kindref="member">class_mps_site::stash_C</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Eigen::Tensor&lt;Scalar,<sp/>1&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&amp;C_and_error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{C_and_error.first,C_and_error.second,dst};</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371" refid="classclass__mps__site_1adaa517e23d41cf309dc0a83abbaf88dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1adaa517e23d41cf309dc0a83abbaf88dd" kindref="member">class_mps_site::stash_V</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;V,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref><sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,3&gt;</ref>&gt;{V,0,dst};</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="classclass__mps__site_1a8e3eba958f12aa731dd40799166bd053" refkind="member"><highlight class="normal">std::optional&lt;stash&lt;Eigen::Tensor&lt;Scalar,3&gt;&gt;&gt;<sp/>&amp;<sp/><ref refid="classclass__mps__site_1a8e3eba958f12aa731dd40799166bd053" kindref="member">class_mps_site::get_U_stash</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref>;}</highlight></codeline>
<codeline lineno="376" refid="classclass__mps__site_1ac4e7153dfb1431ebbf1ddbbae3c1701e" refkind="member"><highlight class="normal">std::optional&lt;stash&lt;Eigen::Tensor&lt;Scalar,1&gt;&gt;&gt;<sp/>&amp;<sp/><ref refid="classclass__mps__site_1ac4e7153dfb1431ebbf1ddbbae3c1701e" kindref="member">class_mps_site::get_S_stash</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref>;}</highlight></codeline>
<codeline lineno="377" refid="classclass__mps__site_1a7355a130c6f76c35308fe41bdc92a48f" refkind="member"><highlight class="normal">std::optional&lt;stash&lt;Eigen::Tensor&lt;Scalar,1&gt;&gt;&gt;<sp/>&amp;<sp/><ref refid="classclass__mps__site_1a7355a130c6f76c35308fe41bdc92a48f" kindref="member">class_mps_site::get_C_stash</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref>;}</highlight></codeline>
<codeline lineno="378" refid="classclass__mps__site_1a8d61fb65d332e32a9547b45409cb5d29" refkind="member"><highlight class="normal">std::optional&lt;stash&lt;Eigen::Tensor&lt;Scalar,3&gt;&gt;&gt;<sp/>&amp;<sp/><ref refid="classclass__mps__site_1a8d61fb65d332e32a9547b45409cb5d29" kindref="member">class_mps_site::get_V_stash</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref>;}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classclass__mps__site_1afa2dfbd9d112676f5488a3ee40fe68e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afa2dfbd9d112676f5488a3ee40fe68e2" kindref="member">class_mps_site::drop_stash</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Dropping<sp/>U_stash&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Dropping<sp/>S_stash&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Dropping<sp/>C_stash&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Dropping<sp/>V_stash&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classclass__mps__site_1a0e10987a03dcebdb4b49ad7688de1ce6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1a0e10987a03dcebdb4b49ad7688de1ce6" kindref="member">class_mps_site::merge_stash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site" kindref="compound">class_mps_site</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref><sp/>and<sp/>other.<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref>-&gt;pos_dst<sp/>==<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left-to-right<sp/>move.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>this<sp/>case<sp/>there<sp/>is<sp/>a<sp/>&quot;V&quot;<sp/>in<sp/>&quot;other&quot;<sp/>that<sp/>should<sp/>be<sp/>absorbed<sp/>into<sp/>this<sp/>site<sp/>from<sp/>the<sp/>left.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>1<sp/>--[New<sp/>&quot;M&quot;]--<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>--[V]--<sp/>2<sp/><sp/><sp/>1<sp/>--[this<sp/>&quot;M&quot;]--<sp/>2</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0(dim=1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>In<sp/>addition,<sp/>if<sp/>this<sp/>is<sp/>an<sp/>A<sp/>site<sp/>we<sp/>expect<sp/>an<sp/>&quot;S&quot;<sp/>to<sp/>come<sp/>along,<sp/>which<sp/>didn&apos;t<sp/>become<sp/>an<sp/>LC</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>for<sp/>the<sp/>site<sp/>on<sp/>the<sp/>left.<sp/>Presumably<sp/>the<sp/>true<sp/>LC<sp/>is<sp/>on<sp/>some<sp/>site<sp/>further<sp/>to<sp/>the<sp/>right.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Here<sp/>we<sp/>simply<sp/>set<sp/>it<sp/>as<sp/>the<sp/>new<sp/>L<sp/>of<sp/>this<sp/>site.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>V<sp/>stash<sp/>from<sp/>site<sp/>{}<sp/>into<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>!=<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Found<sp/>V<sp/>stash<sp/>at<sp/>the<sp/>wrong<sp/>position:<sp/>This<sp/>{}<sp/>|<sp/>Other<sp/>{}<sp/>|<sp/>Stash<sp/>destination<sp/>{}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),other.<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref>-&gt;pos_dst));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;V<sp/>=<sp/>other.<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref>-&gt;data;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(V.dimension(0)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>merge<sp/>stash<sp/>from<sp/>left<sp/>site<sp/>{}<sp/>into<sp/>{}:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;V<sp/>has<sp/>invalid<sp/>dimensions<sp/>{}.<sp/>Dim<sp/>at<sp/>idx<sp/>0<sp/>should<sp/>be<sp/>==<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>V.dimensions()));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(V.dimension(2)<sp/>!=<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>())</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>merge<sp/>stash<sp/>from<sp/>left<sp/>site<sp/>{}<sp/>into<sp/>{}:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;V<sp/>dimensions<sp/>{}<sp/>|<sp/>M<sp/>dimensions<sp/>{}<sp/>|<sp/><sp/>Expected<sp/>V(2)<sp/>==<sp/>M(1)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>V.dimensions(),<sp/><ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()<sp/>));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dims<sp/>=<sp/>{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/>V.dimension(1),<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>VM(dims);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VM.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>V.contract(<ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1})).shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{0,<sp/>2,<sp/>1,<sp/>3}).reshape(dims);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(VM);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a564e33c05711dc48a48f3e8deb61d30f" kindref="member">V_stash</ref><sp/>=<sp/>std::nullopt;<sp/></highlight><highlight class="comment">//<sp/>Stash<sp/>has<sp/>been<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref><sp/>and<sp/>other.<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref>-&gt;pos_dst<sp/>==<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()){</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right-to-left<sp/>move.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>this<sp/>case<sp/>there<sp/>should<sp/>be<sp/>a<sp/>U<sp/>and<sp/>an<sp/>S<sp/>in<sp/>&quot;other&quot;.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>U<sp/>should<sp/>be<sp/>absorbed<sp/>into<sp/>this<sp/>site<sp/>from<sp/>the<sp/>right.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>S<sp/>becomes<sp/>the<sp/>new<sp/>LC.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1<sp/>--[New<sp/>&quot;M&quot;]--<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>--[this<sp/>&quot;M&quot;]--<sp/>2<sp/><sp/><sp/>1<sp/>--[U]--<sp/>2</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0(dim=1)</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>U<sp/>stash<sp/>from<sp/>site<sp/>{}<sp/>into<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>!=<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Found<sp/>V<sp/>stash<sp/>at<sp/>the<sp/>wrong<sp/>position:<sp/>This<sp/>{}<sp/>|<sp/>Other<sp/>{}<sp/>|<sp/>Stash<sp/>destination<sp/>{}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()<sp/>,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),other.<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref>-&gt;pos_dst));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;U<sp/>=<sp/>other.<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref>-&gt;data;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(U.dimension(0)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>merge<sp/>stash<sp/>from<sp/>right<sp/>site<sp/>{}<sp/>into<sp/>{}:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;U<sp/>has<sp/>invalid<sp/>dimensions<sp/>{}.<sp/>Dim<sp/>at<sp/>idx<sp/>0<sp/>should<sp/>be<sp/>==<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/>U.dimensions()));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(U.dimension(1)<sp/>!=<sp/><ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>())</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>merge<sp/>stash<sp/>from<sp/>right<sp/>site<sp/>{}<sp/>into<sp/>{}:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;M<sp/>dimensions<sp/>{}<sp/>|<sp/>U<sp/>dimensions<sp/>{}<sp/>|<sp/>Expected<sp/>M(2)<sp/>==<sp/>U(1)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>(),<sp/>U.dimensions()));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dims<sp/>=<sp/>{<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>(),<sp/><ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/>U.dimension(2)};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>MU(dims);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MU.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/><ref refid="classclass__mps__site_1aba25177e2ec8f5ebe1bfdfc34b2e2134" kindref="member">get_M_bare</ref>().contract(U,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1})).shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{0,<sp/>2,<sp/>1,<sp/>3}).reshape(dims);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a942b2819382a1b16c0bec06a4b230a74" kindref="member">set_M</ref>(MU);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1a8f615c152df16bad8fa3eb2fa02090a8" kindref="member">U_stash</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref><sp/>and<sp/>other.<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref>-&gt;pos_dst<sp/>==<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()){</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>get<sp/>this<sp/>stash<sp/>when</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>is<sp/>the<sp/>right-most<sp/>last<sp/>A-site<sp/>and<sp/>AC<sp/>is<sp/>further<sp/>to<sp/>the<sp/>right:<sp/>Then<sp/>we<sp/>get<sp/>both<sp/>S<sp/>and<sp/>V<sp/>to<sp/>absorb<sp/>on<sp/>this<sp/>site.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>is<sp/>being<sp/>transformed<sp/>from<sp/>AC<sp/>to<sp/>a<sp/>B-site.<sp/>Then<sp/>the<sp/>old<sp/>LC<sp/>matrix<sp/>is<sp/>inherited<sp/>as<sp/>an<sp/>L<sp/>matrix.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>S<sp/>stash<sp/>from<sp/>site<sp/>{}<sp/>into<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(other.<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref>-&gt;data,<sp/>other.<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref>-&gt;error);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1aa597e9ffe1c6fba561d0b5c435d1c6f4" kindref="member">S_stash</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref><sp/>and<sp/>other.<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref>-&gt;pos_dst<sp/>==<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>()){</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>get<sp/>this<sp/>stash<sp/>when</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>is<sp/>the<sp/>right-most<sp/>last<sp/>A-site<sp/>and<sp/>supposed<sp/>to<sp/>become<sp/>an<sp/>AC:<sp/>Then<sp/>we<sp/>get<sp/>S,<sp/>V<sp/>and<sp/>LC<sp/>to<sp/>absorb<sp/>on<sp/>this<sp/>site.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>is<sp/>being<sp/>transformed<sp/>from<sp/>a<sp/>B<sp/>to<sp/>an<sp/>AC-site.<sp/>Then<sp/>the<sp/>LC<sp/>was<sp/>just<sp/>created<sp/>in<sp/>an<sp/>SVD.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>C<sp/>stash<sp/>from<sp/>site<sp/>{}<sp/>into<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>other.<ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a256db9e943211773e8dd5d0e6cfb3845" kindref="member">label</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Setting<sp/>LC<sp/>at<sp/>pos<sp/>{}<sp/>with<sp/>label<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="classclass__mps__site_1a2f3ebdefc9fb80e5e6e4c971a51c86af" kindref="member">get_position</ref>(),<sp/><ref refid="classclass__mps__site_1af5b2479fd39a7691bc62f0f1ec161e2b" kindref="member">get_label</ref>());</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1a34c35d3cb3b4ff40ab3c3886e621cdf0" kindref="member">set_LC</ref>(other.<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref>-&gt;data,<sp/>other.<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref>-&gt;error);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classclass__mps__site_1ad1bb2412b2005418c0b11820a995a9cf" kindref="member">C_stash</ref><sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="classclass__mps__site_1ac06597ddc35e33af34d2b0820c7711d4" refkind="member"><highlight class="normal">std::size_t<sp/><ref refid="classclass__mps__site_1ac06597ddc35e33af34d2b0820c7711d4" kindref="member">class_mps_site::get_unique_id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref>.value();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/>=<sp/><ref refid="namespacehash_1a7a3bf731a3de0a75358f07f74149cbef" kindref="member">hash::hash_buffer</ref>(<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>().data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1ac7ede498990cefe06828699f21eae72f" kindref="member">get_M</ref>().size()));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref><sp/>=<sp/><ref refid="namespacehash_1a7a3bf731a3de0a75358f07f74149cbef" kindref="member">hash::hash_buffer</ref>(<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classclass__mps__site_1a875fa2cd30d58045deff56efad3c0f21" kindref="member">get_L</ref>().size()),<sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref>.value());</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(isCenter())<sp/>unique_id<sp/>=<sp/>hash::hash_buffer(get_LC().data(),<sp/>static_cast&lt;size_t&gt;(get_LC().size()),<sp/>unique_id.value());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclass__mps__site_1afa86670f5635d5f3af6a723631c7b666" kindref="member">unique_id</ref>.value();</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tensors/state/class_mps_site.cpp"/>
  </compounddef>
</doxygen>
