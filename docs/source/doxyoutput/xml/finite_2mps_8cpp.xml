<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="finite_2mps_8cpp" kind="file" language="C++">
    <compoundname>mps.cpp</compoundname>
    <includes refid="nmspc__tensor__extra_8h" local="no">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__tensor__omp_8h" local="no">general/nmspc_tensor_omp.h</includes>
    <includes refid="config_2enums_8h" local="no">config/enums.h</includes>
    <includes refid="nmspc__settings_8h" local="no">config/nmspc_settings.h</includes>
    <includes refid="nmspc__iter_8h" local="no">general/nmspc_iter.h</includes>
    <includes refid="num_8h" local="no">math/num.h</includes>
    <includes refid="math_2svd_8h" local="no">math/svd.h</includes>
    <includes refid="nmspc__quantum__mechanics_8h" local="no">physics/nmspc_quantum_mechanics.h</includes>
    <includes refid="class__mps__site_8h" local="no">tensors/state/class_mps_site.h</includes>
    <includes refid="class__state__finite_8h" local="no">tensors/state/class_state_finite.h</includes>
    <includes refid="tools_2common_2fmt_8h" local="no">tools/common/fmt.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="prof_8h" local="no">tools/common/prof.h</includes>
    <includes refid="split_8h" local="no">tools/common/split.h</includes>
    <includes refid="finite_2measure_8h" local="no">tools/finite/measure.h</includes>
    <includes refid="finite_2mps_8h" local="no">tools/finite/mps.h</includes>
    <includes refid="ops_8h" local="no">tools/finite/ops.h</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="42">
        <label>measure/state_measure_finite.h</label>
        <link refid="state__measure__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>limits</label>
      </node>
      <node id="15">
        <label>config/nmspc_settings.h</label>
        <link refid="nmspc__settings_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>physics/nmspc_quantum_mechanics.h</label>
        <link refid="nmspc__quantum__mechanics_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>iterator</label>
      </node>
      <node id="43">
        <label>tools/common/fmt.h</label>
        <link refid="tools_2common_2fmt_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>tools/finite/measure.h</label>
        <link refid="finite_2measure_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>general/nmspc_iter.h</label>
        <link refid="nmspc__iter_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="40">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="21">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="26">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="27">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="20">
        <label>math/num.h</label>
        <link refid="num_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp</label>
        <link refid="finite_2mps_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>math/svd.h</label>
        <link refid="math_2svd_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="10">
        <label>general/nmspc_tensor_omp.h</label>
        <link refid="nmspc__tensor__omp_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="37">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="23">
        <label>svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>fmt/core.h</label>
      </node>
      <node id="38">
        <label>physics/class_quantum_gates.h</label>
        <link refid="class__quantum__gates_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="51">
        <label>tools/finite/mps.h</label>
        <link refid="finite_2mps_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>tuple</label>
      </node>
      <node id="47">
        <label>tools/common/split.h</label>
        <link refid="split_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>optional</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="30">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>tools/common/prof.h</label>
        <link refid="prof_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>tools/finite/ops.h</label>
        <link refid="ops_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>utility</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="35">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="48">
        <label>deque</label>
      </node>
      <node id="46">
        <label>chrono</label>
      </node>
      <node id="32">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="3">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>general/class_tic_toc.h</label>
        <link refid="class__tic__toc_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="52">
        <label>set</label>
      </node>
      <node id="39">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="41">
        <label>tensors/state/class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="12">
        <label>config/enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="finite_2mps_8cpp_1a801782eba5f59388b5c33e5c701d4518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; generate_pos_sequence</definition>
        <argsstring>(const class_state_finite &amp;state, const std::vector&lt; qm::Gate &gt; &amp;gates, bool reverse)</argsstring>
        <name>generate_pos_sequence</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classqm_1_1_gate" kindref="compound">qm::Gate</ref> &gt; &amp;</type>
          <declname>gates</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp" line="393" column="13" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp" bodystart="393" bodyend="449"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-01-29.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__tensor__omp_8h" kindref="compound">general/nmspc_tensor_omp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--<sp/>(textra<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="config_2enums_8h" kindref="compound">config/enums.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__settings_8h" kindref="compound">config/nmspc_settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__iter_8h" kindref="compound">general/nmspc_iter.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="num_8h" kindref="compound">math/num.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_2svd_8h" kindref="compound">math/svd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__quantum__mechanics_8h" kindref="compound">physics/nmspc_quantum_mechanics.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mps__site_8h" kindref="compound">tensors/state/class_mps_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__finite_8h" kindref="compound">tensors/state/class_state_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_2common_2fmt_8h" kindref="compound">tools/common/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prof_8h" kindref="compound">tools/common/prof.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="split_8h" kindref="compound">tools/common/split.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2measure_8h" kindref="compound">tools/finite/measure.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2mps_8h" kindref="compound">tools/finite/mps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ops_8h" kindref="compound">tools/finite/ops.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespacetools_1_1finite_1_1mps_1_1internal_1a42804b49b87137f0af43ed018f3451ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1a42804b49b87137f0af43ed018f3451ef" kindref="member">tools::finite::mps::internal::bitfield_is_valid</ref>(std::optional&lt;long&gt;<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>.has_value()<sp/>and<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>.value()<sp/>&gt;<sp/>0<sp/>and<sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1a4bd0ce093b44664ce262c0cedc0bdff5" kindref="member">internal::used_bitfields</ref>.count(<ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>.value())<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">tools::finite::mps::move_center_point_single_site</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a6593cb01ff689f39b38b0e5e40eae44f" kindref="member">position_is_outward_edge</ref>())<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>-1<sp/>and<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(0l).<ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>()<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;chiL<sp/>at<sp/>position<sp/>0<sp/>must<sp/>have<sp/>dimension<sp/>1,<sp/>but<sp/>it<sp/>has<sp/>dimension<sp/>{}.<sp/>Mps<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(0l).<ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(0l).<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1<sp/>and<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>().<ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>()<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;chiR<sp/>at<sp/>position<sp/>{}<sp/>must<sp/>have<sp/>dimension<sp/>1,<sp/>but<sp/>it<sp/>has<sp/>dimension<sp/>{}.<sp/>Mps<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>(),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>().<ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>(),<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>().<ref refid="classclass__mps__site_1a5790fc1572b4b61301764f1c9eea9a02" kindref="member">dimensions</ref>()));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">flip_direction</ref>();<sp/></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>moving<sp/>out<sp/>of<sp/>the<sp/>chain,<sp/>just<sp/>flip<sp/>the<sp/>direction<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>moves<sp/>this<sp/>time,<sp/>return<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>all<sp/>sites<sp/>are<sp/>B&apos;s,<sp/>then<sp/>this<sp/>is<sp/>-1.<sp/>Otherwise<sp/>this<sp/>is<sp/>the<sp/>current<sp/>&quot;A*LC&quot;<sp/>site</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>posC<sp/>=<sp/>pos<sp/>+<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>();<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>site<sp/>which<sp/>becomes<sp/>the<sp/>new<sp/>center<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>-1<sp/>or<sp/>pos<sp/>&gt;=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;pos<sp/>out<sp/>of<sp/>bounds:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(posC<sp/>&lt;<sp/>-1<sp/>or<sp/>posC<sp/>&gt;=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;posC<sp/>out<sp/>of<sp/>bounds:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>posC));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>!=<sp/>posC<sp/>-<sp/>pos)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Expected<sp/>posC<sp/>-<sp/>pos<sp/>==<sp/>{}.<sp/>Got<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>(),<sp/>posC<sp/>-<sp/>pos));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a55cf637927322e433a52a41cf9adc177" kindref="member">settings::debug_moves</ref>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(posC<sp/>&gt;<sp/>pos)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Moving<sp/>{}<sp/>-&gt;<sp/>{}&quot;</highlight><highlight class="normal">,pos,posC);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a55cf637927322e433a52a41cf9adc177" kindref="member">settings::debug_moves</ref>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(posC<sp/>&lt;<sp/>pos)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Moving<sp/>{}<sp/>&lt;-<sp/>{}&quot;</highlight><highlight class="normal">,posC,pos);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>LC(1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LC.setConstant(1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>LC<sp/>bond<sp/>in<sp/>a<sp/>temporary.<sp/>It<sp/>will<sp/>become<sp/>a<sp/>regular<sp/>&quot;L&quot;<sp/>bond<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>0)<sp/>LC<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a794ee9101351e20449072a528144d5d2" kindref="member">get_LC</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>posC_ul<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(posC);<sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>to<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpsC<sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(posC);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>becomes<sp/>the<sp/>new<sp/>center<sp/>position<sp/>AC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>chi_new<sp/>=<sp/>std::min(chi_lim,<sp/>mpsC.spin_dim()<sp/>*<sp/>std::min(mpsC.get_chiL(),<sp/>mpsC.get_chiR()));<sp/></highlight><highlight class="comment">//<sp/>Bond<sp/>dimensions<sp/>growth<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>single-site<sp/>tensor.<sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>state.get_multisite_mps(...)<sp/>but<sp/>avoid<sp/>normalization<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>onesite_tensor(mpsC.dimensions());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>for<sp/>contraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onesite_tensor.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(LC).contract(mpsC.get_M(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({1},<sp/>{1})).shuffle(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{1,<sp/>0,<sp/>2});</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(state,<sp/>onesite_tensor,<sp/>{posC_ul},<sp/>posC,<sp/>chi_new,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_ul<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos);<sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>to<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>becomes<sp/>the<sp/>new<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>chi_new<sp/>=<sp/>std::min(chi_lim,mps.spin_dim()<sp/>*<sp/>std::min(mps.get_chiL(),<sp/>mps.get_chiR()));<sp/></highlight><highlight class="comment">//<sp/>Bond<sp/>dimensions<sp/>growth<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>onesite_tensor<sp/>=<sp/>mps.get_M();<sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>contract<sp/>anything<sp/>this<sp/>time.<sp/>Note<sp/>that<sp/>we<sp/>must<sp/>take<sp/>a<sp/>copy!<sp/>Not<sp/>a<sp/>reference<sp/>(MC<sp/>is<sp/>unset<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(state,<sp/>onesite_tensor,<sp/>{pos_ul},<sp/>posC,<sp/>chi_new,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">clear_measurements</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Moved<sp/>once,<sp/>so<sp/>return<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="namespacetools_1_1finite_1_1mps_1a7f9adc22e95ea54d4f26189c22f28273" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a7f9adc22e95ea54d4f26189c22f28273" kindref="member">tools::finite::mps::move_center_point</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a6593cb01ff689f39b38b0e5e40eae44f" kindref="member">position_is_outward_edge</ref>(2))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">flip_direction</ref>();<sp/></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>moving<sp/>out<sp/>of<sp/>the<sp/>chain,<sp/>just<sp/>flip<sp/>the<sp/>direction<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>moves<sp/>this<sp/>time,<sp/>return<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>-1<sp/>or<sp/>pos<sp/>&gt;=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;pos<sp/>out<sp/>of<sp/>bounds:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>posL<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1<sp/>?<sp/>pos<sp/>+<sp/>1<sp/>:<sp/>pos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>posR<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1<sp/>?<sp/>pos<sp/>+<sp/>2<sp/>:<sp/>pos;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpsL<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(posL);<sp/></highlight><highlight class="comment">//<sp/>Becomes<sp/>the<sp/>new<sp/>center<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mpsR<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(posR);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>site<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>new<sp/>center<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>dL<sp/><sp/><sp/>=<sp/>mpsL.<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>dR<sp/><sp/><sp/>=<sp/>mpsR.spin_dim();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>chiL<sp/>=<sp/>mpsL.get_chiL();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>chiR<sp/>=<sp/>mpsR.get_chiR();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>special<sp/>LC<sp/>bond<sp/>in<sp/>a<sp/>temporary.<sp/>It<sp/>needs<sp/>to<sp/>be<sp/>put<sp/>back<sp/>afterwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>with<sp/>its<sp/>truncation<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>1&gt;<sp/>LC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mps.get_LC();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truncation_error_LC<sp/>=<sp/>mps.get_truncation_error_LC();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>twosite_tensor(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{dL<sp/>*<sp/>dR,<sp/>chiL,<sp/>chiR});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>both<sp/>M_bare<sp/>are<sp/>B&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>mpsL.get_M()<sp/>=<sp/>GB<sp/>*<sp/>LB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/><sp/>mpsR.get_M()<sp/>=<sp/>GB<sp/>*<sp/>GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>have<sp/>to<sp/>attach<sp/>LC<sp/>from<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twosite_tensor.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/><ref refid="namespace_textra_1a9985d656f87652d2d09c81c517be2e07" kindref="member">Textra::asDiagonal</ref>(LC)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(mpsL.get_M(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({1},<sp/>{1}))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contract(mpsR.get_M(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1}))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{1,<sp/>2,<sp/>0,<sp/>3})</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reshape(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{dL<sp/>*<sp/>dR,<sp/>chiL,<sp/>chiR});</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>both<sp/>M_bare<sp/>are<sp/>A&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>A<sp/>should<sp/>be<sp/>the<sp/>previous<sp/>position,<sp/>so<sp/>it<sp/>has<sp/>an<sp/>attached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LC<sp/>if<sp/>we<sp/>ask<sp/>for<sp/>get_M(),<sp/>i.e.<sp/>mpsR.get_M()<sp/>=<sp/>LA<sp/>*<sp/>GA<sp/>*<sp/>LC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/>A<sp/>should<sp/>be<sp/>a<sp/>simple<sp/>A,<sp/>i.e.<sp/>mpsL.get_M()<sp/>=<sp/>LA<sp/>*<sp/>GA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twosite_tensor.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpsL.get_M().contract(mpsR.get_M(),<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({2},<sp/>{1})).shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{0,<sp/>2,<sp/>1,<sp/>3}).reshape(<ref refid="namespace_textra_1abf5e9be455f15ce199b2240678183aaa" kindref="member">Textra::array3</ref>{dL<sp/>*<sp/>dR,<sp/>chiL,<sp/>chiR});</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(state,<sp/>twosite_tensor,<sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(posL),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(posR)},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(posL),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi_lim,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">clear_measurements</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>LC<sp/>where<sp/>it<sp/>belongs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recall<sp/>that<sp/>mpsL,<sp/>mpsR<sp/>are<sp/>on<sp/>the<sp/>new<sp/>position,<sp/>not<sp/>the<sp/>old<sp/>one!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpsL.set_L(LC,<sp/>truncation_error_LC);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpsR.set_L(LC,<sp/>truncation_error_LC);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Moved<sp/>once,<sp/>so<sp/>return<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="namespacetools_1_1finite_1_1mps_1a5c903eb0d383884b5ad27c13f24daebb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a5c903eb0d383884b5ad27c13f24daebb" kindref="member">tools::finite::mps::move_center_point_to_pos</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&lt;<sp/>0<sp/>and<sp/>pos<sp/>&gt;<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;())<sp/>or<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&gt;<sp/>0<sp/>and<sp/>pos<sp/>&lt;<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;()))<sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">flip_direction</ref>();<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>direction<sp/>towards<sp/>new<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>moves<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">position_is_at</ref>(pos))<sp/>moves<sp/>+=<sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">move_center_point_single_site</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moves;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="namespacetools_1_1finite_1_1mps_1a374a8527db19308d93afb0a628c13f3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a374a8527db19308d93afb0a628c13f3d" kindref="member">tools::finite::mps::move_center_point_to_pos_dir</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&lt;<sp/>0<sp/>and<sp/>pos<sp/>&gt;<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;())<sp/>or<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&gt;<sp/>0<sp/>and<sp/>pos<sp/>&lt;<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;()))<sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1afbd69eb73c65d1e5558e131e2636c897" kindref="member">flip_direction</ref>();<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>direction<sp/>towards<sp/>new<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>moves<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">position_is_at</ref>(pos,dir))<sp/>moves<sp/>+=<sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">move_center_point_single_site</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moves;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="namespacetools_1_1finite_1_1mps_1a6e3a5788cb7570f87115dd6dbe38f4f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a6e3a5788cb7570f87115dd6dbe38f4f8" kindref="member">tools::finite::mps::move_center_point_to_edge</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>moves<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1ae534d298a65fde25c043aedf9b009392" kindref="member">position_is_inward_edge</ref>())<sp/>moves<sp/>+=<sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">move_center_point_single_site</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moves;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="namespacetools_1_1finite_1_1mps_1aefc25d45f7fd3b832a0477675b16956d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1aefc25d45f7fd3b832a0477675b16956d" kindref="member">tools::finite::mps::move_center_point_to_middle</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>moves<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>state.<ref refid="classclass__state__finite_1a102a0f8961c46707afd775706066f2ed" kindref="member">position_is_the_middle_any_direction</ref>())<sp/>moves<sp/>+=<sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">move_center_point_single_site</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moves;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>&amp;multisite_mps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;positions,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>center_position,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings,<sp/>std::optional&lt;LogPolicy&gt;<sp/>logPolicy)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_position<sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>moves<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::abs(center_position<sp/>-<sp/>current_position));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logPolicy<sp/>==<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1e23852820b9154316c7c06e2b7ba051" kindref="member">LogPolicy::NORMAL</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>multisite<sp/>tensor<sp/>for<sp/>sites<sp/>{}<sp/>|<sp/>chi<sp/>limit<sp/>{}<sp/>|<sp/>dimensions<sp/>{}<sp/>|<sp/>center<sp/>{}<sp/>-&gt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>positions,<sp/>chi_lim,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multisite_mps.dimensions(),<sp/>current_position,<sp/>center_position);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multisite_mps.dimension(1)<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(positions.front()).<ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>())</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>merge<sp/>multisite<sp/>mps<sp/>into<sp/>state:<sp/>mps<sp/>dim1<sp/>{}<sp/>!=<sp/>chiL<sp/>on<sp/>left-most<sp/>site<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>multisite_mps.dimension(1),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(positions.front()).<ref refid="classclass__mps__site_1af931bb3586531cda4240f9d4c1356538" kindref="member">get_chiL</ref>(),<sp/>positions.front()));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(multisite_mps.dimension(2)<sp/>!=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(positions.back()).<ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>merge<sp/>multisite<sp/>mps<sp/>into<sp/>state:<sp/>mps<sp/>dim2<sp/>{}<sp/>!=<sp/>chiR<sp/>on<sp/>right-most<sp/>site<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>multisite_mps.dimension(2),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(positions.back()).<ref refid="classclass__mps__site_1ae6b9f71bc7268ba5a078e924c850e158" kindref="member">get_chiR</ref>(),<sp/>positions.back()));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a31b0404902b6f355ed53c06201f79e81" kindref="member">settings::debug_merge</ref>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>allow<sp/>non-normalized<sp/>multisite<sp/>mps!<sp/>Otherwise<sp/>we<sp/>won&apos;t<sp/>be<sp/>able<sp/>to<sp/>make<sp/>them<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespace_textra_1ae1f575ce11586f1ebc16c1b3206a318e" kindref="member">Textra::VectorCast</ref>(multisite_mps).norm();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/>1e-8)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Multisite<sp/>mps<sp/>for<sp/>positions<sp/>{}<sp/>has<sp/>norm<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/>positions,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>merge<sp/>sites<sp/>too<sp/>far<sp/>away:<sp/>we<sp/>would<sp/>end<sp/>up<sp/>with<sp/>interleaved<sp/>A&apos;s<sp/>and<sp/>B<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_position<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(positions.front())<sp/>-<sp/>1<sp/>or</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_position<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(positions.back())<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>merge<sp/>sites<sp/>{}<sp/>too<sp/>far<sp/>from<sp/>the<sp/>current<sp/>position<sp/>{}&quot;</highlight><highlight class="normal">,positions,<sp/>current_position));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_prod<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/>spin_dims;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_dims.reserve(positions.size());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pos<sp/>:<sp/>positions)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_dims.emplace_back(state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a02a4608abd877ea022e8a930b6afd112" kindref="member">spin_dim</ref>());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_prod<sp/>*=<sp/>spin_dims.back();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spin_prod<sp/>!=<sp/>multisite_mps.dimension(0))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>merge<sp/>multisite<sp/>mps<sp/>into<sp/>state:<sp/>multisite_mps<sp/>dim0<sp/>{}<sp/>!=<sp/>spin_prod<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>multisite_mps.dimension(0),<sp/>spin_prod));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hold<sp/>LC<sp/>if<sp/>moving.<sp/>This<sp/>should<sp/>be<sp/>placed<sp/>in<sp/>an<sp/>L-slot<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;stash&lt;Eigen::Tensor&lt;Scalar,1&gt;&gt;&gt;<sp/>lc_hold<sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_position<sp/>&gt;=<sp/>0<sp/>and<sp/>current_position<sp/>!=<sp/>center_position){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mps<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(current_position);<sp/></highlight><highlight class="comment">//<sp/>Guaranteed<sp/>to<sp/>have<sp/>LC<sp/>since<sp/>that<sp/>is<sp/>the<sp/>definition<sp/>of<sp/>current_position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_back<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(positions.back());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_frnt<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(positions.front());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_curr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_position);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>right-move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_position<sp/>&lt;<sp/>center_position<sp/>and<sp/>positions.size()<sp/>==<sp/>1){<sp/></highlight><highlight class="comment">//<sp/>This<sp/>AC<sp/>will<sp/>become<sp/>an<sp/>A<sp/>(AC<sp/>moves<sp/>to<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(center_position<sp/>&lt;<sp/>pos_frnt<sp/>or<sp/>center_position<sp/>&gt;<sp/>pos_back)<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>jump<sp/>isn&apos;t<sp/>too<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>right-move<sp/>from<sp/>position<sp/>{}<sp/>into<sp/>a<sp/>center<sp/>position<sp/>{}<sp/>that<sp/>is<sp/>not<sp/>in<sp/>positions<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>current_position,<sp/>center_position,<sp/>positions));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc_hold<sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{mps.get_LC(),<sp/>mps.get_truncation_error_LC(),<sp/>positions.front()};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>left-move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_position<sp/>&gt;<sp/>center_position<sp/>and<sp/>positions.size()<sp/>==<sp/>1){<sp/></highlight><highlight class="comment">//<sp/>This<sp/>AC<sp/>position<sp/>will<sp/>become<sp/>a<sp/>B<sp/>(AC<sp/>moves<sp/>to<sp/>the<sp/>left)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(center_position<sp/>&lt;<sp/>pos_frnt<sp/>-<sp/>1<sp/>or<sp/>current_position<sp/>&gt;<sp/>pos_back<sp/>+<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>jump<sp/>isn&apos;t<sp/>too<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>right-move<sp/>from<sp/>position<sp/>{}<sp/>to<sp/>a<sp/>center<sp/>position<sp/>{}<sp/>in<sp/>a<sp/>non-neighboring<sp/>group<sp/>of<sp/>positions<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>current_position,<sp/>center_position,<sp/>positions));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc_hold<sp/>=<sp/><ref refid="classstash" kindref="compound">stash&lt;Eigen::Tensor&lt;Scalar,1&gt;</ref>&gt;{mps.get_LC(),<sp/>mps.get_truncation_error_LC(),<sp/>pos_curr};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>one<sp/>of<sp/>the<sp/>positions<sp/>on<sp/>the<sp/>split<sp/>may<sp/>contain<sp/>a<sp/>new<sp/>center,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>unset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>center<sp/>in<sp/>our<sp/>current<sp/>state<sp/>so<sp/>we<sp/>don&apos;t<sp/>get<sp/>duplicate<sp/>centers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mps.unset_LC();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(svd_settings)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Splitting<sp/>multisite_mps<sp/>sites<sp/>{}<sp/>|<sp/>{}&quot;</highlight><highlight class="normal">,positions,<sp/>svd_settings-&gt;to_string());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Split<sp/>the<sp/>multisite<sp/>mps<sp/>into<sp/>single-site<sp/>mps<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_merge_split<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_split&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mps_list<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1split_1aaeb82c8632b58196774224be23586b76" kindref="member">tools::common::split::split_mps</ref>(multisite_mps,<sp/>spin_dims,<sp/>positions,<sp/>center_position,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>t_merge_split.toc();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(positions.size()<sp/>!=<sp/>mps_list.size())</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>merge<sp/>multisite<sp/>mps<sp/>into<sp/>state:<sp/>number<sp/>of<sp/>sites<sp/>mismatch:<sp/>positions.size()<sp/>{}<sp/>!=<sp/>mps_list.size()<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positions.size(),<sp/>mps_list.size()));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>multisite<sp/>mergers<sp/>the<sp/>LC<sp/>is<sp/>already<sp/>where<sp/>we<sp/>expect<sp/>it<sp/>to<sp/>be<sp/>(i.e.<sp/>on<sp/>the<sp/>right-most<sp/>&quot;A&quot;<sp/>matrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>split<sp/>up<sp/>mps<sp/>components<sp/>into<sp/>the<sp/>current<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_src<sp/>:<sp/>mps_list)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_merge_merge<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_merge&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/>=<sp/>mps_src.get_position();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps_tgt<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inject<sp/>lc_hold<sp/>if<sp/>there<sp/>is<sp/>any<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lc_hold<sp/>and<sp/>pos<sp/>==<sp/>lc_hold-&gt;pos_dst){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mps_src.<ref refid="classclass__mps__site_1a0b4597c113303a2d052c919bd854edba" kindref="member">set_L</ref>(lc_hold-&gt;data,<sp/>lc_hold-&gt;error);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mps_tgt.merge_mps(mps_src);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeff06c13bbd5f3a8dd6c5c0d1c85a6f5" kindref="member">tag_site_normalized</ref>(pos,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>site<sp/>is<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>merge<sp/>stashes<sp/>for<sp/>neighboring<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&lt;<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()-1)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos<sp/>+<sp/>1).<ref refid="classclass__mps__site_1a0e10987a03dcebdb4b49ad7688de1ce6" kindref="member">merge_stash</ref>(mps_src);<sp/></highlight><highlight class="comment">//<sp/>Absorb<sp/>stashed<sp/>S,V<sp/>(and<sp/>possibly<sp/>LC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos<sp/>-<sp/>1).<ref refid="classclass__mps__site_1a0e10987a03dcebdb4b49ad7688de1ce6" kindref="member">merge_stash</ref>(mps_src);<sp/></highlight><highlight class="comment">//<sp/>Absorb<sp/>stashed<sp/>U,S<sp/>(and<sp/>possibly<sp/>LC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mps_src.drop_stash();<sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>whatever<sp/>is<sp/>left<sp/>stashed<sp/>at<sp/>the<sp/>edge<sp/>(this<sp/>normalizes<sp/>the<sp/>state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>current_position<sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_position<sp/>!=<sp/>center_position)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Center<sp/>position<sp/>mismatch<sp/>{}<sp/>!<sp/>{}\nLabels:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>current_position,<sp/>center_position,<sp/>state.<ref refid="classclass__state__finite_1a01d3c323d97905e8f2b3da7c6289e408" kindref="member">get_labels</ref>()));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">clear_measurements</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>pos<sp/>:<sp/>positions)<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos).<ref refid="classclass__mps__site_1a0d9bd5bc4251ebb74b3357632ff999a9" kindref="member">assert_identity</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moves;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="namespacetools_1_1finite_1_1mps_1ab5b54869af2185769214e085ed56b8c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1ab5b54869af2185769214e085ed56b8c7" kindref="member">tools::finite::mps::normalize_state</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a299b68d9f1bb1395a4cba7781fe37da7" kindref="member">NormPolicy</ref><sp/>norm_policy)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>state<sp/>needs<sp/>to<sp/>be<sp/>normalized<sp/>it&apos;s<sp/>enough<sp/>to<sp/>&quot;move&quot;<sp/>the<sp/>center<sp/>position<sp/>around<sp/>the<sp/>whole<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>move<sp/>performs<sp/>an<sp/>SVD<sp/>decomposition<sp/>which<sp/>leaves<sp/>unitaries<sp/>behind,<sp/>effectively<sp/>normalizing<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE!<sp/>It<sp/>IS<sp/>important<sp/>to<sp/>start<sp/>with<sp/>the<sp/>current<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(norm_policy<sp/>==<sp/><ref refid="config_2enums_8h_1a299b68d9f1bb1395a4cba7781fe37da7a0bfbb30a74b8eb52b34fd39165b6f433" kindref="member">NormPolicy::IFNEEDED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>may<sp/>only<sp/>go<sp/>ahead<sp/>with<sp/>a<sp/>normalization<sp/>if<sp/>its<sp/>really<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">tools::finite::measure::norm</ref>(state);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Norm:<sp/>{:.16f}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>-<sp/>1.0)<sp/>&lt;<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>just<sp/>do<sp/>the<sp/>normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>current<sp/>position,<sp/>direction<sp/>and<sp/>center<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cnt<sp/><sp/><sp/>=<sp/>pos<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>steps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;<ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">trace</ref>(</highlight><highlight class="stringliteral">&quot;Normalizing<sp/>state<sp/>|<sp/>Old<sp/>norm<sp/>=<sp/>{:.16f}<sp/>|<sp/>pos<sp/>{}<sp/>|<sp/>dir<sp/>{}<sp/>|<sp/>chi_lim<sp/>{}<sp/>|<sp/>bond<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">tools::finite::measure::norm</ref>(state),<sp/>pos,<sp/>dir,<sp/>chi_lim,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(state));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>SVD<sp/>at<sp/>the<sp/>current<sp/>center<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>You<sp/>have<sp/>thought<sp/>that<sp/>this<sp/>is<sp/>unnecessary<sp/>and<sp/>removed<sp/>it,<sp/>only<sp/>to<sp/>find<sp/>bugs<sp/>much<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>particular,<sp/>the<sp/>bond<sp/>dimension<sp/>will<sp/>shrink<sp/>too<sp/>much<sp/>when<sp/>doing<sp/>projections,<sp/>if<sp/>this<sp/>step<sp/>is<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>makes<sp/>sure<sp/>chiL<sp/>and<sp/>chiR<sp/>differ<sp/>at<sp/>most<sp/>by<sp/>factor<sp/>spin_dim<sp/>when<sp/>we<sp/>start<sp/>the<sp/>normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mps<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(pos);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>bond<sp/>dimension<sp/>does<sp/>not<sp/>increase<sp/>faster<sp/>than<sp/>spin_dim<sp/>per<sp/>site</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_new<sp/>=<sp/>std::min(chi_lim,<sp/>mps.spin_dim()<sp/>*<sp/>std::min(mps.get_chiL(),<sp/>mps.get_chiR()));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(state,<sp/>mps.get_M()<sp/>,<sp/>{static_cast&lt;size_t&gt;(pos)},<sp/>pos,<sp/>chi_new,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">settings::debug</ref>)<sp/>mps.assert_identity();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>can<sp/>move<sp/>around<sp/>the<sp/>chain<sp/>until<sp/>we<sp/>return<sp/>to<sp/>the<sp/>original<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(steps++<sp/>&lt;<sp/>2<sp/>or<sp/>not<sp/>state.<ref refid="classclass__state__finite_1a5d89d9fafa2a58042fbee537b527f022" kindref="member">position_is_at</ref>(pos,<sp/>dir,<sp/>cnt))<sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0656cb0d191547be54da18c5559149e2" kindref="member">move_center_point_single_site</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">clear_measurements</ref>();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">tools::finite::measure::norm</ref>(state);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Normalized<sp/><sp/>state<sp/>|<sp/>New<sp/>norm<sp/>=<sp/>{:.16f}<sp/>|<sp/>pos<sp/>{}<sp/>|<sp/>dir<sp/>{}<sp/>|<sp/>chi_lim<sp/>{}<sp/>|<sp/>bond<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>,<sp/>pos,<sp/>dir,<sp/>chi_lim,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(state));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref><sp/>-<sp/>1)<sp/>&gt;<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mps<sp/>:<sp/>state.<ref refid="classclass__state__finite_1a79ddc64014b1469e44229868cc3198f4" kindref="member">mps_sites</ref>)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;L<sp/>({})<sp/>|<sp/>norm<sp/>{:.16f}<sp/>\n<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mps-&gt;get_position(),<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(mps-&gt;get_L()).norm(),<sp/>mps-&gt;get_L());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mps-&gt;isCenter())</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;LC({})<sp/>|<sp/>norm<sp/>{:.16f}<sp/>\n<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mps-&gt;get_position(),<sp/><ref refid="namespace_textra_1a26506f91acdea6c85029ceb686d795ed" kindref="member">Textra::VectorMap</ref>(mps-&gt;get_LC()).norm(),<sp/>mps-&gt;get_LC());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mps-&gt;assert_identity();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Norm<sp/>too<sp/>far<sp/>from<sp/>unity:<sp/>{:.16f}<sp/>|<sp/>max<sp/>allowed<sp/>norm<sp/>error<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a5dedbb3ba59f53f43b2df35faa0d6a4a" kindref="member">norm</ref>,<sp/><ref refid="namespacesettings_1_1precision_1af6b8f17a6552f984d79f29b60e7ce873" kindref="member">settings::precision::max_norm_error</ref>));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a7f2fa97dc037b0b817b51e7aa9e38460" kindref="member">assert_validity</ref>();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="namespacetools_1_1finite_1_1mps_1a0ff595577ea92889914d7ea5cd3ee06b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a0ff595577ea92889914d7ea5cd3ee06b" kindref="member">tools::finite::mps::randomize_state</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976" kindref="member">StateInit</ref><sp/><ref refid="namespacedense__lu_1a81b7e79a51f02dfe238302d2fc2a92dc" kindref="member">init</ref>,<sp/><ref refid="config_2enums_8h_1ab9aca94621ab32fee58ebbbd4dbdcc0b" kindref="member">StateInitType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;sector,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesettings_1_1strategy_1a59f890d5cd99ba257fac12c9ebe361bb" kindref="member">use_eigenspinors</ref>,<sp/>std::optional&lt;long&gt;<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="namespacedense__lu_1a81b7e79a51f02dfe238302d2fc2a92dc" kindref="member">init</ref>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976ada558fa3a936deb907bff1a4a8591861" kindref="member">StateInit::RANDOM_PRODUCT_STATE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1af12a3d0ac1d79c7c2a8be7f42d894b7e" kindref="member">internal::random_product_state</ref>(state,<sp/>type,<sp/>sector,<sp/><ref refid="namespacesettings_1_1strategy_1a59f890d5cd99ba257fac12c9ebe361bb" kindref="member">use_eigenspinors</ref>,<sp/><ref refid="namespacesettings_1_1input_1ac26e006d28280b3712305f9e7c39824d" kindref="member">bitfield</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976ad6b9a721fd1f0d8987b0544a10b3828d" kindref="member">StateInit::RANDOM_ENTANGLED_STATE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1a1fec7c225b2ed71c1c7bf3e446930e03" kindref="member">internal::random_entangled_state</ref>(state,<sp/>type,<sp/>sector,<sp/>chi_lim,<sp/><ref refid="namespacesettings_1_1strategy_1a59f890d5cd99ba257fac12c9ebe361bb" kindref="member">use_eigenspinors</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976ab41377597a6f78d88d48f1a54edad189" kindref="member">StateInit::RANDOMIZE_PREVIOUS_STATE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1aac0556268b3668156704d4dc5f5844da" kindref="member">internal::randomize_given_state</ref>(state,<sp/>type);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976a3a5bdb71bf8f4f6b69ee7c0b6bacf638" kindref="member">StateInit::PRODUCT_STATE_ALIGNED</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1a2b3f463e6a426caa6facbefbe1449584" kindref="member">internal::set_product_state_aligned</ref>(state,<sp/>type,<sp/>sector);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1adbe3cea8d0d506925fa70531119e2976a63763a53951e91b23639ba990f1ca6e8" kindref="member">StateInit::PRODUCT_STATE_NEEL</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1a873e64e232eac47302dd4e99429a0c6a" kindref="member">internal::set_product_state_neel</ref>(state,<sp/>type,<sp/>sector);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="namespacetools_1_1finite_1_1mps_1a19e5889ea7a673129e943686488bd492" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a19e5889ea7a673129e943686488bd492" kindref="member">tools::finite::mps::apply_random_paulis</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Matrix2cd&gt;<sp/>&amp;paulimatrices)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[mpos,<sp/>L,<sp/>R]<sp/>=<sp/><ref refid="namespaceqm_1_1mpo_1a1cd78f42cac8af8ad395523a0cb5fef8" kindref="member">qm::mpo::sum_of_pauli_mpo</ref>(paulimatrices,<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>(),<sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5a2d5127b8139f1f5f1086c4053324733a" kindref="member">RandomizerMode::SELECT1</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1ops_1a3d61c6cd52ef1a54ea5c1a0a5e950ecf" kindref="member">tools::finite::ops::apply_mpos</ref>(state,<sp/>mpos,<sp/>L,<sp/>R);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="namespacetools_1_1finite_1_1mps_1a2608dab7b129b75b58b355a71589a6a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a19e5889ea7a673129e943686488bd492" kindref="member">tools::finite::mps::apply_random_paulis</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;paulistrings)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Matrix2cd&gt;<sp/>paulimatrices;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;str<sp/>:<sp/>paulistrings)<sp/>paulimatrices.emplace_back(<ref refid="namespacetools_1_1finite_1_1mps_1_1internal_1aa1d56c23e5edb26a4066913db22dde4e" kindref="member">internal::get_pauli</ref>(str));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a19e5889ea7a673129e943686488bd492" kindref="member">apply_random_paulis</ref>(state,<sp/>paulimatrices);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="namespacetools_1_1finite_1_1mps_1ac4e0069b3b431db82d106381d128d954" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1ac4e0069b3b431db82d106381d128d954" kindref="member">tools::finite::mps::truncate_all_sites</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Truncating<sp/>all<sp/>sites<sp/>to<sp/>bond<sp/>dimension<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>chi_lim);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>original_position<sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>original_direction<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>truncating<sp/>at<sp/>the<sp/>current<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a7f9adc22e95ea54d4f26189c22f28273" kindref="member">move_center_point</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>()<sp/>==<sp/>original_position<sp/>and<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>==<sp/>original_direction)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>all<sp/>bond<sp/>dimensions<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>below<sp/>chi_lim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref><sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(state);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::all_of(<ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.begin(),<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">bond_dimensions</ref>.end(),<sp/>[chi_lim](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;chi)<sp/>{<sp/>return<sp/>chi<sp/>&lt;=<sp/>chi_lim;<sp/>}))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1aeeb103dfd67addd01bb819bb4a4afdbc" kindref="member">clear_measurements</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Truncated<sp/>all<sp/>sites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;MUST<sp/>REBUILD<sp/>EDGES<sp/>AFTER<sp/>TRUNCATING<sp/>ALL<sp/>SITES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1af44f147b7b5cc0a9b1bbf0e721dcd184" kindref="member">tools::finite::mps::truncate_active_sites</ref>([[maybe_unused]]<sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Truncate<sp/>active<sp/>sites<sp/>needs<sp/>an<sp/>implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Truncate<sp/>active<sp/>sites<sp/>needs<sp/>an<sp/>implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1af75908c3d119e292a035d156f50d1463" kindref="member">tools::finite::mps::truncate_next_sites</ref>([[maybe_unused]]<sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_sites,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Truncate<sp/>next<sp/>sites<sp/>needs<sp/>an<sp/>implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Truncate<sp/>next<sp/>sites<sp/>needs<sp/>an<sp/>implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="namespacetools_1_1finite_1_1mps_1a46225bad12a812f2f390fd1d092fa5fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a46225bad12a812f2f390fd1d092fa5fb" kindref="member">tools::finite::mps::apply_gates</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>&amp;nsite_tensors,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>gate_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>the<sp/>two-site<sp/>operators<sp/>into<sp/>a<sp/>vector<sp/>of<sp/>qm::Gates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;qm::Gate&gt;<sp/>gates;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>gates.reserve(nsite_tensors.size());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/>op]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(nsite_tensors)){</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>num::range&lt;size_t&gt;(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>+<sp/>gate_size,<sp/>1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>std::vector&lt;long&gt;(pos.size(),2);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gates.emplace_back(<ref refid="classqm_1_1_gate" kindref="compound">qm::Gate</ref>(nsite_tensors[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>],<sp/>pos,<sp/>dim));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a46225bad12a812f2f390fd1d092fa5fb" kindref="member">apply_gates</ref>(state,<sp/>gates,<sp/>reverse,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="finite_2mps_8cpp_1a801782eba5f59388b5c33e5c701d4518" refkind="member"><highlight class="normal">std::vector&lt;size_t&gt;<sp/><ref refid="finite_2mps_8cpp_1a801782eba5f59388b5c33e5c701d4518" kindref="member">generate_pos_sequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;qm::Gate&gt;<sp/>&amp;gates,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse){</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>list<sp/>of<sp/>staggered<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>2-site<sp/>gates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Apply<sp/>gates<sp/>on<sp/>[0-1],[2-3]...<sp/>and<sp/>then<sp/>[1-2],[3-4]...,<sp/>i.e.<sp/>even<sp/>sites<sp/>first,<sp/>then<sp/>odd<sp/>sites,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>corresponing<sp/>list<sp/>is<sp/>[0,2,3,4,6....1,3,5,7,9...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>3-site<sp/>gates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Apply<sp/>gates<sp/>on<sp/>[0-1-2],<sp/>[3-4-5]...<sp/>then<sp/>on<sp/>[1-2-3],<sp/>[4-5-6]...,<sp/>then<sp/>on<sp/>[2-3-4],[5-6-7],<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>corresponing<sp/>list<sp/>is<sp/>[0,3,6,9...1,4,7,10...2,5,8,11...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>the<sp/>list<sp/>contains<sp/>the<sp/>index<sp/>to<sp/>the<sp/>&quot;first&quot;<sp/>or<sp/>left-most&quot;<sp/>leg<sp/>of<sp/>the<sp/>unitary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>applying<sp/>the<sp/>inverse<sp/>operation,<sp/>all<sp/>the<sp/>indices<sp/>are<sp/>reversed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performance<sp/>note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>state<sp/>is<sp/>at<sp/>position<sp/>L-1,<sp/>and<sp/>the<sp/>list<sp/>generated<sp/>has<sp/>to<sp/>start<sp/>from<sp/>0,<sp/>then<sp/>L-1<sp/>moves<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>done<sp/>before<sp/>even<sp/>starting.<sp/>Additionally,<sp/>if<sp/>unlucky,<sp/>we<sp/>have<sp/>to<sp/>move<sp/>L-1<sp/>times<sp/>again<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>original<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(state.get_direction()<sp/>&lt;<sp/>0<sp/>and<sp/>past_middle)<sp/>state.flip_direction();<sp/>//<sp/>Turn<sp/>direction<sp/>away<sp/>from<sp/>middle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(state.get_direction()<sp/>&gt;<sp/>0<sp/>and<sp/>not<sp/>past_middle)<sp/>state.flip_direction();<sp/>//<sp/>Turn<sp/>direction<sp/>away<sp/>from<sp/>middle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state_len<sp/>=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state_pos<sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;size_t&gt;&gt;<sp/>layers;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;size_t&gt;&gt;<sp/>pos_list(gates.size());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>[i,g]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(gates)<sp/>)<sp/>pos_list[i]<sp/>=<sp/>g.pos;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>pos_list.empty()){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Find<sp/>a<sp/>gate<sp/>where<sp/>pos[0]<sp/>==<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>layer;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>used;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at<sp/>=<sp/>pos_list.front().front();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>[i,pos]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(pos_list)){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>==<sp/>pos.front()){</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer.emplace_back(at);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used.emplace_back(i);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>=<sp/>pos.back()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>the<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layers.emplace_back(layer);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>used<sp/>elements<sp/>from<sp/>gates_pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>i<sp/>:<sp/><ref refid="classiter_1_1reverse" kindref="compound">iter::reverse</ref>(used))<sp/>pos_list.erase(pos_list.begin()<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>every<sp/>other<sp/>layer<sp/>to<sp/>get<sp/>a<sp/>zigzag<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>state<sp/>is<sp/>past<sp/>the<sp/>middle,<sp/>reverse<sp/>layers<sp/>0,2,4...<sp/>otherwise<sp/>1,3,5...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>past_middle<sp/>=<sp/>state_pos<sp/>&gt;<sp/>state_len<sp/>/<sp/>2<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>[i,<sp/>l]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(layers)){</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num::mod&lt;size_t&gt;(i,2)<sp/>==<sp/>past_middle)<sp/>std::reverse(l.begin(),<sp/>l.end());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>layers<sp/>into<sp/>a<sp/>long<sp/>sequence<sp/>of<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>pos_sequence;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>l<sp/>:<sp/>layers)<sp/>pos_sequence.insert(pos_sequence.end(),<sp/>std::make_move_iterator(l.begin()),<sp/>std::make_move_iterator(l.end()));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>apply<sp/>inverse<sp/>layers<sp/>we<sp/>reverse<sp/>the<sp/>whole<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reverse)<sp/>std::reverse(pos_sequence.begin(),<sp/>pos_sequence.end());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos_sequence;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="namespacetools_1_1finite_1_1mps_1a14982ec74405851e191d532d7ed5a4f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a46225bad12a812f2f390fd1d092fa5fb" kindref="member">tools::finite::mps::apply_gates</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;qm::Gate&gt;<sp/>&amp;gates,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;svd::settings&gt;<sp/>svd_settings)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::IOFormat<sp/>CleanFmt(4,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a772752375279d0c6d15336017280dedd" kindref="member">settings::debug_gates</ref>)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref><sp/>and<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>&lt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;trace(&quot;Before<sp/>applying<sp/>gates&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(const<sp/>auto<sp/>&amp;mps<sp/>:<sp/>state.mps_sites)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;M(&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_position()<sp/>&lt;&lt;<sp/>&quot;)<sp/>dims<sp/>[&quot;<sp/>&lt;&lt;<sp/>mps-&gt;spin_dim()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiL()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiR()<sp/>&lt;&lt;<sp/>&quot;]:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Textra::MatrixMap(mps-&gt;get_M_bare(),<sp/>mps-&gt;spin_dim(),<sp/>mps-&gt;get_chiL()<sp/>*<sp/>mps-&gt;get_chiR()).format(CleanFmt)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gates.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_sequence<sp/>=<sp/><ref refid="finite_2mps_8cpp_1a801782eba5f59388b5c33e5c701d4518" kindref="member">generate_pos_sequence</ref>(state,<sp/>gates,<sp/>reverse);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a772752375279d0c6d15336017280dedd" kindref="member">settings::debug_gates</ref>)<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;current<sp/>pos<sp/>{}<sp/>dir<sp/>{}<sp/>|<sp/>pos_sequence<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;(),<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>(),<sp/>pos_sequence);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a123659e5c3939027f7cbad210f9a8b53" kindref="member">clear_cache</ref>(<ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1b4462755110ae77a3bb7e319f6544fa" kindref="member">LogPolicy::QUIET</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>gate_mps;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/>pos]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(pos_sequence))<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gate<sp/>=<sp/>gates[pos];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gate.pos.back()<sp/>&gt;=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;The<sp/>last<sp/>position<sp/>of<sp/>gate<sp/>{}<sp/>is<sp/>out<sp/>of<sp/>bounds:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>pos,<sp/>gate.pos));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_gate_move<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_move&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a5c903eb0d383884b5ad27c13f24daebb" kindref="member">move_center_point_to_pos</ref>(state,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gate.pos.front()),<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_gate_move.toc();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_gate_apply<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_apply&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multisite_mps<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a49f623f81789f2211bd18a05b59cf661" kindref="member">get_multisite_mps</ref>(gate.pos);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gate_mps.resize(std::array&lt;long,3&gt;{gate.op.dimension(0),<sp/>multisite_mps.dimension(1),<sp/>multisite_mps.dimension(2)});</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reverse)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gate_mps.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>gate.adjoint().contract(multisite_mps,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gate_mps.device(<ref refid="namespace_textra_1_1omp_1aa01a562f1a40bca141e5178ba0f055f6" kindref="member">Textra::omp::getDevice</ref>())<sp/>=<sp/>gate.op.contract(multisite_mps,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">Textra::idx</ref>({0},<sp/>{0}));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_gate_apply.toc();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_gate_merge<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_merge&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min_position<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gate.pos.front())<sp/>-<sp/>1<sp/>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_position<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gate.pos.back());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tgt_position<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pos_sequence[std::min&lt;size_t&gt;(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>+<sp/>1,<sp/>pos_sequence.size()<sp/>-<sp/>1)]);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>new_position<sp/>=<sp/>std::clamp&lt;long&gt;(tgt_position,<sp/>min_position,<sp/>max_position);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Merging<sp/>gate<sp/>sites<sp/>{}<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,gate.pos,<sp/>multisite_mps.dimensions());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="namespacesettings_1a772752375279d0c6d15336017280dedd" kindref="member">settings::debug_gates</ref>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;pos<sp/>{}<sp/>|<sp/>tgt<sp/>{}<sp/>|<sp/>new<sp/>{}<sp/>|<sp/>from<sp/>{}<sp/>-<sp/>{}<sp/>|<sp/>labels<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>gate.pos,<sp/>tgt_position,<sp/>new_position,<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;(),<sp/>new_position,<sp/>state.<ref refid="classclass__state__finite_1a01d3c323d97905e8f2b3da7c6289e408" kindref="member">get_labels</ref>());</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a9bac3a578ff2de26864096de90d6f443" kindref="member">tools::finite::mps::merge_multisite_tensor</ref>(state,<sp/>gate_mps,<sp/>gate.pos,<sp/>new_position,<sp/>chi_lim,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a098f82343817bde21e94f4540923cc5ea1e23852820b9154316c7c06e2b7ba051" kindref="member">LogPolicy::NORMAL</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a772752375279d0c6d15336017280dedd" kindref="member">settings::debug_gates</ref>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref><sp/>and<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>&lt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;trace(&quot;After<sp/>applying<sp/>gates&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(const<sp/>auto<sp/>&amp;mps<sp/>:<sp/>state.mps_sites)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;M(&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_position()<sp/>&lt;&lt;<sp/>&quot;)<sp/>dims<sp/>[&quot;<sp/>&lt;&lt;<sp/>mps-&gt;spin_dim()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiL()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiR()<sp/>&lt;&lt;<sp/>&quot;]:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Textra::MatrixMap(mps-&gt;get_M_bare(),<sp/>mps-&gt;spin_dim(),<sp/>mps-&gt;get_chiL()<sp/>*<sp/>mps-&gt;get_chiR()).format(CleanFmt)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_gate_return<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_return&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1a6e3a5788cb7570f87115dd6dbe38f4f8" kindref="member">move_center_point_to_edge</ref>(state,<sp/>chi_lim,<sp/>svd_settings);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>t_gate_return.toc();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_normalized<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1mps_1ab5b54869af2185769214e085ed56b8c7" kindref="member">tools::finite::mps::normalize_state</ref>(state,<sp/>chi_lim,<sp/>svd_settings,<sp/><ref refid="config_2enums_8h_1a299b68d9f1bb1395a4cba7781fe37da7a0bfbb30a74b8eb52b34fd39165b6f433" kindref="member">NormPolicy::IFNEEDED</ref>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="namespacesettings_1a772752375279d0c6d15336017280dedd" kindref="member">settings::debug_gates</ref>)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_normalized<sp/>and<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>==<sp/><ref refid="namespace_textra_1ae011dc74fd0ff312cc0d957a688142c9" kindref="member">spdlog::level::trace</ref><sp/>and<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>&lt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_dbg<sp/>=<sp/><ref refid="namespacetools_1_1common_1_1profile_1ae302ec3b2665b7eb9f69b892d6b8c08e" kindref="member">tools::common::profile::get_default_prof</ref>()[</highlight><highlight class="stringliteral">&quot;t_dbg&quot;</highlight><highlight class="normal">]-&gt;tic_token();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tools::log-&gt;trace(&quot;After<sp/>normalization&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(const<sp/>auto<sp/>&amp;mps<sp/>:<sp/>state.mps_sites)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;M(&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_position()<sp/>&lt;&lt;<sp/>&quot;)<sp/>dims<sp/>[&quot;<sp/>&lt;&lt;<sp/>mps-&gt;spin_dim()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiL()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>mps-&gt;get_chiR()<sp/>&lt;&lt;<sp/>&quot;]:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Textra::MatrixMap(mps-&gt;get_M_bare(),<sp/>mps-&gt;spin_dim(),<sp/>mps-&gt;get_chiL()<sp/>*<sp/>mps-&gt;get_chiR()).format(CleanFmt)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesettings_1_1profiling_1ad8612ce49e359b4bbe0aa61952ae3c63" kindref="member">settings::profiling::extra</ref>)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num_old<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Finished<sp/>step:<sp/>move<sp/>{:.4f}<sp/>|<sp/>apply<sp/>{:.4f}<sp/>|<sp/>merge<sp/>{:.4f}<sp/>|<sp/>split<sp/>{:.4f}<sp/>|<sp/>merge<sp/>{:.4f}<sp/>|<sp/>svdm<sp/>{:.4f}<sp/>|<sp/>svda<sp/>{:.4f}<sp/>|<sp/>svdb<sp/>{:.4f}<sp/>|<sp/>svdA<sp/>{:.4f}<sp/>|<sp/>svdB<sp/>{:.4f}<sp/>|<sp/>wrk<sp/>{:.4f}<sp/>|<sp/>adj<sp/>{:.4f}<sp/>|<sp/>jac<sp/>{:.4f}<sp/>|<sp/>svd<sp/>{:.4f}<sp/>|<sp/>num<sp/>{}<sp/>(+{})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_move&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_apply&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_merge&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_split&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_merge&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svdm&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svda&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svdb&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_splitA_svd&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_splitB_svd&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_wrk&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_adj&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_jac&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>*<sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_svd&quot;</highlight><highlight class="normal">]-&gt;get_measured_time(),</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsvd_1_1solver_1a34c8fe6041f9bf780bd3300aae652c71" kindref="member">svd::solver::count</ref>.value(),<sp/><ref refid="classsvd_1_1solver_1a34c8fe6041f9bf780bd3300aae652c71" kindref="member">svd::solver::count</ref>.value()<sp/>-<sp/>num_old</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_move&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_apply&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_gate_merge&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_split&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_merge_merge&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svdm&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svda&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_split_svdb&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_splitA_svd&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_splitB_svd&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_wrk&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_adj&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_jac&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1common_1_1profile_1afc3a25a71835997f1a9aa7838e4de0aa" kindref="member">tools::common::profile::prof</ref>[<ref refid="config_2enums_8h_1a9243adfb7445f1adcf51b73329e774c9a8e1bde3c3d303163521522cf1d62f21f" kindref="member">AlgorithmType::ANY</ref>][</highlight><highlight class="stringliteral">&quot;t_svd_svd&quot;</highlight><highlight class="normal">]-&gt;reset();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_old<sp/>=<sp/><ref refid="classsvd_1_1solver_1a34c8fe6041f9bf780bd3300aae652c71" kindref="member">svd::solver::count</ref>.value();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/mps.cpp"/>
  </compounddef>
</doxygen>
