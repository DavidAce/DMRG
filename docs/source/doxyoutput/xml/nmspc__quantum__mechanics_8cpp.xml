<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="nmspc__quantum__mechanics_8cpp" kind="file" language="C++">
    <compoundname>nmspc_quantum_mechanics.cpp</compoundname>
    <includes refid="nmspc__quantum__mechanics_8h" local="yes">nmspc_quantum_mechanics.h</includes>
    <includes refid="nmspc__tensor__extra_8h" local="yes">general/nmspc_tensor_extra.h</includes>
    <includes refid="nmspc__iter_8h" local="no">general/nmspc_iter.h</includes>
    <includes refid="io_2fmt_8h" local="no">io/fmt.h</includes>
    <includes refid="spdlog_8h" local="no">io/spdlog.h</includes>
    <includes refid="linalg_8h" local="no">math/linalg.h</includes>
    <includes refid="num_8h" local="no">math/num.h</includes>
    <includes refid="rnd_8h" local="no">math/rnd.h</includes>
    <includes refid="stat_8h" local="no">math/stat.h</includes>
    <includes local="no">set</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes local="no">unsupported/Eigen/MatrixFunctions</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="12">
        <label>limits</label>
      </node>
      <node id="2">
        <label>nmspc_quantum_mechanics.h</label>
        <link refid="nmspc__quantum__mechanics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>general/nmspc_iter.h</label>
        <link refid="nmspc__iter_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="35">
        <label>cmath</label>
      </node>
      <node id="41">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>numeric</label>
      </node>
      <node id="31">
        <label>Eigen/Core</label>
      </node>
      <node id="26">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="34">
        <label>math/num.h</label>
        <link refid="num_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="42">
        <label>unsupported/Eigen/MatrixFunctions</label>
      </node>
      <node id="20">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="28">
        <label>math/linalg.h</label>
        <link refid="linalg_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="18">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="32">
        <label>linalg/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>fmt/core.h</label>
      </node>
      <node id="19">
        <label>physics/class_quantum_gates.h</label>
        <link refid="class__quantum__gates_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>linalg/matrix.h</label>
        <link refid="matrix_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>random</label>
      </node>
      <node id="7">
        <label>string_view</label>
      </node>
      <node id="37">
        <label>optional</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="10">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>math/rnd.h</label>
        <link refid="rnd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>linalg/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="21">
        <label>general/nmspc_tensor_extra.h</label>
        <link refid="nmspc__tensor__extra_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="16">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="13">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="22">
        <label>general/nmspc_sfinae.h</label>
        <link refid="nmspc__sfinae_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="40">
        <label>set</label>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp</label>
        <link refid="nmspc__quantum__mechanics_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>config/enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>math/stat.h</label>
        <link refid="stat_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceqm">qm</innernamespace>
    <innernamespace refid="namespaceqm_1_1spin_half">qm::spinHalf</innernamespace>
    <innernamespace refid="namespaceqm_1_1_spin_one">qm::SpinOne</innernamespace>
    <innernamespace refid="namespaceqm_1_1time_evolution">qm::timeEvolution</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="nmspc__quantum__mechanics_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using Scalar =  std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp" line="21" column="1" bodyfile="/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-03-20.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nmspc__quantum__mechanics_8h" kindref="compound">nmspc_quantum_mechanics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nmspc__tensor__extra_8h" kindref="compound">general/nmspc_tensor_extra.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nmspc__iter_8h" kindref="compound">general/nmspc_iter.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="io_2fmt_8h" kindref="compound">io/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="spdlog_8h" kindref="compound">io/spdlog.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="linalg_8h" kindref="compound">math/linalg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="num_8h" kindref="compound">math/num.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="rnd_8h" kindref="compound">math/rnd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stat_8h" kindref="compound">math/stat.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unsupported/Eigen/MatrixFunctions&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="nmspc__quantum__mechanics_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref><sp/>=<sp/>std::complex&lt;double&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_eigen" kindref="compound">Eigen</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceqm_1a41cbf588a567c9eee91b34e0ecd4e4b5" refkind="member"><highlight class="normal"><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/><ref refid="namespaceqm_1a41cbf588a567c9eee91b34e0ecd4e4b5" kindref="member">qm::gen_embedded_spin_operator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelinalg_1_1tensor_1a43948c9feaefb419a3e8641ca240dd42" kindref="member">mirror</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>Returns<sp/>a<sp/>spin<sp/>operator<sp/>embedded<sp/>in<sp/>a<sp/>larger<sp/>Hilbert<sp/>space.<sp/>For<sp/>instance,<sp/>if<sp/>at<sp/>==<sp/>1<sp/>and<sp/>sites<sp/>==<sp/>4:</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/>σ¹<sp/>=<sp/>i<sp/>⊗<sp/>σ<sp/>⊗<sp/>i<sp/>⊗<sp/>i</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>where<sp/>each<sp/>element<sp/>is<sp/>a<sp/>dxd<sp/>matrix,<sp/>resulting<sp/>in<sp/>a<sp/>d^4<sp/>*<sp/>d^4<sp/>matrix.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>if<sp/>this<sp/>matrix<sp/>is<sp/>converted<sp/>to<sp/>a<sp/>rank-8<sp/>tensor,<sp/>the<sp/>indexing<sp/>goes<sp/>like:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>@verbatim</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>2<sp/>1<sp/>0</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/>σ¹<sp/><sp/>]</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7<sp/>6<sp/>5<sp/>4</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>@endverbatim</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>whereas<sp/>you<sp/>would<sp/>normally<sp/>want<sp/>left-to-right<sp/>indexing<sp/>in<sp/>MPS<sp/>contexts:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>@verbatim</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>1<sp/>2<sp/>3</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/>σ¹<sp/><sp/>]</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>5<sp/>6<sp/>7</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>@endverbatim</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>So<sp/>don&apos;t<sp/>forget<sp/>to<sp/>set<sp/>&quot;reverse<sp/>=<sp/>true&quot;<sp/>if<sp/>you<sp/>intend<sp/>to<sp/>use<sp/>the<sp/>result<sp/>as<sp/>a<sp/>tensor.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&gt;=<sp/>sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Expected<sp/>at<sp/>&lt;<sp/>sites.<sp/>Got<sp/>[at<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacelinalg_1_1matrix_1a47330fd73f538435fc51d33de3a9a67b" kindref="member">std::to_string</ref>(at)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>[sites<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacelinalg_1_1matrix_1a47330fd73f538435fc51d33de3a9a67b" kindref="member">std::to_string</ref>(sites)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">MatrixXcd</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>=<sp/>MatrixXcd::Identity(s.rows(),<sp/>s.cols());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">MatrixXcd</ref><sp/>result<sp/>=<sp/>at<sp/>==<sp/>0<sp/>?<sp/>s<sp/>:<sp/><ref refid="namespaceqm_1_1_spin_one_1a16bed2d6c7c94cde96fc428506302313" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>1;<sp/>site<sp/>&lt;<sp/>sites;<sp/>site++)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="namespacelinalg_1_1matrix_1aaee12e367b742ebfa9ad001b24735656" kindref="member">linalg::matrix::kronecker</ref>(result,<sp/>site<sp/>==<sp/>at<sp/>?<sp/>s<sp/>:<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="namespacelinalg_1_1tensor_1a43948c9feaefb419a3e8641ca240dd42" kindref="member">mirror</ref>).eval();<sp/></highlight><highlight class="comment">//<sp/>.eval()<sp/>is<sp/>required<sp/>to<sp/>avoid<sp/>aliasing!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="namespaceqm_1ac14000ed85c03f44fee79510a99e1447" refkind="member"><highlight class="normal">std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1ac14000ed85c03f44fee79510a99e1447" kindref="member">qm::gen_manybody_spins</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MatrixXcd&gt;<sp/>S;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>0;<sp/>site<sp/>&lt;<sp/>sites;<sp/>site++)<sp/>S.emplace_back(<ref refid="namespaceqm_1a41cbf588a567c9eee91b34e0ecd4e4b5" kindref="member">qm::gen_embedded_spin_operator</ref>(s,<sp/>site,<sp/>sites,<sp/>reverse));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="namespaceqm_1_1spin_half" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceqm_1_1spin_half" kindref="compound">qm::spinHalf</ref><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="namespaceqm_1_1spin_half_1ae2a3b703d77bff861c17f02785eb4539" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1a86943091b0ad27c0dfee22caf74bb2ab" kindref="member">sx</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="76" refid="namespaceqm_1_1spin_half_1ad89389f68e78e9d72c2249d69ed2d397" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1af28cf0235b73d38aec6b09a8bf313e10" kindref="member">sy</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1ac4afad00d74a3ee80f897ae46cf89c36" kindref="member">imp</ref>,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="79" refid="namespaceqm_1_1spin_half_1ac450a6ccd34bddc24f807f0b3a97ea5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1a0ca088bc79d8ed29c00a7e33d9af1386" kindref="member">sz</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-1.0).finished();</highlight></codeline>
<codeline lineno="82" refid="namespaceqm_1_1spin_half_1a998a0415bed8d81a6830dc19487ee381" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/><ref refid="namespaceqm_1_1spin_half_1a998a0415bed8d81a6830dc19487ee381" kindref="member">sp</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="85" refid="namespaceqm_1_1spin_half_1afe6f0dcbb87cf9f9b1911e3f2c5168b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/><ref refid="namespaceqm_1_1spin_half_1afe6f0dcbb87cf9f9b1911e3f2c5168b0" kindref="member">sm</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="88" refid="namespaceqm_1_1spin_half_1a6e531542ad7b6d1713f0c60ab77c1b02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/>=<sp/>(<ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Matrix2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0).finished();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="namespaceqm_1_1spin_half_1a1ec5c94fc7ebde524737c12018654cf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;Vector2cd,2&gt;<sp/><ref refid="namespaceqm_1_1spin_half_1a1ec5c94fc7ebde524737c12018654cf6" kindref="member">sx_spinors</ref>{(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,<sp/>1.0).finished()/std::sqrt(2),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,-1.0).finished()/std::sqrt(2)};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="namespaceqm_1_1spin_half_1a55f84c37b3b9188cca7639bf30ec6c2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;Vector2cd,2&gt;<sp/><ref refid="namespaceqm_1_1spin_half_1a55f84c37b3b9188cca7639bf30ec6c2b" kindref="member">sy_spinors</ref>{(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,<sp/><ref refid="namespaceqm_1ac4afad00d74a3ee80f897ae46cf89c36" kindref="member">imp</ref>).finished()/std::sqrt(2),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref>).finished()/std::sqrt(2)};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="namespaceqm_1_1spin_half_1aae4554ab07fff562bfc43523c7070b01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;Vector2cd,2&gt;<sp/><ref refid="namespaceqm_1_1spin_half_1aae4554ab07fff562bfc43523c7070b01" kindref="member">sz_spinors</ref>{(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>1.0,<sp/>0.0).finished()/std::sqrt(2),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="namespace_eigen_1abc09ccddf6c3bd35f6da37cad5a68812" kindref="member">Vector2cd</ref>()<sp/>&lt;&lt;<sp/>0.0,<sp/>1.0).finished()/std::sqrt(2)};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="namespaceqm_1_1spin_half_1afd85cdedfd4461df16a88c97fe3ea243" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a0cf3051ee9d58ece101644b557e55c15" kindref="member">SX</ref>;</highlight></codeline>
<codeline lineno="101" refid="namespaceqm_1_1spin_half_1a6a366908810d602495ad413ddb9e97d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a08baefd079e4334232a1591a0c666e12" kindref="member">SY</ref>;</highlight></codeline>
<codeline lineno="102" refid="namespaceqm_1_1spin_half_1adee16087a8eb7598c285630579d551a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" kindref="member">SZ</ref>;</highlight></codeline>
<codeline lineno="103" refid="namespaceqm_1_1spin_half_1affbf550995483fe7078f073448a1c40e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a208f922ad886e2d517e30fbaeedbb855" kindref="member">II</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="namespaceqm_1_1spin_half_1a5d30db96023a4c17d8229c78cf0769fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/><ref refid="namespaceqm_1_1spin_half_1a5d30db96023a4c17d8229c78cf0769fc" kindref="member">gen_embedded_spin_operator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Eigen::Matrix2cd</ref><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>forget<sp/>to<sp/>set<sp/>&quot;swap<sp/>=<sp/>true&quot;<sp/>if<sp/>you<sp/>intend<sp/>to<sp/>use<sp/>the<sp/>result<sp/>as<sp/>a<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1a41cbf588a567c9eee91b34e0ecd4e4b5" kindref="member">qm::gen_embedded_spin_operator</ref>(s,<sp/>at,<sp/>sites,<sp/>swap);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="namespaceqm_1_1spin_half_1ab4b0b23ee752be0b7651d27cf5f1c4d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Matrix4cd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a470d62a3839be62ae9296f5c92b72f90" kindref="member">gen_twobody_spins</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Eigen::Matrix2cd</ref><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pair<sp/>of<sp/>two-body<sp/>4x4<sp/>spin<sp/>operators<sp/>for<sp/>embedded<sp/>in<sp/>a<sp/>two-site<sp/>Hilbert<sp/>space:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(σ<sp/>⊗<sp/>i,<sp/>i<sp/>⊗<sp/>σ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>σ<sp/>is<sp/>a<sp/>2x2<sp/>(pauli)<sp/>matrix<sp/>and<sp/>i<sp/>is<sp/>the<sp/>2x2<sp/>identity<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>forget<sp/>to<sp/>set<sp/>&quot;swap<sp/>=<sp/>true&quot;<sp/>if<sp/>you<sp/>intend<sp/>to<sp/>use<sp/>the<sp/>result<sp/>as<sp/>a<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Matrix4cd&gt;<sp/>S;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>0;<sp/>site<sp/>&lt;<sp/>2;<sp/>site++)<sp/>S.emplace_back(<ref refid="namespaceqm_1a41cbf588a567c9eee91b34e0ecd4e4b5" kindref="member">qm::gen_embedded_spin_operator</ref>(s,<sp/>site,<sp/>2,<sp/>swap));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="namespaceqm_1_1_spin_one" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceqm_1_1_spin_one" kindref="compound">qm::SpinOne</ref><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="namespaceqm_1_1_spin_one_1a86943091b0ad27c0dfee22caf74bb2ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1a86943091b0ad27c0dfee22caf74bb2ab" kindref="member">sx</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref>()<sp/>&lt;&lt;<sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>0.0,<sp/>1.0,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="130" refid="namespaceqm_1_1_spin_one_1af28cf0235b73d38aec6b09a8bf313e10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1af28cf0235b73d38aec6b09a8bf313e10" kindref="member">sy</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref>()<sp/>&lt;&lt;<sp/><sp/>0.0<sp/>,<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref>,<sp/>0.0,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1ac4afad00d74a3ee80f897ae46cf89c36" kindref="member">imp</ref>,<sp/><sp/>0.0<sp/>,<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref>,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0<sp/>,<sp/><sp/><ref refid="namespaceqm_1ac4afad00d74a3ee80f897ae46cf89c36" kindref="member">imp</ref>,<sp/>0.0).finished();</highlight></codeline>
<codeline lineno="133" refid="namespaceqm_1_1_spin_one_1a0ca088bc79d8ed29c00a7e33d9af1386" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref><sp/><ref refid="namespaceqm_1_1_spin_one_1a0ca088bc79d8ed29c00a7e33d9af1386" kindref="member">sz</ref><sp/>=<sp/>(<ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref>()<sp/>&lt;&lt;<sp/><sp/>1.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,-1.0).finished();</highlight></codeline>
<codeline lineno="136" refid="namespaceqm_1_1_spin_one_1a16bed2d6c7c94cde96fc428506302313" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Matrix3cd</ref>()<sp/><sp/>&lt;&lt;<sp/>1.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>1.0).finished();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="namespaceqm_1_1_spin_one_1a0cf3051ee9d58ece101644b557e55c15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a0cf3051ee9d58ece101644b557e55c15" kindref="member">SX</ref>;</highlight></codeline>
<codeline lineno="141" refid="namespaceqm_1_1_spin_one_1a08baefd079e4334232a1591a0c666e12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a08baefd079e4334232a1591a0c666e12" kindref="member">SY</ref>;</highlight></codeline>
<codeline lineno="142" refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" kindref="member">SZ</ref>;</highlight></codeline>
<codeline lineno="143" refid="namespaceqm_1_1_spin_one_1a208f922ad886e2d517e30fbaeedbb855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a208f922ad886e2d517e30fbaeedbb855" kindref="member">II</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clang-format<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="namespaceqm_1_1_spin_one_1a470d62a3839be62ae9296f5c92b72f90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::MatrixXcd&gt;<sp/><ref refid="namespaceqm_1_1_spin_one_1a470d62a3839be62ae9296f5c92b72f90" kindref="member">gen_twobody_spins</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aab1bf1a37c6cbc8faf1c426a5e4f943c" kindref="member">Eigen::Matrix3cd</ref><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swap)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>pair<sp/>of<sp/>two-body<sp/>4x4<sp/>spin<sp/>operators<sp/>for<sp/>embedded<sp/>in<sp/>a<sp/>two-site<sp/>Hilbert<sp/>space:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(σ<sp/>⊗<sp/>i,<sp/>i<sp/>⊗<sp/>σ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>σ<sp/>is<sp/>a<sp/>3x3<sp/>(pauli)<sp/>matrix<sp/>and<sp/>i<sp/>is<sp/>the<sp/>3x3<sp/>identity<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>don&apos;t<sp/>forget<sp/>to<sp/>set<sp/>&quot;swap<sp/>=<sp/>true&quot;<sp/>if<sp/>you<sp/>intend<sp/>to<sp/>use<sp/>the<sp/>result<sp/>as<sp/>a<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1ac14000ed85c03f44fee79510a99e1447" kindref="member">qm::gen_manybody_spins</ref>(s,<sp/>2,<sp/>swap);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="namespaceqm_1_1time_evolution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceqm_1_1time_evolution" kindref="compound">qm::timeEvolution</ref><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="namespaceqm_1_1time_evolution_1aadfa0528fb8a58423c6a2143d1792eec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1aadfa0528fb8a58423c6a2143d1792eec" kindref="member">Suzuki_Trotter_1st_order</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_evn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_odd)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h_evn_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_evn);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h_odd_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_odd);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix).exp()),<sp/></highlight><highlight class="comment">//<sp/>exp(-i<sp/>dt<sp/>H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_odd_matrix).exp())<sp/><sp/></highlight><highlight class="comment">//<sp/>exp(-i<sp/>dt<sp/>H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="namespaceqm_1_1time_evolution_1a55e2eb4d85469d056085a65dea13ed2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1a55e2eb4d85469d056085a65dea13ed2a" kindref="member">Suzuki_Trotter_2nd_order</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_evn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_odd)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h_evn_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_evn);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h_odd_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_odd);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix<sp/>/<sp/>2.0).exp()),<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_odd_matrix).exp()),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix<sp/>/<sp/>2.0).exp())};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="namespaceqm_1_1time_evolution_1a2b1e02afa3fbfa5438924bc310504c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1a2b1e02afa3fbfa5438924bc310504c94" kindref="member">Suzuki_Trotter_4th_order</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_evn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_odd)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>h_evn_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_evn);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>h_odd_matrix<sp/>=<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(h_odd);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cbrt2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pow(2.0,<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0<sp/>/<sp/>(2.0<sp/>-<sp/>cbrt2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-cbrt2<sp/>*<sp/>beta1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alph1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.5<sp/>*<sp/>beta1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alph2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1.0<sp/>-<sp/>cbrt2)<sp/>/<sp/>2.0<sp/>*<sp/>beta1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((alph1<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix).exp()));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((beta1<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_odd_matrix).exp()));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((alph2<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix).exp()));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((beta2<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_odd_matrix).exp()));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((alph2<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix).exp()));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((beta1<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_odd_matrix).exp()));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.emplace_back(<ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((alph1<sp/>*<sp/><ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>h_evn_matrix).exp()));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="namespaceqm_1_1time_evolution_1a671e7d2d833e4ec7f65278095086ac14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1a671e7d2d833e4ec7f65278095086ac14" kindref="member">get_twosite_time_evolution_operators</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>susuki_trotter_order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_evn,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_odd)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(susuki_trotter_order)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1_1time_evolution_1aadfa0528fb8a58423c6a2143d1792eec" kindref="member">Suzuki_Trotter_1st_order</ref>(delta_t,<sp/>h_evn,<sp/>h_odd);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1_1time_evolution_1a55e2eb4d85469d056085a65dea13ed2a" kindref="member">Suzuki_Trotter_2nd_order</ref>(delta_t,<sp/>h_evn,<sp/>h_odd);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1_1time_evolution_1a2b1e02afa3fbfa5438924bc310504c94" kindref="member">Suzuki_Trotter_4th_order</ref>(delta_t,<sp/>h_evn,<sp/>h_odd);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1_1time_evolution_1a55e2eb4d85469d056085a65dea13ed2a" kindref="member">Suzuki_Trotter_2nd_order</ref>(delta_t,<sp/>h_evn,<sp/>h_odd);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="namespaceqm_1_1time_evolution_1a19dfdfd3c5d982f8f29579a3278a7700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1a19dfdfd3c5d982f8f29579a3278a7700" kindref="member">compute_G</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>susuki_trotter_order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_evn,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;h_odd)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;compute_G(...):<sp/>Convention<sp/>has<sp/>changed:<sp/>delta_t,<sp/>or<sp/>a,<sp/>are<sp/>now<sp/>multiplied<sp/>by<sp/>[-i]<sp/>in<sp/>exponentials.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>This<sp/>function<sp/>may<sp/>not<sp/>have<sp/>been<sp/>adjusted<sp/>to<sp/>the<sp/>new<sp/>convention&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceqm_1_1time_evolution_1a671e7d2d833e4ec7f65278095086ac14" kindref="member">get_twosite_time_evolution_operators</ref>(a,<sp/>susuki_trotter_order,<sp/>h_evn,<sp/>h_odd);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="namespaceqm_1_1time_evolution_1a73eddf90559fa5d269512f94bd3b4b80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::vector&lt;qm::Gate&gt;,<sp/>std::vector&lt;qm::Gate&gt;&gt;<sp/><ref refid="namespaceqm_1_1time_evolution_1a73eddf90559fa5d269512f94bd3b4b80" kindref="member">get_time_evolution_gates</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;qm::Gate&gt;<sp/>&amp;hams_nsite)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>we<sp/>do<sp/>a<sp/>second-order<sp/>Suzuki-Trotter<sp/>decomposition<sp/>which<sp/>holds<sp/>for<sp/>n-site<sp/>hamiltonians<sp/>as<sp/>described</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>here<sp/>https://tensornetwork.org/mps/algorithms/timeevo/tebd.html</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>instance,</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/>Sum_a^n<sp/>H_a</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>where<sp/>each<sp/>H_a<sp/>is<sp/>a<sp/>sum<sp/>of<sp/>n-site<sp/>terms.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>second-order<sp/>Suzuki-Trotter<sp/>decomposition<sp/>them<sp/>becomes</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>U2(d)<sp/>=<sp/>Prod_{a=1}^n<sp/>exp(-i[d/2]H_a)<sp/>Prod_{a=n}^1<sp/>exp(-i[d/2]H_a)</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>So<sp/>this<sp/>is<sp/>just<sp/>the<sp/>layers<sp/>applied<sp/>in<sp/>reversed<sp/>order!</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>return<sp/>these<sp/>as<sp/>a<sp/>pair<sp/>of<sp/>gate<sp/>layers,<sp/>and<sp/>both<sp/>need<sp/>to<sp/>be<sp/>applied<sp/>normally<sp/>for<sp/>the<sp/>time<sp/>evolution</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>take<sp/>place</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Gate&gt;<sp/>time_evolution_gates_forward;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Gate&gt;<sp/>time_evolution_gates_reverse;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_evolution_gates_forward.reserve(hams_nsite.size());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_evolution_gates_reverse.reserve(hams_nsite.size());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>first<sp/>forward<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;h<sp/>:<sp/>hams_nsite)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_evolution_gates_forward.emplace_back(h.exp(<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>0.5));<sp/></highlight><highlight class="comment">//<sp/>exp(-i<sp/>*<sp/>delta_t<sp/>*<sp/>h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>second<sp/>reversed<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;h<sp/>:<sp/><ref refid="classiter_1_1reverse" kindref="compound">iter::reverse</ref>(hams_nsite))<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_evolution_gates_reverse.emplace_back(h.exp(<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t<sp/>*<sp/>0.5));<sp/></highlight><highlight class="comment">//<sp/>exp(-i<sp/>*<sp/>delta_t<sp/>*<sp/>h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::imag(delta_t)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/>time_evolution_gates_forward)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>t.isUnitary(Eigen::NumTraits&lt;double&gt;::dummy_precision()<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t.op.dimension(0))))<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Time<sp/>evolution<sp/>operator<sp/>at<sp/>pos<sp/>{}<sp/>is<sp/>not<sp/>unitary:\n{}&quot;</highlight><highlight class="normal">,<sp/>t.pos,<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">linalg::tensor::to_string</ref>(t.op)));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/>time_evolution_gates_reverse)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>t.isUnitary(Eigen::NumTraits&lt;double&gt;::dummy_precision()<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t.op.dimension(0))))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Time<sp/>evolution<sp/>operator<sp/>at<sp/>pos<sp/>{}<sp/>is<sp/>not<sp/>unitary:\n{}&quot;</highlight><highlight class="normal">,<sp/>t.pos,<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">linalg::tensor::to_string</ref>(t.op)));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(time_evolution_gates_forward,<sp/>time_evolution_gates_reverse);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="namespaceqm_1_1lbit_1a15c037630f73196f45e6efd078f07719" refkind="member"><highlight class="normal">std::vector&lt;qm::Gate&gt;<sp/><ref refid="namespaceqm_1_1lbit_1a15c037630f73196f45e6efd078f07719" kindref="member">qm::lbit::get_unitary_2gate_layer</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fmix)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Generating<sp/>twosite<sp/>unitaries&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kroneckerSwap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" kindref="member">SZ</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceqm_1_1spin_half_1ab4b0b23ee752be0b7651d27cf5f1c4d8" kindref="member">qm::spinHalf::gen_twobody_spins</ref>(<ref refid="namespaceqm_1_1spin_half_1ac450a6ccd34bddc24f807f0b3a97ea5f" kindref="member">qm::spinHalf::sz</ref>,<sp/>kroneckerSwap);<sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>these<sp/>as<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceqm_1_1spin_half_1ab4b0b23ee752be0b7651d27cf5f1c4d8" kindref="member">qm::spinHalf::gen_twobody_spins</ref>(<ref refid="namespaceqm_1_1spin_half_1a998a0415bed8d81a6830dc19487ee381" kindref="member">qm::spinHalf::sp</ref>,<sp/>kroneckerSwap);<sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>these<sp/>as<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceqm_1_1spin_half_1ab4b0b23ee752be0b7651d27cf5f1c4d8" kindref="member">qm::spinHalf::gen_twobody_spins</ref>(<ref refid="namespaceqm_1_1spin_half_1afe6f0dcbb87cf9f9b1911e3f2c5168b0" kindref="member">qm::spinHalf::sm</ref>,<sp/>kroneckerSwap);<sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>these<sp/>as<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceqm_1_1spin_half_1ab4b0b23ee752be0b7651d27cf5f1c4d8" kindref="member">qm::spinHalf::gen_twobody_spins</ref>(<ref refid="namespaceqm_1_1spin_half_1a6e531542ad7b6d1713f0c60ab77c1b02" kindref="member">qm::spinHalf::id</ref>,<sp/>kroneckerSwap);<sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>these<sp/>as<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::vector&lt;Eigen::Matrix4cd&gt;{0.5<sp/>*<sp/>(ID[0]<sp/>+<sp/><ref refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" kindref="member">SZ</ref>[0]),<sp/>0.5<sp/>*<sp/>(ID[1]<sp/>+<sp/><ref refid="namespaceqm_1_1_spin_one_1a4b1681da66f3f407284652f0853f2418" kindref="member">SZ</ref>[1])};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_dims<sp/><sp/><sp/><sp/><sp/>=<sp/>std::vector&lt;long&gt;{2l,2l};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;qm::Gate&gt;<sp/>unitaries;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>unitaries.reserve(sites<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/>sites<sp/>-<sp/>1;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th0<sp/>=<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th1<sp/>=<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th2<sp/>=<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th3<sp/>=<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>t(<ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1),<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(1,<sp/>-1));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/>std::vector&lt;size_t&gt;{<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>+<sp/>1};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix4cd<sp/>H<sp/>=<sp/>th3<sp/>*<sp/>N[0]<sp/>*<sp/>N[1]<sp/>+<sp/>th2<sp/>*<sp/>N[1]<sp/>*<sp/>(ID[0]<sp/>-<sp/>N[0])<sp/>+<sp/>th1<sp/>*<sp/>N[0]<sp/>*<sp/>(ID[1]<sp/>-<sp/>N[1])<sp/>+<sp/>th0<sp/>*<sp/>(ID[0]<sp/>-<sp/>N[0])<sp/>*<sp/>(ID[1]<sp/>-<sp/>N[1])<sp/>+</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SP[0]<sp/>*<sp/>SM[1]<sp/>*<sp/>t<sp/>+<sp/>SP[1]<sp/>*<sp/>SM[0]<sp/>*<sp/>std::conj(t);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(kroneckerSwap)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>the<sp/>kronecker<sp/>already<sp/>has<sp/>index<sp/>pattern<sp/>left-to-right<sp/>and<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>[<sp/>exp(-ifH)<sp/>]<sp/><sp/>==<sp/><sp/>[<sp/>exp(-ifH)<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unitaries.emplace_back(<ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>((<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>fmix<sp/>*<sp/>H).exp().eval()),<sp/>indices,<sp/>spin_dims);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>shuffle<sp/>to<sp/>get<sp/>the<sp/>correct<sp/>underlying<sp/>index<sp/>pattern:<sp/>Sites<sp/>are<sp/>contracted<sp/>left-to<sp/>right,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>kronecker<sp/>product<sp/>that<sp/>generated<sp/>two-site<sp/>gates<sp/>above<sp/>has<sp/>indexed<sp/>right-to-left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>[<sp/>exp(-ifH)<sp/>]<sp/><sp/>---&gt;<sp/><sp/><sp/><sp/>[<sp/>exp(-ifH)<sp/>]<sp/><sp/><sp/>---&gt;<sp/><sp/>[<sp/>exp(-ifH)<sp/>]<sp/><sp/>---&gt;<sp/><sp/>[<sp/>exp(-ifH)<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>H_shuffled<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(H,<sp/>2,<sp/>2,<sp/>2,<sp/>2).shuffle(<ref refid="namespace_textra_1af66a1cb409abbc5dcc3ddef03d8f9043" kindref="member">Textra::array4</ref>{1,<sp/>0,<sp/>3,<sp/>2}).reshape(<ref refid="namespace_textra_1a0caeb138a8ea11cca9cd571e5b4b9c83" kindref="member">Textra::array2</ref>{4,<sp/>4});</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expifH<sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>fmix<sp/>*<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(H_shuffled)).exp();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unitaries.emplace_back(<ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(expifH),<sp/>indices,<sp/>spin_dims);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;u<sp/>:<sp/>unitaries)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(u.op).isUnitary())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;u<sp/>is<sp/>not<sp/>unitary!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unitaries;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="namespaceqm_1_1lbit_1a2081e2929836299159b068a873a5933e" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespaceqm_1_1lbit_1a2081e2929836299159b068a873a5933e" kindref="member">qm::lbit::get_time_evolution_operator</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;H)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>matrix<sp/>H,<sp/>this<sp/>returns<sp/>exp(delta_t<sp/>*<sp/>H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>time<sp/>evolution,<sp/>just<sp/>make<sp/>sure<sp/>delta_t<sp/>=<sp/>-i*d,<sp/><sp/>where<sp/>d<sp/>is<sp/>a<sp/>(small)<sp/>real<sp/>positive<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>((delta_t<sp/>*<sp/><ref refid="namespace_textra_1a82d0a0f369c18c8430752d4108f05acc" kindref="member">Textra::MatrixMap</ref>(H)).exp());</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="namespaceqm_1_1lbit_1ac5f0347008b8f46592ab3eb7bfa9163e" refkind="member"><highlight class="normal">std::vector&lt;qm::Gate&gt;<sp/><ref refid="namespaceqm_1_1lbit_1ac5f0347008b8f46592ab3eb7bfa9163e" kindref="member">qm::lbit::get_time_evolution_gates</ref>(<ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;qm::Gate&gt;<sp/>&amp;hams_nsite)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Gate&gt;<sp/>time_evolution_gates;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>time_evolution_gates.reserve(hams_nsite.size());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;h<sp/>:<sp/>hams_nsite)<sp/>time_evolution_gates.emplace_back(h.exp(<ref refid="namespaceqm_1ac235075b847ab17a20117f984b28b64d" kindref="member">imn</ref><sp/>*<sp/>delta_t));<sp/></highlight><highlight class="comment">//<sp/>exp(-i<sp/>*<sp/>delta_t<sp/>*<sp/>h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/>time_evolution_gates)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>t.isUnitary(Eigen::NumTraits&lt;double&gt;::dummy_precision()<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t.op.dimension(0))))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Time<sp/>evolution<sp/>operator<sp/>at<sp/>pos<sp/>{}<sp/>is<sp/>not<sp/>unitary:\n{}&quot;</highlight><highlight class="normal">,<sp/>t.pos,<sp/><ref refid="namespacelinalg_1_1tensor_1a4fab1b7985e6991f7f0eb430f436a150" kindref="member">linalg::tensor::to_string</ref>(t.op)));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_evolution_gates;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="namespaceqm_1_1lbit_1ab689a9e0155f959efc02eb17a53822ec" refkind="member"><highlight class="normal">std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1lbit_1ab689a9e0155f959efc02eb17a53822ec" kindref="member">qm::lbit::get_time_evolution_operators_2site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/><ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>&amp;hams_2site)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>l-bit<sp/>systems<sp/>we<sp/>are<sp/>aldready<sp/>in<sp/>a<sp/>diagonal<sp/>basis,<sp/>so<sp/>h_{j,j+1}<sp/>and<sp/>h_{j+1,j+2}<sp/>commute.<sp/>Therefore<sp/>we<sp/>can<sp/>immediately<sp/>use<sp/>the<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>exp(-i*dt<sp/>*[h_{j,j+1}<sp/>+<sp/>h_{j+1,j+2}<sp/>+<sp/>...<sp/>+<sp/>h_{L-2,<sp/>L-1}])<sp/>=<sp/><sp/>exp(-i*dt<sp/>[h_{j,j+1}])<sp/>*<sp/>exp(-i*dt*[h_{j+1,j+2}])<sp/>*<sp/>...<sp/>*<sp/>exp(-i*dt*[h_{L-2,<sp/>L-1}])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>passing<sp/>through<sp/>the<sp/>Suzuki-Trotter<sp/>decomposition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>expect<sp/>&quot;hams_2site&quot;<sp/>to<sp/>contain<sp/>terms<sp/>like<sp/><sp/>h_{j,j+1}<sp/>+<sp/>h_{j+1,j+2}<sp/>+<sp/>...<sp/>+<sp/>h_{L-2,<sp/>L-1}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hams_2site.size()<sp/>!=<sp/>sites<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>number<sp/>of<sp/>twosite<sp/>hamiltonians:<sp/>{}.<sp/>Expected<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hams_2site.size(),<sp/>sites<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>time_evolution_operators;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>time_evolution_operators.reserve(sites<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;h<sp/>:<sp/>hams_2site)<sp/>time_evolution_operators.emplace_back(<ref refid="namespaceqm_1_1lbit_1a2081e2929836299159b068a873a5933e" kindref="member">get_time_evolution_operator</ref>(delta_t,<sp/>h));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_evolution_operators;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="namespaceqm_1_1lbit_1a5b046395c2977c1bdd3fcb16c73e6f52" refkind="member"><highlight class="normal">std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/><ref refid="namespaceqm_1_1lbit_1a5b046395c2977c1bdd3fcb16c73e6f52" kindref="member">qm::lbit::get_time_evolution_operators_3site</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/><ref refid="namespaceqm_1a7b9394b4ad3ba7d7b39a09e2ef62be32" kindref="member">cplx</ref><sp/>delta_t,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>&amp;hams_3site)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>l-bit<sp/>systems<sp/>we<sp/>are<sp/>aldready<sp/>in<sp/>a<sp/>diagonal<sp/>basis,<sp/>so<sp/>h_{i,j,k}<sp/>and<sp/>h_{l,m,n}<sp/>commute.<sp/>Therefore<sp/>we<sp/>can<sp/>immediately<sp/>use<sp/>the<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exp(A<sp/>+<sp/>B)<sp/>=<sp/>exp(A)exp(B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>passing<sp/>through<sp/>the<sp/>Suzuki-Trotter<sp/>decomposition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hams_3site.size()<sp/>!=<sp/>sites<sp/>-<sp/>2)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>number<sp/>of<sp/>three-site<sp/>hamiltonians:<sp/>{}.<sp/>Expected<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>hams_3site.size(),<sp/>sites<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>time_evolution_operators;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>time_evolution_operators.reserve(sites<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;h<sp/>:<sp/>hams_3site)<sp/>time_evolution_operators.emplace_back(<ref refid="namespaceqm_1_1lbit_1a2081e2929836299159b068a873a5933e" kindref="member">get_time_evolution_operator</ref>(delta_t,<sp/>h));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_evolution_operators;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="namespaceqm_1_1lbit_1aeafdd382b8567fd458e12fcf1638ddf5" refkind="member"><highlight class="normal"><ref refid="namespaceqm_1a918c5d37486420c19db4a2686e3a7eec" kindref="member">qm::Scalar</ref><sp/><ref refid="namespaceqm_1_1lbit_1aeafdd382b8567fd458e12fcf1638ddf5" kindref="member">qm::lbit::get_lbit_exp_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;qm::Gate&gt;&gt;<sp/>&amp;unitary_layers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Eigen::Matrix2cd</ref><sp/>&amp;tau,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos_tau,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1a18de8671b35c5012fa791969b884df02" kindref="member">Eigen::Matrix2cd</ref><sp/>&amp;sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos_sig)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>gates<sp/>for<sp/>the<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Computing<sp/>Trace<sp/>(tau_{}<sp/>sig_{})&quot;</highlight><highlight class="normal">,<sp/>pos_tau,<sp/>pos_sig);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>tau_gate<sp/>=<sp/>qm::Gate{tau,<sp/>{pos_tau},<sp/>{2l}};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>sig_gate<sp/>=<sp/>qm::Gate{sig,<sp/>{pos_sig},<sp/>{2l}};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tau_gate<sp/>=<sp/><ref refid="classqm_1_1_gate" kindref="compound">qm::Gate</ref>(tau,<sp/>{pos_tau},<sp/>{2l});</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sig_gate<sp/>=<sp/><ref refid="classqm_1_1_gate" kindref="compound">qm::Gate</ref>(sig,<sp/>{pos_sig},<sp/>{2l});</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/><sp/><sp/>=<sp/>tau_gate;<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>the<sp/>bottom<sp/>tau<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc2<sp/>=<sp/><ref refid="namespaceqm_1acfc9b545e958f98b3892f004c9a38be5" kindref="member">qm::get_lightcone_intersection</ref>(unitary_layers,<sp/>pos_tau,<sp/>pos_sig);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deb<sp/>=<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;level()<sp/>&lt;=<sp/><ref refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" kindref="member">spdlog::level::debug</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>net;<sp/></highlight><highlight class="comment">//<sp/>Great<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>;<sp/></highlight><highlight class="comment">//<sp/>Great<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty_layer;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uw<sp/>=<sp/>7;<sp/></highlight><highlight class="comment">//<sp/>Width<sp/>of<sp/>a<sp/>unitary<sp/>2-site<sp/>gate<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>Overlap<sp/>of<sp/>a<sp/>unitary<sp/>2-site<sp/>gate<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw<sp/>=<sp/>6;<sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[idx_layer,<sp/>layer]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(unitary_layers))<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(layer.empty())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>gate_size<sp/><sp/><sp/><sp/><sp/>=<sp/>layer.front().pos.size();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos_max<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::max(layer.front().pos.back(),<sp/>layer.back().pos.back());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>gate_sequence<sp/>=<sp/><ref refid="namespaceqm_1a68dcee1c9dc776f82f24084e9767ba73" kindref="member">qm::get_gate_sequence</ref>(layer);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb<sp/>and<sp/>net.empty())<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str_tau<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;[{}]&quot;</highlight><highlight class="normal">,<sp/>pos_tau);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty_layer<sp/><sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{0:^{1}}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>tw<sp/>+<sp/>pos_max<sp/>*<sp/>(uw<sp/>-<sp/>op)<sp/>+<sp/>op);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.emplace_back(empty_layer);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.back().replace(0,<sp/>tw,<sp/></highlight><highlight class="stringliteral">&quot;tau<sp/><sp/>:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.back().replace(tw<sp/>+<sp/>pos_tau<sp/>*<sp/>(uw<sp/>-<sp/>op),<sp/>str_tau.size(),<sp/>str_tau);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>.emplace_back(fmt::format(</highlight><highlight class="stringliteral">&quot;insert<sp/>tau[{}]<sp/>now{}&quot;</highlight><highlight class="normal">,<sp/>pos_tau,<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[idx_sublayer,<sp/>seq]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(gate_sequence))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>layer_str<sp/>=<sp/>empty_layer;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>story_str;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[idx_seq,<sp/>pos_gate]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(seq))<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;u<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>layer.at(pos_gate);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>idx_sublayer<sp/>=<sp/>num::mod&lt;size_t&gt;(pos_gate,<sp/>gate_size);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>layer_str.replace(0,<sp/>tw,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;u[{:^2}]:&quot;</highlight><highlight class="normal">,<sp/>2<sp/>*<sp/>idx_layer<sp/>+<sp/>idx_sublayer));<sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>layer<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>through<sp/>the<sp/>sequence<sp/>first<sp/>forward,<sp/>then<sp/>backward,<sp/>we<sp/>are<sp/>handed<sp/>u<sp/>gates<sp/>which<sp/>may<sp/>or<sp/>may<sp/>not<sp/>connect<sp/>to<sp/>our<sp/>current<sp/>g<sp/>gate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>successful<sp/>connection,<sp/>at<sp/>least<sp/>one<sp/>pos<sp/>in<sp/>g<sp/>should<sp/>be<sp/>present<sp/>in<sp/>u<sp/>gate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>connecting<sp/>a<sp/>full<sp/>layer,<sp/>trace<sp/>away<sp/>legs<sp/>of<sp/>g<sp/>that<sp/>are<sp/>outside<sp/>of<sp/>the<sp/>light-cone<sp/>intersection<sp/>between<sp/>tau<sp/>and<sp/>sigma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>g.pos<sp/>and<sp/>u.pos<sp/>have<sp/>sites<sp/>in<sp/>common</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>pos_isect;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set_intersection(g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.begin(),<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.end(),<sp/>u.pos.begin(),<sp/>u.pos.end(),<sp/>back_inserter(pos_isect));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>pos_isect.empty())<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>matching<sp/>u.<sp/>Connect<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_old<sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a0f1adc8ec11737fc9a019b6005937c5a" kindref="member">insert</ref>(u);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer_str.replace(tw<sp/>+<sp/>u.pos.front()<sp/>*<sp/>(uw<sp/>-<sp/>op),<sp/>uw,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;[{1:^{0}}]&quot;</highlight><highlight class="normal">,<sp/>uw<sp/>-<sp/>2,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{:&lt;2},{:&gt;2}&quot;</highlight><highlight class="normal">,<sp/>u.pos.front(),<sp/>u.pos.back())));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>story_str.append(fmt::format(</highlight><highlight class="stringliteral">&quot;insert<sp/>u{}<sp/>&quot;</highlight><highlight class="normal">,<sp/>u.pos));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>positions<sp/>that<sp/>are<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;pos_needed<sp/>=<sp/>lc2[2<sp/>*<sp/>idx_layer<sp/>+<sp/>idx_sublayer<sp/>+<sp/>1];<sp/></highlight><highlight class="comment">//<sp/>This<sp/>specifies<sp/>sites<sp/>that<sp/>are<sp/>needed<sp/>to<sp/>connect<sp/>the<sp/>coming<sp/>gate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(not<sp/>pos_needed.empty()){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>g.pos<sp/>has<sp/>non-needed<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>pos_outside;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set_difference(g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.begin(),<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.end(),<sp/>pos_needed.begin(),<sp/>pos_needed.end(),<sp/>back_inserter(pos_outside));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>pos_outside.empty())<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>positions<sp/>outside<sp/>of<sp/>the<sp/>light<sp/>cone.<sp/>Trace<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_old<sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a3030d57a5040e76c0217d5e7937631e4" kindref="member">trace_pos</ref>(pos_outside);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>pos_outside)<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref><sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref><sp/>*<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref>.constant(0.5);<sp/></highlight><highlight class="comment">//<sp/>Normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>story_str.append(fmt::format(</highlight><highlight class="stringliteral">&quot;trace{}<sp/>&quot;</highlight><highlight class="normal">,<sp/>pos_outside));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>story_str.append(fmt::format(</highlight><highlight class="stringliteral">&quot;now{}<sp/>&quot;</highlight><highlight class="normal">,<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>net.emplace_back(layer_str);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>.emplace_back(story_str);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1a918c5d37486420c19db4a2686e3a7eec" kindref="member">Scalar</ref><sp/>result;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref>.dimension(0)<sp/>*<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref>.dimension(1)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Expected<sp/>empty<sp/>gate<sp/>to<sp/>have<sp/>scalar<sp/>op:<sp/>Got<sp/>dims<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref>.dimensions()));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a2a3ead2ca14d76d3a684e10c7b2a4914" kindref="member">op</ref>.coeff(0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>net.emplace_back(empty_layer);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>net.back().replace(0,<sp/>tw,<sp/></highlight><highlight class="stringliteral">&quot;sig<sp/><sp/>:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>.emplace_back(fmt::format(</highlight><highlight class="stringliteral">&quot;sigma<sp/>not<sp/>connected<sp/>-&gt;<sp/>result<sp/>=<sp/>{:.1f}{:+.1f}i&quot;</highlight><highlight class="normal">,<sp/>result.real(),<sp/>result.imag()));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>last<sp/>step<sp/>we<sp/>connect<sp/>the<sp/>sigma<sp/>operator<sp/>and<sp/>trace<sp/>everything<sp/>down<sp/>to<sp/>a<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_traces<sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>.size();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>g.<ref refid="classqm_1_1_gate_1a0a4d3257af3e71f140bc0fdc3a7224c7" kindref="member">connect_under</ref>(sig_gate).<ref refid="classqm_1_1_gate_1a44b9ad485ee722b6fa7056b684cd5b3a" kindref="member">trace</ref>();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/>std::pow(0.5,<sp/>num_traces);<sp/></highlight><highlight class="comment">//<sp/>Normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str_sig<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;[{}]&quot;</highlight><highlight class="normal">,<sp/>pos_sig);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.emplace_back(empty_layer);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.back().replace(0,<sp/>tw,<sp/></highlight><highlight class="stringliteral">&quot;sig<sp/><sp/>:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net.back().replace(tw<sp/>+<sp/>pos_sig<sp/>*<sp/>(uw<sp/>-<sp/>op),<sp/>str_sig.size(),<sp/>str_sig);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>.emplace_back(fmt::format(</highlight><highlight class="stringliteral">&quot;insert<sp/>sigma[{0}]<sp/>now{1}<sp/>trace{1}<sp/>result<sp/>=<sp/>{2:.1f}{3:+.1f}i&quot;</highlight><highlight class="normal">,<sp/>pos_sig,<sp/>g.<ref refid="classqm_1_1_gate_1a2cca439499d18a004ffadb3f7a94bf8a" kindref="member">pos</ref>,<sp/>result.real(),<sp/>result.imag()));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Computed<sp/>Trace<sp/>(tau_{}<sp/>sig_{})<sp/>=<sp/>{:.6f}{:+.6f}i&quot;</highlight><highlight class="normal">,<sp/>pos_tau,<sp/>pos_sig,<sp/>result.real(),<sp/>result.imag());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deb)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/>layer]<sp/>:<sp/><ref refid="namespaceiter_1a605fa4c3009fb342939e6bb7c38d8ba3" kindref="member">iter::enumerate_reverse</ref>(net))<sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;{}<sp/>|<sp/>log:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>layer,<sp/><ref refid="namespaceeig_1ae96cb5c133e7edfc21bb951904f03b3b" kindref="member">log</ref>[<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>]);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="namespaceqm_1_1lbit_1a8255ce0fc910a60db71422ea73959fd8" refkind="member"><highlight class="normal">Eigen::Tensor&lt;qm::Scalar,<sp/>2&gt;<sp/><ref refid="namespaceqm_1_1lbit_1a8255ce0fc910a60db71422ea73959fd8" kindref="member">qm::lbit::get_lbit_real_overlap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;qm::Gate&gt;&gt;<sp/>&amp;unitary_layers,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;qm::Scalar,<sp/>2&gt;<sp/>lbit_overlap;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>lbit_overlap.resize(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sites),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sites));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lbit_overlap.dimension(1);<sp/>j++)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lbit_overlap.dimension(0);<sp/>i++)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbit_overlap(i,<sp/>j)<sp/>=</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1lbit_1aeafdd382b8567fd458e12fcf1638ddf5" kindref="member">qm::lbit::get_lbit_exp_value</ref>(unitary_layers,<sp/><ref refid="namespaceqm_1_1spin_half_1ac450a6ccd34bddc24f807f0b3a97ea5f" kindref="member">qm::spinHalf::sz</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i),<sp/><ref refid="namespaceqm_1_1spin_half_1ac450a6ccd34bddc24f807f0b3a97ea5f" kindref="member">qm::spinHalf::sz</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(j));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lbit_overlap;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="namespaceqm_1_1lbit_1a3a7d977881a529d35670469d830f9494" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespaceqm_1_1lbit_1a3a7d977881a529d35670469d830f9494" kindref="member">qm::lbit::get_lbit_overlap_permuted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;lbit_overlap)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>subtract<sp/>the<sp/>center<sp/>position<sp/>of<sp/>each<sp/>lbit,<sp/>so<sp/>we<sp/>get<sp/>L<sp/>lbits<sp/>centered<sp/>around<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>practice,<sp/>we<sp/>make<sp/>a<sp/>cyclic<sp/>permutation<sp/>of<sp/>the<sp/>rows<sp/>of<sp/>lbit_overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>addition,<sp/>we<sp/>mirror<sp/>the<sp/>lbit<sp/>along<sp/>its<sp/>vertical,<sp/>so<sp/>that<sp/>we<sp/>can<sp/>average<sp/>its<sp/>left<sp/>and<sp/>right<sp/>half<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>lbit_overlap.dimension(0);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols<sp/>=<sp/>lbit_overlap.dimension(1);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>lbit_overlap_permuted(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>lbit_overlap_permuted.setConstant(0);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cols;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>i<sp/>&lt;<sp/>j,<sp/>this<sp/>corresponds<sp/>to<sp/>the<sp/>left<sp/>side<sp/>of<sp/>an<sp/>lbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Consider<sp/>i<sp/>==<sp/>j<sp/>to<sp/>be<sp/>&quot;origo&quot;<sp/>for<sp/>an<sp/>lbit,<sp/>so<sp/>mod(i+j,cols)<sp/>becomes<sp/>the<sp/>index<sp/>starting<sp/>from<sp/>that<sp/>origo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>addition,<sp/>we<sp/>fold<sp/>the<sp/>left<sp/>side<sp/>of<sp/>an<sp/>lbit<sp/>back<sp/>onto<sp/>the<sp/>right<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>the<sp/>correct<sp/>average,<sp/>add<sp/>just<sp/>half<sp/>of<sp/>the<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j_twin<sp/><sp/><sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::abs(i<sp/>-<sp/>j);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j_perm<sp/><sp/><sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&gt;=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_twin<sp/>=<sp/>i<sp/>-<sp/>distance;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j_twin<sp/>&lt;<sp/>0)<sp/>j_twin<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_twin<sp/>=<sp/>i<sp/>+<sp/>distance;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j_twin<sp/>&gt;=<sp/>cols)<sp/>j_twin<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;({:&gt;2},{:&gt;2}):<sp/>twin<sp/>({:&gt;2},{:&gt;2})<sp/>|<sp/>perm<sp/>=<sp/>({:&gt;2},{:&gt;2})<sp/>|<sp/>values<sp/>{:.6f},<sp/>{:.6f}<sp/>=<sp/>{:.6f}&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>j,<sp/>i,<sp/>j_twin,<sp/>i,<sp/>j_perm,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(lbit_overlap(i,<sp/>j)),<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(lbit_overlap(i,<sp/>j_twin)),</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>(<ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(lbit_overlap(i,<sp/>j))<sp/>+<sp/><ref refid="ceres__subspace__hamiltonian_8cpp_1aedc0ad84d1e764530814f57ad931d02a" kindref="member">std::real</ref>(lbit_overlap(i,<sp/>j_twin))));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(std::imag(lbit_overlap(i,<sp/>j)))<sp/>&gt;<sp/>1e-12)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;lbit_overlap({},{})<sp/>has<sp/>imaginary<sp/>component<sp/>:<sp/>|Im({})|<sp/>&gt;<sp/>1e-12&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>j,<sp/>lbit_overlap(i,<sp/>j));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbit_overlap_permuted(i,<sp/>j_perm)<sp/>=<sp/>0.5<sp/>*<sp/>(lbit_overlap(i,<sp/>j)<sp/>+<sp/>lbit_overlap(i,<sp/>j_twin));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lbit_overlap_permuted;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="namespaceqm_1_1lbit_1aabd44cbb11351a91895fe6cbf8d5142a" refkind="member"><highlight class="normal">std::tuple&lt;double,<sp/>double,<sp/>std::vector&lt;double&gt;,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/><ref refid="namespaceqm_1_1lbit_1aabd44cbb11351a91895fe6cbf8d5142a" kindref="member">qm::lbit::get_characteristic_length_scale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>&amp;lbit_overlap_permuted)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Average<sp/>along<sp/>each<sp/>column<sp/>to<sp/>get<sp/>an<sp/>estimate<sp/>of<sp/>the<sp/>lbit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;double,<sp/>1&gt;<sp/>lbit_overlap_avg<sp/>=<sp/>lbit_overlap_permuted.real().mean(std::array&lt;long,<sp/>1&gt;{0});</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;double,<sp/>1&gt;<sp/>lbit_overlap_log<sp/>=<sp/>lbit_overlap_avg.log();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>becomes<sp/>noisy<sp/>if<sp/>the<sp/>exponential<sp/>has<sp/>decayed,<sp/>so<sp/>find<sp/>a<sp/>cutoff<sp/>to<sp/>get<sp/>the<sp/>slope<sp/>using<sp/>only<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::vector&lt;double&gt;(lbit_overlap_log.data(),<sp/>lbit_overlap_log.data()<sp/>+<sp/>lbit_overlap_log.size());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>num::range&lt;double&gt;(0,<sp/>y.size());</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacestat_1a7bc2ef6fe2b107b9a6d0458978fd4065" kindref="member">stat::find_last_valid_point</ref>(y);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::count_if(y.begin(),<sp/>y.begin()<sp/>+<sp/>v,<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;val)<sp/>{<sp/>return<sp/>val<sp/>&gt;<sp/>-12.0;<sp/>});</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[<ref refid="namespacestat_1a798a4d2402254288245290d3398614cc" kindref="member">slope</ref>,<sp/>res]<sp/>=<sp/><ref refid="namespacestat_1a798a4d2402254288245290d3398614cc" kindref="member">stat::slope</ref>(x,<sp/>y,<sp/>0,<sp/>c);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;lbit<sp/>overlap<sp/>:<sp/>\n{}&quot;,<sp/>linalg::tensor::to_string(lbit_overlap.real(),<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;lbit<sp/>permuted:<sp/>\n{}&quot;,<sp/>linalg::tensor::to_string(lbit_overlap_permuted,<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;lbit<sp/>averaged:<sp/>\n{}&quot;,<sp/>linalg::tensor::to_string(lbit_overlap_average,<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;lbit<sp/>logged<sp/><sp/>:<sp/>\n{}&quot;,<sp/>linalg::tensor::to_string(lbit_overlap_log,<sp/>6));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tools::log-&gt;debug(&quot;lbit<sp/>vectored:<sp/>\n{}&quot;,<sp/>y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cls<sp/>=<sp/>1.0<sp/>/<sp/>std::abs(<ref refid="namespacestat_1a798a4d2402254288245290d3398614cc" kindref="member">slope</ref>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Computed<sp/>lbit<sp/>width<sp/>{:.6f}<sp/>|<sp/>sse<sp/>{:.6f}<sp/>|<sp/>using<sp/>{}<sp/>points&quot;</highlight><highlight class="normal">,<sp/>cls,<sp/>res,<sp/>c);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>yavg<sp/>=<sp/>std::vector&lt;double&gt;(lbit_overlap_avg.data(),lbit_overlap_avg.data()<sp/>+<sp/>c);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yavg<sp/>=<sp/>std::vector&lt;double&gt;(lbit_overlap_avg.data(),<sp/>lbit_overlap_avg.data()<sp/>+<sp/>lbit_overlap_avg.size());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{cls,<sp/>res,<sp/>yavg,<sp/>c};</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="namespaceqm_1_1lbit_1abfe5cc643a2dbdb563cadfd3b937cdd5" refkind="member"><highlight class="normal">Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/><ref refid="namespaceqm_1_1lbit_1abfe5cc643a2dbdb563cadfd3b937cdd5" kindref="member">qm::lbit::get_lbit_overlap_averaged</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>&amp;lbit_overlap_vec)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>2&gt;<sp/>avg;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,2&gt;<sp/>err;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>lbit_overlap_vec.empty())<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>lbit_overlap_vec.front().dimension(0);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols<sp/>=<sp/>lbit_overlap_vec.front().dimension(1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reps<sp/>=<sp/>lbit_overlap_vec.size();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Scalar&gt;<sp/>slice(reps);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg.resize(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>cols;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[i,<sp/>elem]<sp/>:<sp/><ref refid="namespaceiter_1aa13063344fcd21c395fe1c4c2ea6e9a0" kindref="member">iter::enumerate</ref>(lbit_overlap_vec))<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(std::imag(elem(r,<sp/>c)))<sp/>&gt;<sp/>1e-12)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;elem[{}]({},{})<sp/>has<sp/>imaginary<sp/>component<sp/>:<sp/>|Im({})|<sp/>&gt;<sp/>1e-12&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>r,<sp/>c,<sp/>elem(r,<sp/>c));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice[i]<sp/>=<sp/>elem(r,<sp/>c);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg(r,<sp/>c)<sp/>=<sp/><ref refid="namespacestat_1a2a94076e6fe025187ae3ae92faaaf005" kindref="member">stat::mean</ref>(slice);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(r,c)<sp/>=<sp/>stat::sterr(slice);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>{avg,err};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal">std::tuple&lt;Eigen::MatrixXd,<sp/>Eigen::MatrixXd,<sp/>Eigen::Tensor&lt;double,<sp/>3&gt;,Eigen::Tensor&lt;double,<sp/>4&gt;&gt;</highlight></codeline>
<codeline lineno="594" refid="namespaceqm_1_1lbit_1ab0c5871b97ed575c7e288c922d64160b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1lbit_1ab0c5871b97ed575c7e288c922d64160b" kindref="member">qm::lbit::get_lbit_analysis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;udepth_vec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;fmix_vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reps)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fmix_vec.size());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(udepth_vec.size());</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls_avg(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls_err(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sse_avg(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_eigen_1a41bc7020fd92c399733d9e5b815f0b10" kindref="member">Eigen::MatrixXd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sse_err(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;double,<sp/>3&gt;<sp/>lbit_decay(rows,<sp/>cols,<sp/>sites);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;double,<sp/>4&gt;<sp/>lbit_lioms(rows,<sp/>cols,<sp/>sites,<sp/>sites);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>lbit_decay.setZero();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>lbit_lioms.setZero();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>3&gt;<sp/>offset3{},<sp/>extent3{};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>offset4{},<sp/>extent4{};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>collapse(2)<sp/>schedule(dynamic)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>uidx<sp/>=<sp/>0;<sp/>uidx<sp/>&lt;<sp/>udepth_vec.size();<sp/>uidx++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fidx<sp/>=<sp/>0;<sp/>fidx<sp/>&lt;<sp/>fmix_vec.size();<sp/>fidx++)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for(const<sp/>auto<sp/>&amp;<sp/>[uidx,udep]<sp/>:<sp/>iter::enumerate(udepth_vec)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto<sp/>&amp;<sp/>[fidx,fmix]<sp/>:<sp/>iter::enumerate(fmix_vec)<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmix<sp/>=<sp/>fmix_vec[fidx];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>udep<sp/>=<sp/>udepth_vec[uidx];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls_vec(reps);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sse_vec(reps);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>2&gt;&gt;<sp/>lbit_overlap_vec(reps);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>reps;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;qm::Gate&gt;&gt;<sp/>layers;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>udep;<sp/>l++)<sp/>layers.emplace_back(<ref refid="namespaceqm_1_1lbit_1a15c037630f73196f45e6efd078f07719" kindref="member">qm::lbit::get_unitary_2gate_layer</ref>(sites,<sp/>fmix));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbit_overlap_vec[i]<sp/>=<sp/><ref refid="namespaceqm_1_1lbit_1a8255ce0fc910a60db71422ea73959fd8" kindref="member">qm::lbit::get_lbit_real_overlap</ref>(layers,<sp/>sites);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lbit_overlap_avg<sp/>=<sp/><ref refid="namespaceqm_1_1lbit_1abfe5cc643a2dbdb563cadfd3b937cdd5" kindref="member">qm::lbit::get_lbit_overlap_averaged</ref>(lbit_overlap_vec);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lbit_overlap_per<sp/>=<sp/><ref refid="namespaceqm_1_1lbit_1a3a7d977881a529d35670469d830f9494" kindref="member">qm::lbit::get_lbit_overlap_permuted</ref>(lbit_overlap_avg);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[cls,<sp/>sse,<sp/>y,<sp/>c]<sp/>=<sp/><ref refid="namespaceqm_1_1lbit_1aabd44cbb11351a91895fe6cbf8d5142a" kindref="member">qm::lbit::get_characteristic_length_scale</ref>(lbit_overlap_per);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_OPENMP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Computed<sp/>u<sp/>{}<sp/>|<sp/>f<sp/>{:.4f}<sp/>|<sp/>lbit<sp/>width<sp/>{:.6f}<sp/>|<sp/>sse<sp/>{:.6f}<sp/>|<sp/>threads<sp/>{}<sp/>|<sp/>points<sp/>{}:<sp/>{:.8f}&quot;</highlight><highlight class="normal">,<sp/>udep,<sp/>fmix,<sp/>cls,<sp/>sse,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omp_get_num_threads(),<sp/>c,<sp/>fmt::join(y,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Computed<sp/>u<sp/>{}<sp/>|<sp/>f<sp/>{:.4f}<sp/>|<sp/>lbit<sp/>width<sp/>{:.6f}<sp/>|<sp/>sse<sp/>{:.6f}<sp/>|<sp/>points<sp/>{}:<sp/>{:.8f}&quot;</highlight><highlight class="normal">,<sp/>udep,<sp/>fmix,<sp/>cls,<sp/>sse,<sp/>c,<sp/>fmt::join(y,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls_avg(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fidx),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uidx))<sp/>=<sp/>cls;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sse_avg(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fidx),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uidx))<sp/>=<sp/>sse;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fidx),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uidx),<sp/>0};</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{1,<sp/>1,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y.size())};</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fidx),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uidx),<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{1,<sp/>1,<sp/>lbit_overlap_avg.dimension(0),<sp/>lbit_overlap_avg.dimension(1)};</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbit_decay.slice(offset3,<sp/>extent3)<sp/>=<sp/>Eigen::TensorMap&lt;Eigen::Tensor&lt;double,<sp/>1&gt;&gt;(y.data(),<sp/>y.size());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbit_lioms.slice(offset4,<sp/>extent4)<sp/>=<sp/>lbit_overlap_avg.real().reshape(extent4);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{cls_avg,<sp/>sse_avg,<sp/>lbit_decay,<sp/>lbit_lioms};</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="namespaceqm_1_1mpo_1aab28c1bf9fc2265100e07a10219219b4" refkind="member"><highlight class="normal">std::tuple&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;<sp/><ref refid="namespaceqm_1_1mpo_1aab28c1bf9fc2265100e07a10219219b4" kindref="member">qm::mpo::pauli_mpo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;paulimatrix)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>paulimatrix.rows();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent2<sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO(1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO.setZero();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(MPO,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="680" refid="namespaceqm_1_1mpo_1a31cb135a8b7fc64fc83d01c6372b06c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a31cb135a8b7fc64fc83d01c6372b06c0" kindref="member">qm::mpo::parity_projector_mpos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;paulimatrix,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>paulimatrix.rows();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::MatrixXcd::Identity(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>).eval();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent2<sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO(2,<sp/>2,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO.setZero();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(I);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO.slice(std::array&lt;long,<sp/>4&gt;{1,<sp/>1,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos(sites,<sp/>MPO);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>0.5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>1)<sp/>=<sp/>0.5<sp/>*<sp/>sign;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="721" refid="namespaceqm_1_1mpo_1a92b8000f9d534c88052b993f37db1e79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a92b8000f9d534c88052b993f37db1e79" kindref="member">qm::mpo::random_pauli_mpos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;paulimatrix,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>paulimatrix.rows();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent2<sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_I(1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_S(1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.setZero();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.setZero();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>(Eigen::MatrixXcd::Identity(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>push<sp/>in<sp/>an<sp/>even<sp/>number<sp/>of<sp/>pauli<sp/>matrices<sp/>to<sp/>retain<sp/>the<sp/>parity<sp/>sector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choosing<sp/>randomly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>binary(sites,<sp/>-1);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary[rnd::uniform_integer_box&lt;size_t&gt;(0,<sp/>sites)]<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>std::accumulate(binary.begin(),<sp/>binary.end(),<sp/>0);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>0<sp/>and<sp/>sum<sp/>==<sp/>0)<sp/>or<sp/>(num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>1<sp/>and<sp/>sum<sp/>==<sp/>1))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;val<sp/>:<sp/>binary)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_S);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_I);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="773" refid="namespaceqm_1_1mpo_1a6b516ae6840d502b90df7cbf96208c75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a6b516ae6840d502b90df7cbf96208c75" kindref="member">qm::mpo::random_pauli_mpos_x2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;paulimatrix1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref><sp/>&amp;paulimatrix2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(paulimatrix1.rows()<sp/>!=<sp/>paulimatrix2.rows())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Pauli<sp/>matrices<sp/>must<sp/>be<sp/>of<sp/>equal<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>paulimatrix1.rows();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::MatrixXcd::Identity(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>).eval();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent2<sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_S(2,<sp/>2,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_I(2,<sp/>2,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_P(2,<sp/>2,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.setZero();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.setZero();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_P.setZero();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix1);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.slice(std::array&lt;long,<sp/>4&gt;{1,<sp/>1,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix2);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(I);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.slice(std::array&lt;long,<sp/>4&gt;{1,<sp/>1,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(I);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_P.slice(std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(I);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_P.slice(std::array&lt;long,<sp/>4&gt;{1,<sp/>1,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrix1);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>in<sp/>an<sp/>even<sp/>number<sp/>of<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>binary(sites,<sp/>-1);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary[rnd::uniform_integer_box&lt;size_t&gt;(0,<sp/>sites)]<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>std::accumulate(binary.begin(),<sp/>binary.end(),<sp/>0);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>0<sp/>and<sp/>sum<sp/>==<sp/>0)<sp/>or<sp/>(num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>1<sp/>and<sp/>sum<sp/>==<sp/>1))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binary.size()<sp/>!=<sp/>sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;val<sp/>:<sp/>binary)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_S);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_I);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(2);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(2);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="841" refid="namespaceqm_1_1mpo_1ac31d8bcaedce2c5521574db45c0cd8cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a92b8000f9d534c88052b993f37db1e79" kindref="member">qm::mpo::random_pauli_mpos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Matrix2cd&gt;<sp/>&amp;paulimatrices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(paulimatrices.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;List<sp/>of<sp/>pauli<sp/>matrices<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_paulis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(paulimatrices.size());</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::MatrixXcd::Identity(<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>).eval();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent4<sp/><sp/><sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/><sp/><sp/><sp/><sp/><sp/>extent2<sp/><sp/><sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_S(num_paulis,<sp/>num_paulis,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_I(num_paulis,<sp/>num_paulis,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_S.setZero();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO_I.setZero();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>diag_pos<sp/>=<sp/>0;<sp/>diag_pos<sp/>&lt;<sp/>num_paulis;<sp/>diag_pos++)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPO_S.slice(std::array&lt;long,<sp/>4&gt;{diag_pos,<sp/>diag_pos,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(paulimatrices[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(diag_pos)]);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPO_I.slice(std::array&lt;long,<sp/>4&gt;{diag_pos,<sp/>diag_pos,<sp/>0,<sp/>0},<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a3087116f15e45dc51ccef75506151be5" kindref="member">Textra::TensorMap</ref>(I);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>in<sp/>an<sp/>even<sp/>number<sp/>of<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>so<sp/>that<sp/>we<sp/>get<sp/>a<sp/>50%<sp/>chance<sp/>of<sp/>applying<sp/>a<sp/>gate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>binary(sites,<sp/>-1);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary[rnd::uniform_integer_box&lt;size_t&gt;(0,<sp/>sites<sp/>-<sp/>1)]<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>std::accumulate(binary.begin(),<sp/>binary.end(),<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>0<sp/>and<sp/>sum<sp/>==<sp/>0)<sp/>or<sp/>(num::mod&lt;size_t&gt;(sites,<sp/>2)<sp/>==<sp/>1<sp/>and<sp/>sum<sp/>==<sp/>1))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binary.size()<sp/>!=<sp/>sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Size<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos_str;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;val<sp/>:<sp/>binary)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_S);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos_str.emplace_back(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.push_back(MPO_I);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos_str.emplace_back(</highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;warn(</highlight><highlight class="stringliteral">&quot;Generated<sp/>random<sp/>pauli<sp/>MPO<sp/>string:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>mpos_str);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>num_paulis);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>num_paulis);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(num_paulis);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(num_paulis);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="915" refid="namespaceqm_1_1mpo_1a1cd78f42cac8af8ad395523a0cb5fef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a1cd78f42cac8af8ad395523a0cb5fef8" kindref="member">qm::mpo::sum_of_pauli_mpo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Matrix2cd&gt;<sp/>&amp;paulimatrices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites,<sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5" kindref="member">RandomizerMode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(paulimatrices.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;List<sp/>of<sp/>pauli<sp/>matrices<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>extent4<sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/>extent2<sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>offset4<sp/><sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pauli_idx<sp/>=<sp/>num::range&lt;size_t&gt;(0,<sp/>paulimatrices.size(),<sp/>1);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>0;<sp/>site<sp/>&lt;<sp/>sites;<sp/>site++)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>mpo;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(mode)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5a2d5127b8139f1f5f1086c4053324733a" kindref="member">RandomizerMode::SELECT1</ref>:<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.resize(1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.setZero();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd_idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rnd::uniform_integer_box&lt;size_t&gt;(0,<sp/>paulimatrices.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pauli<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>paulimatrices[rnd_idx];</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.slice(offset4,<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>(pauli);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5a790b1468c0b9fb28fa9317ce7dd5fe6a" kindref="member">RandomizerMode::SHUFFLE</ref>:<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacernd_1a6d76c7bbaa15f2f3ed93f9723cfc9047" kindref="member">rnd::shuffle</ref>(pauli_idx);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[fallthrough]];</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5af0bbe167a0195d9e9e25a922a8588ed9" kindref="member">RandomizerMode::ASIS</ref>:<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_paulis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(paulimatrices.size());</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.resize(num_paulis,<sp/>num_paulis,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/>num_paulis;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uidx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pauli<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>paulimatrices[pauli_idx[uidx]];</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpo.slice(offset4,<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>(pauli);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.emplace_back(mpo);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(mode)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5a790b1468c0b9fb28fa9317ce7dd5fe6a" kindref="member">RandomizerMode::SHUFFLE</ref>:</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5af0bbe167a0195d9e9e25a922a8588ed9" kindref="member">RandomizerMode::ASIS</ref>:<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ledge.resize(1,<sp/>1,<sp/>paulimatrices.size());</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Redge.resize(1,<sp/>1,<sp/>paulimatrices.size());</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/>paulimatrices.size();<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(paulimatrices.size());</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="config_2enums_8h_1a97e56591b206f0b9aaf7d78cfd92c8c5a2d5127b8139f1f5f1086c4053324733a" kindref="member">RandomizerMode::SELECT1</ref>:<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">std::tuple&lt;std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;,<sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;&gt;</highlight></codeline>
<codeline lineno="1016" refid="namespaceqm_1_1mpo_1a0d2793fa28c12c6b2844134f9d89c112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceqm_1_1mpo_1a92b8000f9d534c88052b993f37db1e79" kindref="member">qm::mpo::random_pauli_mpos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::Matrix2cd&gt;<sp/>&amp;paulimatrices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;uniform_dist_widths,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sites)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(paulimatrices.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;List<sp/>of<sp/>pauli<sp/>matrices<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(paulimatrices.size()<sp/>!=<sp/>uniform_dist_widths.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;List<sp/>size<sp/>mismatch:<sp/>paulimatrices<sp/>and<sp/>uniform_dist_widths&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_paulis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(paulimatrices.size());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/>extent4<sp/><sp/><sp/><sp/>=<sp/>{1,<sp/>1,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>2&gt;<sp/>extent2<sp/><sp/><sp/><sp/>=<sp/>{<ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Tensor&lt;Scalar,<sp/>4&gt;&gt;<sp/>mpos;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>site<sp/>=<sp/>0;<sp/>site<sp/>&lt;<sp/>sites;<sp/>site++)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>4&gt;<sp/>MPO_S(num_paulis,<sp/>num_paulis,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>,<sp/><ref refid="namespacesettings_1_1model_1_1ising__tf__rf_1a7fe0e9551891ad2c3388308f5dc9196c" kindref="member">spin_dim</ref>);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPO_S.setZero();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>=<sp/>0;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref><sp/>&lt;<sp/>num_paulis;<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uidx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>+<sp/><ref refid="namespacernd_1a69584859e820206050f500593a895201" kindref="member">rnd::uniform_double_box</ref>(uniform_dist_widths[uidx]);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::array&lt;long,<sp/>4&gt;{<ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/><ref refid="namespace_textra_1a1016341dbbd0dbced92875cd7ce7268e" kindref="member">idx</ref>,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;pauli<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>paulimatrices[uidx];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPO_S.slice(offset4,<sp/>extent4).reshape(extent2)<sp/>=<sp/><ref refid="namespace_textra_1a8647dc1884c205829ea3c78b5fbe3ad7" kindref="member">Textra::TensorCast</ref>(coeff<sp/>*<sp/>pauli);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpos.emplace_back(MPO_S);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>compatible<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Ledge(1,<sp/>1,<sp/>num_paulis);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>left<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Tensor&lt;Scalar,<sp/>3&gt;<sp/>Redge(1,<sp/>1,<sp/>num_paulis);<sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(num_paulis);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>Ledge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(num_paulis);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Redge(0,<sp/>0,<sp/>1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(mpos,<sp/>Ledge,<sp/>Redge);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>8<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/>16<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/>32<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/>32<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/>32<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/>32<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/>16<sp/><sp/><sp/>0<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//[<sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/>8<sp/>]</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/physics/nmspc_quantum_mechanics.cpp"/>
  </compounddef>
</doxygen>
