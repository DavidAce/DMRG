<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classclass___s_v_d" kind="class" language="C++" prot="public">
    <compoundname>class_SVD</compoundname>
    <includes refid="class__svd__wrapper_8h" local="no">class_svd_wrapper.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" prot="private" static="no">
        <type>Eigen::Matrix&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using class_SVD::MatrixType =  Eigen::Matrix&lt;Scalar,Eigen::Dynamic,Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="16" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" prot="private" static="no">
        <type>Eigen::Matrix&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, Eigen::Dynamic, 1 &gt;</type>
        <definition>using class_SVD::VectorType =  Eigen::Matrix&lt;Scalar,Eigen::Dynamic,1&gt;</definition>
        <argsstring></argsstring>
        <name>VectorType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="17" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classclass___s_v_d_1a53306a9b953e436bdb7b33200c32b048" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double class_SVD::SVDThreshold</definition>
        <argsstring></argsstring>
        <name>SVDThreshold</name>
        <initializer>= 1e-12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="14" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass___s_v_d_1a9845b5c64c2275e51c79d87cce6bc564" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double class_SVD::truncation_error</definition>
        <argsstring></argsstring>
        <name>truncation_error</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="15" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classclass___s_v_d_1a57c2d0856227b0933d8116a7f1ff7c4f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool class_SVD::use_lapacke</definition>
        <argsstring></argsstring>
        <name>use_lapacke</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="42" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classclass___s_v_d_1a972e614144e76de88b4495463a491860" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">VectorType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, long &gt;</type>
        <definition>template std::tuple&lt; class_SVD::MatrixType&lt; cplx &gt;, class_SVD::VectorType&lt; cplx &gt;, class_SVD::MatrixType&lt; cplx &gt;, long &gt; do_svd_lapacke</definition>
        <argsstring>(const Scalar *mat_ptr, long rows, long cols, long rank_max)</argsstring>
        <name>do_svd_lapacke</name>
        <param>
          <type>const <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> *</type>
          <declname>mat_ptr</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>long</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rank_max</declname>
        </param>
        <briefdescription>
<para>force instantiation of do_svd_lapacke for type &apos;std::complex&lt;double&gt;&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="21" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper_lapacke.cpp" bodystart="43" bodyend="111"/>
        <references refid="classclass___s_v_d_1a53306a9b953e436bdb7b33200c32b048" compoundref="class__svd__wrapper_8h" startline="14">SVDThreshold</references>
        <references refid="classclass___s_v_d_1a9845b5c64c2275e51c79d87cce6bc564" compoundref="class__svd__wrapper_8h" startline="15">truncation_error</references>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a37e231b39e0f40854ec0ee63790b99b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">VectorType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, long &gt;</type>
        <definition>template std::tuple&lt; class_SVD::MatrixType&lt; cplx &gt;, class_SVD::VectorType&lt; cplx &gt;, class_SVD::MatrixType&lt; cplx &gt;, long &gt; do_svd</definition>
        <argsstring>(const Scalar *mat_ptr, long rows, long cols, long rank_max)</argsstring>
        <name>do_svd</name>
        <param>
          <type>const <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> *</type>
          <declname>mat_ptr</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>long</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rank_max</declname>
        </param>
        <briefdescription>
<para>Performs SVD on a matrix This function is defined in cpp to avoid long compilation times when having Eigen::BDCSVD included everywhere in headers. Performs rigorous checks to ensure stability of DMRG. </para>        </briefdescription>
        <detaileddescription>
<para>force instantiation of do_svd for type &apos;std::complex&lt;double&gt;&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the matrix. Supported are double * and std::complex&lt;double&gt; * </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows of the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Columns of the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of singular values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The U, S, and V matrices (with S as a vector) extracted from the Eigen::BCDSVD SVD object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="26" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" bodystart="52" bodyend="120"/>
        <references refid="classclass___s_v_d_1a57c2d0856227b0933d8116a7f1ff7c4f" compoundref="class__svd__wrapper_8h" startline="42">use_lapacke</references>
        <references refid="classclass___s_v_d_1a53306a9b953e436bdb7b33200c32b048" compoundref="class__svd__wrapper_8h" startline="14">SVDThreshold</references>
        <references refid="classclass___s_v_d_1a9845b5c64c2275e51c79d87cce6bc564" compoundref="class__svd__wrapper_8h" startline="15">truncation_error</references>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1aec25da4eeeaf36ca6723a1106bcf1933" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">VectorType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, long &gt;</type>
        <definition>std::tuple&lt; class_SVD::MatrixType&lt; typename Derived::Scalar &gt;, class_SVD::VectorType&lt; typename Derived::Scalar &gt;, class_SVD::MatrixType&lt; typename Derived::Scalar &gt;, long &gt; class_SVD::do_svd</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat, long rank_max)</argsstring>
        <name>do_svd</name>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rank_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="30" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1aa4015b12214b465e6cd9709c75f4e328" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">VectorType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; typename <ref refid="infinite_2measure_8cpp_1a131d20d737c4fa1cb2d53d136f8c57ea" kindref="member">Derived::Scalar</ref> &gt;, long &gt;</type>
        <definition>std::tuple&lt; class_SVD::MatrixType&lt; typename Derived::Scalar &gt;, class_SVD::VectorType&lt; typename Derived::Scalar &gt;, class_SVD::MatrixType&lt; typename Derived::Scalar &gt;, long &gt; class_SVD::do_svd</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat)</argsstring>
        <name>do_svd</name>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="34" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="100" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classclass___s_v_d_1aff43b93da28d20df50cb11ee85bb475d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_SVD::class_SVD</definition>
        <argsstring>()=default</argsstring>
        <name>class_SVD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a70a15fb97a1af53d053ae02a407b2bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_SVD::get_truncation_error</definition>
        <argsstring>()</argsstring>
        <name>get_truncation_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="43" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" bodystart="33" bodyend="35"/>
        <references refid="classclass___s_v_d_1a9845b5c64c2275e51c79d87cce6bc564" compoundref="class__svd__wrapper_8h" startline="15">truncation_error</references>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a7568da355eba7526e68a51faf9545059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void class_SVD::setThreshold</definition>
        <argsstring>(double newThreshold)</argsstring>
        <name>setThreshold</name>
        <param>
          <type>double</type>
          <declname>newThreshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="44" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" bodystart="37" bodyend="39"/>
        <references refid="classclass___s_v_d_1a53306a9b953e436bdb7b33200c32b048" compoundref="class__svd__wrapper_8h" startline="14">SVDThreshold</references>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a02b392731862c3aae9d6be450964e099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;</type>
        <definition>template Eigen::Tensor&lt; cplx, 2 &gt; pseudo_inverse</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>pseudo_inverse</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>force instantiation of pseudo_inverse for type &apos;std::complex&lt;double&gt;&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="47" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a5a37f4c410540ca495bd41783abb6131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 2 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 2 &gt; &gt; class_SVD::decompose</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>decompose</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="51" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1ac08447697e913ccc4297b14c7a071222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 2 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 2 &gt; &gt; class_SVD::decompose</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor, const long chi_max)</argsstring>
        <name>decompose</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>chi_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="54" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a3f4c3e9979c30e2fc16a2161b7947e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;,<ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">VectorType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &gt;</type>
        <definition>std::tuple&lt; class_SVD::MatrixType&lt; Scalar &gt;,class_SVD::VectorType&lt; Scalar &gt;, class_SVD::MatrixType&lt; Scalar &gt; &gt; class_SVD::decompose</definition>
        <argsstring>(const MatrixType&lt; Scalar &gt; &amp;matrix)</argsstring>
        <name>decompose</name>
        <param>
          <type>const <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">MatrixType</ref>&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref> &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="58" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="142" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a9be5995e9e0a65c250b10b9ddd951c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 2 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 2 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 2 &gt; &gt; class_SVD::decompose</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;tensor, const long rows, const long cols)</argsstring>
        <name>decompose</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="62" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a3cf73c9f6ec470f77f6fbacfffd32792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 3 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 3 &gt; &gt; class_SVD::schmidt</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, rank &gt; &amp;tensor, long dL, long dR, long chiL, long chi_max, long chiR)</argsstring>
        <name>schmidt</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, rank &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>dL</declname>
        </param>
        <param>
          <type>long</type>
          <declname>dR</declname>
        </param>
        <param>
          <type>long</type>
          <declname>chiL</declname>
        </param>
        <param>
          <type>long</type>
          <declname>chi_max</declname>
        </param>
        <param>
          <type>long</type>
          <declname>chiR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="66" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1ae3edbe7b3f3022de58790cf6b294b808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &gt;</type>
        <definition>std::tuple&lt;Eigen::Tensor&lt;Scalar, 3&gt; ,Eigen::Tensor&lt;Scalar, 1&gt;, Eigen::Tensor&lt;Scalar, 3&gt; &gt; class_SVD::schmidt</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;tensor, long rows, long cols)</argsstring>
        <name>schmidt</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>long</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1ae0c7c86a804b2376fb71427298cb651b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 3 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 3 &gt; &gt; class_SVD::schmidt</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;tensor, long chi_max)</argsstring>
        <name>schmidt</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>chi_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="74" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1ac9220a11678bda98f801b10b3ec91c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt; &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 3 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 3 &gt; &gt; class_SVD::schmidt</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;tensor)</argsstring>
        <name>schmidt</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="77" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="169" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1ade26c2e7264d4dcac3fcaeda7fe4c443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;, double &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 3 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 3 &gt;, double &gt; class_SVD::schmidt_with_norm</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;tensor)</argsstring>
        <name>schmidt_with_norm</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="80" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="192" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a25ca2c3061b5eca7e5adf5113de78f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref></type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;,Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 1 &gt;, Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 3 &gt;, double &gt;</type>
        <definition>std::tuple&lt; Eigen::Tensor&lt; Scalar, 3 &gt;,Eigen::Tensor&lt; Scalar, 1 &gt;, Eigen::Tensor&lt; Scalar, 3 &gt;, double &gt; class_SVD::schmidt_with_norm</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;tensor, long chi_max)</argsstring>
        <name>schmidt_with_norm</name>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="class__algorithm__base_8cpp_1a528e55cc6b435f7efe6750d6faa36cd6" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>long</type>
          <declname>chi_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="83" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="203" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="classclass___s_v_d_1a482d84ed44ce16c371c1340432bf3888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">class_SVD::MatrixType</ref>&lt; double &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">class_SVD::VectorType</ref>&lt; double &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">class_SVD::MatrixType</ref>&lt; double &gt;, long &gt;</type>
        <definition>template std::tuple&lt; class_SVD::MatrixType&lt; double &gt;, class_SVD::VectorType&lt; double &gt;, class_SVD::MatrixType&lt; double &gt;, long &gt; do_svd</definition>
        <argsstring>(const double *, long, long, long)</argsstring>
        <name>do_svd</name>
        <param>
          <type>const double *</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
<para>force instantiation of do_svd for type &apos;double&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1aa139b894d0566a0f5d82ebc2a270a0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template Eigen::Tensor&lt; double, 2 &gt;</type>
        <definition>template Eigen::Tensor&lt; double, 2 &gt; pseudo_inverse</definition>
        <argsstring>(const Eigen::Tensor&lt; double, 2 &gt; &amp;tensor)</argsstring>
        <name>pseudo_inverse</name>
        <param>
          <type>const Eigen::Tensor&lt; double, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
<para>force instantiation of pseudo_inverse for type &apos;double&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.cpp" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass___s_v_d_1a027c04583072b6a96b5e120dc01edc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::tuple&lt; <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">class_SVD::MatrixType</ref>&lt; double &gt;, <ref refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" kindref="member">class_SVD::VectorType</ref>&lt; double &gt;, <ref refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" kindref="member">class_SVD::MatrixType</ref>&lt; double &gt;, long &gt;</type>
        <definition>template std::tuple&lt; class_SVD::MatrixType&lt; double &gt;, class_SVD::VectorType&lt; double &gt;, class_SVD::MatrixType&lt; double &gt;, long &gt; do_svd_lapacke</definition>
        <argsstring>(const double *, long, long, long)</argsstring>
        <name>do_svd_lapacke</name>
        <param>
          <type>const double *</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
<para>force instantiation of do_svd_lapacke for type &apos;double&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper_lapacke.cpp" line="118" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" line="12" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/class_svd_wrapper.h" bodystart="12" bodyend="85"/>
    <listofallmembers>
      <member refid="classclass___s_v_d_1aff43b93da28d20df50cb11ee85bb475d" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>class_SVD</name></member>
      <member refid="classclass___s_v_d_1a5a37f4c410540ca495bd41783abb6131" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>decompose</name></member>
      <member refid="classclass___s_v_d_1ac08447697e913ccc4297b14c7a071222" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>decompose</name></member>
      <member refid="classclass___s_v_d_1a3f4c3e9979c30e2fc16a2161b7947e77" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>decompose</name></member>
      <member refid="classclass___s_v_d_1a9be5995e9e0a65c250b10b9ddd951c3c" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>decompose</name></member>
      <member refid="classclass___s_v_d_1a37e231b39e0f40854ec0ee63790b99b6" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>do_svd</name></member>
      <member refid="classclass___s_v_d_1aec25da4eeeaf36ca6723a1106bcf1933" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>do_svd</name></member>
      <member refid="classclass___s_v_d_1aa4015b12214b465e6cd9709c75f4e328" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>do_svd</name></member>
      <member refid="classclass___s_v_d_1a482d84ed44ce16c371c1340432bf3888" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>do_svd</name></member>
      <member refid="classclass___s_v_d_1a972e614144e76de88b4495463a491860" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>do_svd_lapacke</name></member>
      <member refid="classclass___s_v_d_1a027c04583072b6a96b5e120dc01edc09" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>do_svd_lapacke</name></member>
      <member refid="classclass___s_v_d_1a70a15fb97a1af53d053ae02a407b2bb2" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>get_truncation_error</name></member>
      <member refid="classclass___s_v_d_1aae4ea0d15919e52ae0c6a5159dd4e6f6" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>MatrixType</name></member>
      <member refid="classclass___s_v_d_1a02b392731862c3aae9d6be450964e099" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>pseudo_inverse</name></member>
      <member refid="classclass___s_v_d_1aa139b894d0566a0f5d82ebc2a270a0f0" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>pseudo_inverse</name></member>
      <member refid="classclass___s_v_d_1a3cf73c9f6ec470f77f6fbacfffd32792" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt</name></member>
      <member refid="classclass___s_v_d_1ae3edbe7b3f3022de58790cf6b294b808" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt</name></member>
      <member refid="classclass___s_v_d_1ae0c7c86a804b2376fb71427298cb651b" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt</name></member>
      <member refid="classclass___s_v_d_1ac9220a11678bda98f801b10b3ec91c80" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt</name></member>
      <member refid="classclass___s_v_d_1ade26c2e7264d4dcac3fcaeda7fe4c443" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt_with_norm</name></member>
      <member refid="classclass___s_v_d_1a25ca2c3061b5eca7e5adf5113de78f01" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>schmidt_with_norm</name></member>
      <member refid="classclass___s_v_d_1a7568da355eba7526e68a51faf9545059" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>setThreshold</name></member>
      <member refid="classclass___s_v_d_1a53306a9b953e436bdb7b33200c32b048" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>SVDThreshold</name></member>
      <member refid="classclass___s_v_d_1a9845b5c64c2275e51c79d87cce6bc564" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>truncation_error</name></member>
      <member refid="classclass___s_v_d_1a57c2d0856227b0933d8116a7f1ff7c4f" prot="public" virt="non-virtual"><scope>class_SVD</scope><name>use_lapacke</name></member>
      <member refid="classclass___s_v_d_1a0866973f8d051b9d1047753046e6ec44" prot="private" virt="non-virtual"><scope>class_SVD</scope><name>VectorType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
