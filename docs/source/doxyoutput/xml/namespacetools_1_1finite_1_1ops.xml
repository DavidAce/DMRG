<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacetools_1_1finite_1_1ops" kind="namespace" language="C++">
    <compoundname>tools::finite::ops</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using tools::finite::ops::Scalar = typedef std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="8" column="5" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a2151c6e92bf85e993c06875ac3ccf653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tools::finite::ops::apply_mpo</definition>
        <argsstring>(class_state_finite &amp;state, const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;mpo, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Ledge, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Redge)</argsstring>
        <name>apply_mpo</name>
        <param>
          <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>mpo</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Ledge</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Redge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="10" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="23" bodyend="27" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="10" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a3d61c6cd52ef1a54ea5c1a0a5e950ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tools::finite::ops::apply_mpos</definition>
        <argsstring>(class_state_finite &amp;state, const std::vector&lt; Eigen::Tensor&lt; Scalar, 4 &gt;&gt; &amp;mpos, const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;Ledge, const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;Redge)</argsstring>
        <name>apply_mpos</name>
        <param>
          <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt;&gt; &amp;</type>
          <declname>mpos</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 1 &gt; &amp;</type>
          <declname>Ledge</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 1 &gt; &amp;</type>
          <declname>Redge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="11" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="29" bodyend="63" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="11" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a6c67ca91aeaa2b163c54ffd06f24dac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tools::finite::ops::apply_mpos</definition>
        <argsstring>(class_state_finite &amp;state, const std::vector&lt; Eigen::Tensor&lt; Scalar, 4 &gt;&gt; &amp;mpos, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Ledge, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Redge)</argsstring>
        <name>apply_mpos</name>
        <param>
          <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt;&gt; &amp;</type>
          <declname>mpos</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Ledge</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Redge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="12" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="65" bodyend="180" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="12" declcolumn="17"/>
        <references refid="namespacesettings_1a9aa08a0392a2f6f3084d65af2f7841ba" compoundref="debug_8h" startline="7">settings::debug</references>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a03e4f4f7d24c8c7176cc29e7c947af50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tools::finite::ops::project_to_nearest_sector</definition>
        <argsstring>(class_state_finite &amp;state, const std::string &amp;sector)</argsstring>
        <name>project_to_nearest_sector</name>
        <param>
          <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="13" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="204" bodyend="257" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="13" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a8eb586b69849df685d429d453a414984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tools::finite::ops::project_to_sector</definition>
        <argsstring>(class_state_finite &amp;state, const Eigen::MatrixXcd &amp;paulimatrix, int sign)</argsstring>
        <name>project_to_sector</name>
        <param>
          <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref> &amp;</type>
          <declname>paulimatrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="14" column="17" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="182" bodyend="202" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="14" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a62c509d985cb97e3a80c137ded09f37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref></type>
        <definition>class_state_finite tools::finite::ops::get_projection_to_sector</definition>
        <argsstring>(const class_state_finite &amp;state, const Eigen::MatrixXcd &amp;paulimatrix, int sign)</argsstring>
        <name>get_projection_to_sector</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_eigen_1aef9ed31256193462d78ea092d5a533da" kindref="member">Eigen::MatrixXcd</ref> &amp;</type>
          <declname>paulimatrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="16" column="24" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="259" bodyend="263" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="16" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1ae6b1db57079ef8bc7bcadbfbb62542fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref></type>
        <definition>class_state_finite tools::finite::ops::get_projection_to_nearest_sector</definition>
        <argsstring>(const class_state_finite &amp;state, const std::string &amp;sector)</argsstring>
        <name>get_projection_to_nearest_sector</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="18" column="24" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="265" bodyend="269" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="18" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a465b189c211d37ae93982966c8baf98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tools::finite::ops::overlap</definition>
        <argsstring>(const class_state_finite &amp;state1, const class_state_finite &amp;state2)</argsstring>
        <name>overlap</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state1</declname>
        </param>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="20" column="20" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="271" bodyend="284" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="20" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a58f77875dca562913bda706c62a7b3b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tools::finite::ops::expectation_value</definition>
        <argsstring>(const class_state_finite &amp;state1, const class_state_finite &amp;state2, const std::vector&lt; Eigen::Tensor&lt; Scalar, 4 &gt;&gt; &amp;mpos, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Ledge, const Eigen::Tensor&lt; Scalar, 3 &gt; &amp;Redge)</argsstring>
        <name>expectation_value</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state1</declname>
        </param>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state2</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt;&gt; &amp;</type>
          <declname>mpos</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Ledge</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 3 &gt; &amp;</type>
          <declname>Redge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="21" column="20" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="286" bodyend="305" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="21" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacetools_1_1finite_1_1ops_1a80cb9256a6269dba1d3768626b8e71c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tools::finite::ops::exp_sq_value</definition>
        <argsstring>(const class_state_finite &amp;state1, const class_state_finite &amp;state2, const std::vector&lt; Eigen::Tensor&lt; Scalar, 4 &gt;&gt; &amp;mpos, const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;Ledge, const Eigen::Tensor&lt; Scalar, 4 &gt; &amp;Redge)</argsstring>
        <name>exp_sq_value</name>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state1</declname>
        </param>
        <param>
          <type>const <ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref> &amp;</type>
          <declname>state2</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt;&gt; &amp;</type>
          <declname>mpos</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>Ledge</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; <ref refid="namespacetools_1_1finite_1_1ops_1a39c7843fbc80fa5a1ecaccc914eeb69c" kindref="member">Scalar</ref>, 4 &gt; &amp;</type>
          <declname>Redge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="22" column="20" bodyfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.cpp" bodystart="307" bodyend="326" declfile="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" declline="22" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/ops.h" line="7" column="28"/>
  </compounddef>
</doxygen>
