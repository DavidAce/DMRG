<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pcg__extras_8hpp" kind="file" language="C++">
    <compoundname>pcg_extras.hpp</compoundname>
    <includes local="no">cinttypes</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cassert</includes>
    <includes local="no">limits</includes>
    <includes local="no">iostream</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">locale</includes>
    <includes local="no">iterator</includes>
    <includes refid="pcg__uint128_8hpp" local="yes">pcg_uint128.hpp</includes>
    <includedby refid="pcg__random_8hpp" local="yes">/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_random.hpp</includedby>
    <incdepgraph>
      <node id="1569">
        <label>locale</label>
      </node>
      <node id="1565">
        <label>limits</label>
      </node>
      <node id="1570">
        <label>iterator</label>
      </node>
      <node id="1572">
        <label>cstdint</label>
      </node>
      <node id="1564">
        <label>cassert</label>
      </node>
      <node id="1560">
        <label>cinttypes</label>
      </node>
      <node id="1573">
        <label>cstdio</label>
      </node>
      <node id="1559">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp</label>
        <link refid="pcg__extras_8hpp"/>
        <childnode refid="1560" relation="include">
        </childnode>
        <childnode refid="1561" relation="include">
        </childnode>
        <childnode refid="1562" relation="include">
        </childnode>
        <childnode refid="1563" relation="include">
        </childnode>
        <childnode refid="1564" relation="include">
        </childnode>
        <childnode refid="1565" relation="include">
        </childnode>
        <childnode refid="1566" relation="include">
        </childnode>
        <childnode refid="1567" relation="include">
        </childnode>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1569" relation="include">
        </childnode>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1571" relation="include">
        </childnode>
      </node>
      <node id="1568">
        <label>utility</label>
      </node>
      <node id="1571">
        <label>pcg_uint128.hpp</label>
        <link refid="pcg__uint128_8hpp"/>
        <childnode refid="1572" relation="include">
        </childnode>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1564" relation="include">
        </childnode>
        <childnode refid="1574" relation="include">
        </childnode>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1567" relation="include">
        </childnode>
      </node>
      <node id="1562">
        <label>cstdlib</label>
      </node>
      <node id="1566">
        <label>iostream</label>
      </node>
      <node id="1561">
        <label>cstddef</label>
      </node>
      <node id="1574">
        <label>climits</label>
      </node>
      <node id="1567">
        <label>type_traits</label>
      </node>
      <node id="1563">
        <label>cstring</label>
      </node>
      <node id="1575">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1584">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising_normal.cpp</label>
        <link refid="class__selfdual__tf__rf__ising__normal_8cpp"/>
      </node>
      <node id="1588">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/mps-internals.cpp</label>
        <link refid="mps-internals_8cpp"/>
      </node>
      <node id="1590">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/ops.cpp</label>
        <link refid="ops_8cpp"/>
      </node>
      <node id="1582">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_model_base.cpp</label>
        <link refid="class__model__base_8cpp"/>
      </node>
      <node id="1586">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/state/class_mps_2site.cpp</label>
        <link refid="class__mps__2site_8cpp"/>
      </node>
      <node id="1583">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_selfdual_tf_rf_ising.cpp</label>
        <link refid="class__selfdual__tf__rf__ising_8cpp"/>
      </node>
      <node id="1578">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_random.h</label>
        <link refid="nmspc__random_8h"/>
        <childnode refid="1579" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1581" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
        <childnode refid="1585" relation="include">
        </childnode>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1588" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1590" relation="include">
        </childnode>
        <childnode refid="1591" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
      </node>
      <node id="1585">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/model/class_tf_ising.cpp</label>
        <link refid="class__tf__ising_8cpp"/>
      </node>
      <node id="1579">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/algorithms/class_xDMRG.cpp</label>
        <link refid="class__x_d_m_r_g_8cpp"/>
      </node>
      <node id="1577">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_random.hpp</label>
        <link refid="pcg__random_8hpp"/>
        <childnode refid="1578" relation="include">
        </childnode>
      </node>
      <node id="1580">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="1587">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/mpo.cpp</label>
        <link refid="finite_2mpo_8cpp"/>
      </node>
      <node id="1576">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp</label>
        <link refid="pcg__extras_8hpp"/>
        <childnode refid="1577" relation="include">
        </childnode>
      </node>
      <node id="1581">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_random.cpp</label>
        <link refid="nmspc__random_8cpp"/>
      </node>
      <node id="1591">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/opt-internals/ceres_subspace.cpp</label>
        <link refid="ceres__subspace_8cpp"/>
      </node>
      <node id="1592">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/infinite/mpo.cpp</label>
        <link refid="infinite_2mpo_8cpp"/>
      </node>
      <node id="1589">
        <label>/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/tools/finite/mps.cpp</label>
        <link refid="finite_2mps_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classpcg__extras_1_1seed__seq__from" prot="public">pcg_extras::seed_seq_from</innerclass>
    <innerclass refid="structpcg__extras_1_1static__arbitrary__seed" prot="public">pcg_extras::static_arbitrary_seed</innerclass>
    <innerclass refid="structpcg__extras_1_1printable__typename" prot="public">pcg_extras::printable_typename</innerclass>
    <innernamespace refid="namespacepcg__extras">pcg_extras</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="pcg__extras_8hpp_1ad25d06434a609db5310c4b4e11f48040" prot="public" static="no">
        <name>PCG_NOINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" line="62" column="14" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcg__extras_8hpp_1af849f3ca313cf7594477c08693a9ad26" prot="public" static="no">
        <name>PCG_128BIT_CONSTANT</name>
        <param><defname>high</defname></param>
        <param><defname>low</defname></param>
        <initializer>pcg128_t(high,low)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" line="91" column="13" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcg__extras_8hpp_1a97aa3ae4f7f10fc3c350e8a7fdd4deba" prot="public" static="no">
        <name>PCG_EMULATED_128BIT_MATH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" line="93" column="13" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>PCG<sp/>Random<sp/>Number<sp/>Generation<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2014<sp/>Melissa<sp/>O&apos;Neill<sp/>&lt;oneill@pcg-random.org&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>For<sp/>additional<sp/>information<sp/>about<sp/>the<sp/>PCG<sp/>random<sp/>number<sp/>generation<sp/>scheme,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>including<sp/>its<sp/>license<sp/>and<sp/>other<sp/>licensing<sp/>options,<sp/>visit</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.pcg-random.org</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>provides<sp/>support<sp/>code<sp/>that<sp/>is<sp/>useful<sp/>for<sp/>random-number<sp/>generation</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>but<sp/>not<sp/>specific<sp/>to<sp/>the<sp/>PCG<sp/>generation<sp/>scheme,<sp/>including:</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>128-bit<sp/>int<sp/>support<sp/>for<sp/>platforms<sp/>where<sp/>it<sp/>isn&apos;t<sp/>available<sp/>natively</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>bit<sp/>twiddling<sp/>operations</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>I/O<sp/>of<sp/>128-bit<sp/>and<sp/>8-bit<sp/>integers</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Handling<sp/>the<sp/>evilness<sp/>of<sp/>SeedSeq</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Support<sp/>for<sp/>efficiently<sp/>producing<sp/>random<sp/>numbers<sp/>less<sp/>than<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PCG_EXTRAS_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCG_EXTRAS_HPP_INCLUDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cinttypes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;cxxabi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Abstractions<sp/>for<sp/>compiler-specific<sp/>directives</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PCG_NOINLINE<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="pcg__extras_8hpp_1ad25d06434a609db5310c4b4e11f48040" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PCG_NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>Some<sp/>members<sp/>of<sp/>the<sp/>PCG<sp/>library<sp/>use<sp/>128-bit<sp/>math.<sp/><sp/>When<sp/>compiling<sp/>on<sp/>64-bit</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>platforms,<sp/>both<sp/>GCC<sp/>and<sp/>Clang<sp/>provide<sp/>128-bit<sp/>integer<sp/>types<sp/>that<sp/>are<sp/>ideal</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>job.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>On<sp/>32-bit<sp/>platforms<sp/>(or<sp/>with<sp/>other<sp/>compilers),<sp/>we<sp/>fall<sp/>back<sp/>to<sp/>a<sp/>C++</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>class<sp/>that<sp/>provides<sp/>128-bit<sp/>unsigned<sp/>integers<sp/>instead.<sp/><sp/>It<sp/>may<sp/>seem</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>like<sp/>we&apos;re<sp/>reinventing<sp/>the<sp/>wheel<sp/>here,<sp/>because<sp/>libraries<sp/>already<sp/>exist</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>that<sp/>support<sp/>large<sp/>integers,<sp/>but<sp/>most<sp/>existing<sp/>libraries<sp/>provide<sp/>a<sp/>very</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>generic<sp/>multiprecision<sp/>code,<sp/>but<sp/>here<sp/>we&apos;re<sp/>operating<sp/>at<sp/>a<sp/>fixed<sp/>size.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Also,<sp/>most<sp/>other<sp/>libraries<sp/>are<sp/>fairly<sp/>heavyweight.<sp/><sp/>So<sp/>we<sp/>use<sp/>a<sp/>direct</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>implementation.<sp/><sp/>Sadly,<sp/>it&apos;s<sp/>much<sp/>slower<sp/>than<sp/>hand-coded<sp/>assembly<sp/>or</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>direct<sp/>CPU<sp/>support.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__SIZEOF_INT128__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepcg__extras" kindref="compound">pcg_extras</ref><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__uint128_t<sp/><ref refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" kindref="member">pcg128_t</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PCG_128BIT_CONSTANT(high,low)<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((pcg128_t(high)<sp/>&lt;&lt;<sp/>64)<sp/>+<sp/>low)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;<ref refid="pcg__uint128_8hpp" kindref="compound">pcg_uint128.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="namespacepcg__extras" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepcg__extras" kindref="compound">pcg_extras</ref><sp/>{</highlight></codeline>
<codeline lineno="89" refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg_extras::uint_x4&lt;uint32_t,uint64_t&gt;</ref><sp/><ref refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" kindref="member">pcg128_t</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91" refid="pcg__extras_8hpp_1af849f3ca313cf7594477c08693a9ad26" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PCG_128BIT_CONSTANT(high,low)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcg128_t(high,low)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="pcg__extras_8hpp_1a97aa3ae4f7f10fc3c350e8a7fdd4deba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PCG_EMULATED_128BIT_MATH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepcg__extras" kindref="compound">pcg_extras</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>We<sp/>often<sp/>need<sp/>to<sp/>represent<sp/>a<sp/>&quot;number<sp/>of<sp/>bits&quot;.<sp/><sp/>When<sp/>used<sp/>normally,<sp/>these</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>numbers<sp/>are<sp/>never<sp/>greater<sp/>than<sp/>128,<sp/>so<sp/>an<sp/>unsigned<sp/>char<sp/>is<sp/>plenty.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>If<sp/>you&apos;re<sp/>using<sp/>a<sp/>nonstandard<sp/>generator<sp/>of<sp/>a<sp/>larger<sp/>size,<sp/>you<sp/>can<sp/>set</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>PCG_BITCOUNT_T<sp/>to<sp/>have<sp/>it<sp/>define<sp/>it<sp/>as<sp/>a<sp/>larger<sp/>size.<sp/><sp/>(Some<sp/>compilers</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>might<sp/>produce<sp/>faster<sp/>code<sp/>if<sp/>you<sp/>set<sp/>it<sp/>to<sp/>an<sp/>unsigned<sp/>int.)</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PCG_BITCOUNT_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="namespacepcg__extras_1a65a637ab6de9e71377b242891018695c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="namespacepcg__extras_1a65a637ab6de9e71377b242891018695c" kindref="member">bitcount_t</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PCG_BITCOUNT_T<sp/><ref refid="namespacepcg__extras_1a65a637ab6de9e71377b242891018695c" kindref="member">bitcount_t</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>C++<sp/>requires<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>serialize<sp/>RNG<sp/>state<sp/>by<sp/>printing<sp/>or<sp/>reading</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>it<sp/>from<sp/>a<sp/>stream.<sp/><sp/>Because<sp/>we<sp/>use<sp/>128-bit<sp/>ints,<sp/>we<sp/>also<sp/>need<sp/>to<sp/>be<sp/>able</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>ot<sp/>print<sp/>them,<sp/>so<sp/>here<sp/>is<sp/>code<sp/>to<sp/>do<sp/>so.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>provides<sp/>enough<sp/>functionality<sp/>to<sp/>print<sp/>128-bit<sp/>ints<sp/>in<sp/>decimal</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>and<sp/>zero-padded<sp/>in<sp/>hex.<sp/><sp/>It&apos;s<sp/>not<sp/>a<sp/>full-featured<sp/>implementation.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">std::basic_ostream&lt;CharT,Traits&gt;&amp;</highlight></codeline>
<codeline lineno="124" refid="namespacepcg__extras_1a41f557d4b3de5723fbea74a42375adff" refkind="member"><highlight class="normal">operator&lt;&lt;(std::basic_ostream&lt;CharT,Traits&gt;&amp;<sp/>out,<sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>desired_base<sp/>=<sp/>out.flags()<sp/>&amp;<sp/>out.basefield;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>want_hex<sp/>=<sp/>desired_base<sp/>==<sp/>out.hex;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_hex)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>highpart<sp/>=<sp/>uint64_t(value<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>lowpart<sp/><sp/>=<sp/>uint64_t(value);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>desired_width<sp/>=<sp/>out.width();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(desired_width<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.width(desired_width<sp/>-<sp/>16);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highpart<sp/>!=<sp/>0<sp/>||<sp/>desired_width<sp/>&gt;<sp/>16)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>highpart;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharT<sp/>oldfill;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highpart<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.width(16);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldfill<sp/>=<sp/>out.fill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oldflags<sp/>=<sp/>out.setf(decltype(desired_base){},<sp/>out.showbase);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>lowpart;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.setf(oldflags);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highpart<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.fill(oldfill);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MAX_CHARS_128BIT<sp/>=<sp/>40;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[MAX_CHARS_128BIT];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pos<sp/>=<sp/>buffer+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>*(--pos)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>BASE<sp/>=<sp/><ref refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" kindref="member">pcg128_t</ref>(10ULL);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>value<sp/>/<sp/>BASE;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacemath_1a950ba2c26eab3a176711e689337ad0e9" kindref="member">mod</ref><sp/>=<sp/>uint32_t(value<sp/>-<sp/>(div<sp/>*<sp/>BASE));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(--pos)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacemath_1a950ba2c26eab3a176711e689337ad0e9" kindref="member">mod</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>div;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(value<sp/>!=<sp/><ref refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" kindref="member">pcg128_t</ref>(0ULL));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/>pos;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">std::basic_istream&lt;CharT,Traits&gt;&amp;</highlight></codeline>
<codeline lineno="168" refid="namespacepcg__extras_1a4705963e2fdfc7b83823cf0fad8bfc1d" refkind="member"><highlight class="normal"><ref refid="namespacepcg__extras_1a4705963e2fdfc7b83823cf0fad8bfc1d" kindref="member">operator&gt;&gt;</ref>(std::basic_istream&lt;CharT,Traits&gt;&amp;<sp/>in,<sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::basic_istream&lt;CharT,Traits&gt;::sentry<sp/><ref refid="namespacesettings" kindref="compound">s</ref>(in);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>BASE<sp/>=<sp/><ref refid="namespacepcg__extras_1af8b3abc3d67d2b36426c7556dc726307" kindref="member">pcg128_t</ref>(10ULL);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref><sp/>current(0ULL);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_nothing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharT<sp/>wide_ch<sp/>=<sp/>in.get();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in.good())</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>in.narrow(wide_ch,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>ch<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.unget();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>did_nothing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref><sp/>digit(uint32_t(ch<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref><sp/>timesbase<sp/>=<sp/>current*BASE;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/>overflow<sp/>||<sp/>timesbase<sp/>&lt;<sp/>current;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>timesbase<sp/>+<sp/>digit;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/>overflow<sp/>||<sp/>current<sp/>&lt;<sp/>digit;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(did_nothing<sp/>||<sp/>overflow)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.setstate(std::ios::failbit);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overflow)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>~<ref refid="classpcg__extras_1_1uint__x4" kindref="compound">pcg128_t</ref>(0ULL);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>Likewise,<sp/>if<sp/>people<sp/>use<sp/>tiny<sp/>rngs,<sp/>we&apos;ll<sp/>be<sp/>serializing<sp/>uint8_t.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>If<sp/>we<sp/>just<sp/>used<sp/>the<sp/>provided<sp/>IO<sp/>operators,<sp/>they&apos;d<sp/>read/write<sp/>chars,</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>not<sp/>ints,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>define<sp/>our<sp/>own.<sp/><sp/>We<sp/>*can*<sp/>redefine<sp/>this<sp/>operator</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>here<sp/>because<sp/>we&apos;re<sp/>in<sp/>our<sp/>own<sp/>namespace.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">std::basic_ostream&lt;CharT,Traits&gt;&amp;</highlight></codeline>
<codeline lineno="216" refid="namespacepcg__extras_1accb964dd39270b688b7c1d16edba7bbe" refkind="member"><highlight class="normal">operator&lt;&lt;(std::basic_ostream&lt;CharT,Traits&gt;&amp;out,<sp/>uint8_t<sp/>value)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/>uint32_t(value);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">std::basic_istream&lt;CharT,Traits&gt;&amp;</highlight></codeline>
<codeline lineno="223" refid="namespacepcg__extras_1a59f6a342c6ea854807e2ebeb011ce2d5" refkind="member"><highlight class="normal"><ref refid="namespacepcg__extras_1a4705963e2fdfc7b83823cf0fad8bfc1d" kindref="member">operator&gt;&gt;</ref>(std::basic_istream&lt;CharT,Traits&gt;&amp;<sp/>in,<sp/>uint8_t<sp/>target)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value<sp/>=<sp/>0xdecea5edU;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>value;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in<sp/>&amp;&amp;<sp/>value<sp/>==<sp/>0xdecea5edU)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>uint8_t(~0))<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.setstate(std::ios::failbit);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>~0U;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>uint8_t(value);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unfortunately,<sp/>the<sp/>above<sp/>functions<sp/>don&apos;t<sp/>get<sp/>found<sp/>in<sp/>preference<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>built<sp/>in<sp/>ones,<sp/>so<sp/>we<sp/>create<sp/>some<sp/>more<sp/>specific<sp/>overloads<sp/>that<sp/>will.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>Ugh.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="namespacepcg__extras_1a190f7c2ff4231922080d5e7a578341c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacepcg__extras_1a41f557d4b3de5723fbea74a42375adff" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/>uint8_t<sp/>value)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pcg_extras::operator&lt;&lt;<sp/>&lt;char&gt;(out,<sp/>value);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="namespacepcg__extras_1ac80e2fdc2d7998717af4cc18fdfe0a25" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::istream&amp;<sp/><ref refid="namespacepcg__extras_1a4705963e2fdfc7b83823cf0fad8bfc1d" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>in,<sp/>uint8_t&amp;<sp/>value)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pcg_extras::operator&gt;&gt;<sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;(in,<sp/>value);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>Useful<sp/>bitwise<sp/>operations.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>XorShifts<sp/>are<sp/>invertable,<sp/>but<sp/>they<sp/>are<sp/>someting<sp/>of<sp/>a<sp/>pain<sp/>to<sp/>invert.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>backs<sp/>them<sp/>out.<sp/><sp/>It&apos;s<sp/>used<sp/>by<sp/>the<sp/>whacky<sp/>&quot;inside<sp/>out&quot;</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>generator<sp/>defined<sp/>later.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>itype&gt;</highlight></codeline>
<codeline lineno="265" refid="namespacepcg__extras_1a4f03e67e7e86db7eaeb41c67d0cd2cb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>itype<sp/><ref refid="namespacepcg__extras_1a4f03e67e7e86db7eaeb41c67d0cd2cb5" kindref="member">unxorshift</ref>(itype<sp/>x,<sp/>bitcount_t<sp/>bits,<sp/>bitcount_t<sp/>shift)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2*shift<sp/>&gt;=<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>^<sp/>(x<sp/>&gt;&gt;<sp/>shift);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>lowmask1<sp/>=<sp/>(itype(1U)<sp/>&lt;&lt;<sp/>(bits<sp/>-<sp/>shift*2))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>highmask1<sp/>=<sp/>~lowmask1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>top1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>bottom1<sp/>=<sp/>x<sp/>&amp;<sp/>lowmask1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>top1<sp/>^=<sp/>top1<sp/>&gt;&gt;<sp/>shift;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>top1<sp/>&amp;=<sp/>highmask1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>top1<sp/>|<sp/>bottom1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>lowmask2<sp/>=<sp/>(itype(1U)<sp/>&lt;&lt;<sp/>(bits<sp/>-<sp/>shift))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>bottom2<sp/>=<sp/>x<sp/>&amp;<sp/>lowmask2;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom2<sp/>=<sp/><ref refid="namespacepcg__extras_1a4f03e67e7e86db7eaeb41c67d0cd2cb5" kindref="member">unxorshift</ref>(bottom2,<sp/>bits<sp/>-<sp/>shift,<sp/>shift);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom2<sp/>&amp;=<sp/>lowmask1;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>top1<sp/>|<sp/>bottom2;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>Rotate<sp/>left<sp/>and<sp/>right.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>In<sp/>ideal<sp/>world,<sp/>compilers<sp/>would<sp/>spot<sp/>idiomatic<sp/>rotate<sp/>code<sp/>and<sp/>convert<sp/>it</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>to<sp/>a<sp/>rotate<sp/>instruction.<sp/><sp/>Of<sp/>course,<sp/>opinions<sp/>vary<sp/>on<sp/>what<sp/>the<sp/>correct</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>idiom<sp/>is<sp/>and<sp/>how<sp/>to<sp/>spot<sp/>it.<sp/><sp/>For<sp/>clang,<sp/>sometimes<sp/>it<sp/>generates<sp/>better</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>(but<sp/>still<sp/>crappy)<sp/>code<sp/>if<sp/>you<sp/>define<sp/>PCG_USE_ZEROCHECK_ROTATE_IDIOM.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>itype&gt;</highlight></codeline>
<codeline lineno="294" refid="namespacepcg__extras_1a7cb58f709cce6e8b5335f104acad8314" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>itype<sp/><ref refid="namespacepcg__extras_1a7cb58f709cce6e8b5335f104acad8314" kindref="member">rotl</ref>(itype<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>bits<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(itype)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>mask<sp/>=<sp/>bits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PCG_USE_ZEROCHECK_ROTATE_IDIOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot<sp/>?<sp/>(value<sp/>&lt;&lt;<sp/>rot)<sp/>|<sp/>(value<sp/>&gt;&gt;<sp/>(bits<sp/>-<sp/>rot))<sp/>:<sp/>value;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&lt;&lt;<sp/>rot)<sp/>|<sp/>(value<sp/>&gt;&gt;<sp/>((-<sp/>rot)<sp/>&amp;<sp/>mask));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>itype&gt;</highlight></codeline>
<codeline lineno="306" refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>itype<sp/><ref refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" kindref="member">rotr</ref>(itype<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>bits<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(itype)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>mask<sp/>=<sp/>bits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PCG_USE_ZEROCHECK_ROTATE_IDIOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot<sp/>?<sp/>(value<sp/>&gt;&gt;<sp/>rot)<sp/>|<sp/>(value<sp/>&lt;&lt;<sp/>(bits<sp/>-<sp/>rot))<sp/>:<sp/>value;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>&gt;&gt;<sp/>rot)<sp/>|<sp/>(value<sp/>&lt;&lt;<sp/>((-<sp/>rot)<sp/>&amp;<sp/>mask));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unfortunately,<sp/>both<sp/>Clang<sp/>and<sp/>GCC<sp/>sometimes<sp/>perform<sp/>poorly<sp/>when<sp/>it<sp/>comes</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>to<sp/>properly<sp/>recognizing<sp/>idiomatic<sp/>rotate<sp/>code,<sp/>so<sp/>for<sp/>we<sp/>also<sp/>provide</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>assembler<sp/>directives<sp/>(enabled<sp/>with<sp/>PCG_USE_INLINE_ASM).<sp/><sp/>Boo,<sp/>hiss.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>(I<sp/>hope<sp/>that<sp/>these<sp/>compilers<sp/>get<sp/>better<sp/>so<sp/>that<sp/>this<sp/>code<sp/>can<sp/>die.)</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>These<sp/>overloads<sp/>will<sp/>be<sp/>preferred<sp/>over<sp/>the<sp/>general<sp/>template<sp/>code<sp/>above.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PCG_USE_INLINE_ASM<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&amp;&amp;<sp/>(__x86_64__<sp/><sp/>||<sp/>__i386__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" kindref="member">rotr</ref>(uint8_t<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rorb<sp/><sp/><sp/>%%cl,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(value),<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal"><sp/>(rot));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" kindref="member">rotr</ref>(uint16_t<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rorw<sp/><sp/><sp/>%%cl,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(value),<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal"><sp/>(rot));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" kindref="member">rotr</ref>(uint32_t<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rorl<sp/><sp/><sp/>%%cl,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(value),<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal"><sp/>(rot));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__x86_64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacepcg__extras_1afae38bd6d5a7e1d79b8e32fc38dbabe3" kindref="member">rotr</ref>(uint64_t<sp/>value,<sp/>bitcount_t<sp/>rot)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rorq<sp/><sp/><sp/>%%cl,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(value),<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal"><sp/>(rot));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__x86_64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PCG_USE_INLINE_ASM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>The<sp/>C++<sp/>SeedSeq<sp/>concept<sp/>(modelled<sp/>by<sp/>seed_seq)<sp/>can<sp/>fill<sp/>an<sp/>array<sp/>of</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>32-bit<sp/>integers<sp/>with<sp/>seed<sp/>data,<sp/>but<sp/>sometimes<sp/>we<sp/>want<sp/>to<sp/>produce</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>larger<sp/>or<sp/>smaller<sp/>integers.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>code<sp/>handles<sp/>this<sp/>annoyance.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>uneven_copy<sp/>will<sp/>copy<sp/>an<sp/>array<sp/>of<sp/>32-bit<sp/>ints<sp/>to<sp/>an<sp/>array<sp/>of<sp/>larger<sp/>or</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>smaller<sp/>ints<sp/>(actually,<sp/>the<sp/>code<sp/>is<sp/>general<sp/>it<sp/>only<sp/>needing<sp/>forward</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>iterators).<sp/><sp/>The<sp/>copy<sp/>is<sp/>identical<sp/>to<sp/>the<sp/>one<sp/>that<sp/>would<sp/>be<sp/>performed<sp/>if</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>we<sp/>just<sp/>did<sp/>memcpy<sp/>on<sp/>a<sp/>standard<sp/>little-endian<sp/>machine,<sp/>but<sp/>works</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>regardless<sp/>of<sp/>the<sp/>endian<sp/>of<sp/>the<sp/>machine<sp/>(or<sp/>the<sp/>weirdness<sp/>of<sp/>the<sp/>ints</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>involved).</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>generate_to<sp/>initializes<sp/>an<sp/>array<sp/>of<sp/>integers<sp/>using<sp/>a<sp/>SeedSeq</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>object.<sp/><sp/>It<sp/>is<sp/>given<sp/>the<sp/>size<sp/>as<sp/>a<sp/>static<sp/>constant<sp/>at<sp/>compile<sp/>time<sp/>and</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>tries<sp/>to<sp/>avoid<sp/>memory<sp/>allocation.<sp/><sp/>If<sp/>we&apos;re<sp/>filling<sp/>in<sp/>32-bit<sp/>constants</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>we<sp/>just<sp/>do<sp/>it<sp/>directly.<sp/><sp/>If<sp/>we<sp/>need<sp/>a<sp/>separate<sp/>buffer<sp/>and<sp/>it&apos;s<sp/>small,</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>we<sp/>allocate<sp/>it<sp/>on<sp/>the<sp/>stack.<sp/><sp/>Otherwise,<sp/>we<sp/>fall<sp/>back<sp/>to<sp/>heap<sp/>allocation.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>Ugh.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>generate_one<sp/>produces<sp/>a<sp/>single<sp/>value<sp/>of<sp/>some<sp/>integral<sp/>type<sp/>using<sp/>a</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>SeedSeq<sp/>object.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>uneven_copy<sp/>helper,<sp/>case<sp/>where<sp/>destination<sp/>ints<sp/>are<sp/>less<sp/>than<sp/>32<sp/>bit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SrcIter,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="383" refid="namespacepcg__extras_1ae1857a2bac68e1df88092dc2d5a136b4" refkind="member"><highlight class="normal">SrcIter<sp/><ref refid="namespacepcg__extras_1ae1857a2bac68e1df88092dc2d5a136b4" kindref="member">uneven_copy_impl</ref>(</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>SrcIter<sp/>src_first,<sp/>DestIter<sp/>dest_first,<sp/>DestIter<sp/>dest_last,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::true_type)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;SrcIter&gt;::value_type<sp/><sp/>src_t;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;DestIter&gt;::value_type<sp/>dest_t;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>SRC_SIZE<sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(src_t);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>DEST_SIZE<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest_t);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>DEST_BITS<sp/>=<sp/>DEST_SIZE<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bitcount_t<sp/>SCALE<sp/><sp/><sp/><sp/><sp/>=<sp/>SRC_SIZE<sp/>/<sp/>DEST_SIZE;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>src_t<sp/>value;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dest_first<sp/>!=<sp/>dest_last)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((count++<sp/>%<sp/>SCALE)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>*src_first++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>more<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>DEST_BITS;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>down<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest_first++<sp/>=<sp/>dest_t(value);<sp/><sp/></highlight><highlight class="comment">//<sp/>Truncates,<sp/>ignores<sp/>high<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src_first;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>uneven_copy<sp/>helper,<sp/>case<sp/>where<sp/>destination<sp/>ints<sp/>are<sp/>more<sp/>than<sp/>32<sp/>bit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SrcIter,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="412" refid="namespacepcg__extras_1a7150076de2f368a305a6123f3004e5a3" refkind="member"><highlight class="normal">SrcIter<sp/><ref refid="namespacepcg__extras_1ae1857a2bac68e1df88092dc2d5a136b4" kindref="member">uneven_copy_impl</ref>(</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>SrcIter<sp/>src_first,<sp/>DestIter<sp/>dest_first,<sp/>DestIter<sp/>dest_last,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::false_type)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;SrcIter&gt;::value_type<sp/><sp/>src_t;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;DestIter&gt;::value_type<sp/>dest_t;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>SRC_SIZE<sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(src_t);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>SRC_BITS<sp/><sp/>=<sp/>SRC_SIZE<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DEST_SIZE<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest_t);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>SCALE<sp/><sp/><sp/><sp/><sp/>=<sp/>(DEST_SIZE+SRC_SIZE-1)<sp/>/<sp/>SRC_SIZE;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dest_first<sp/>!=<sp/>dest_last)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_t<sp/>value(0UL);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SCALE;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>|=<sp/>dest_t(*src_first++)<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>+=<sp/>SRC_BITS;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest_first++<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src_first;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>uneven_copy,<sp/>call<sp/>the<sp/>right<sp/>code<sp/>for<sp/>larger<sp/>vs.<sp/>smaller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SrcIter,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="441" refid="namespacepcg__extras_1a7be0229515bb8d26962826f1c484ec9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>SrcIter<sp/><ref refid="namespacepcg__extras_1a7be0229515bb8d26962826f1c484ec9d" kindref="member">uneven_copy</ref>(SrcIter<sp/>src_first,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIter<sp/>dest_first,<sp/>DestIter<sp/>dest_last)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;SrcIter&gt;::value_type<sp/><sp/>src_t;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;DestIter&gt;::value_type<sp/>dest_t;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DEST_IS_SMALLER<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest_t)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(src_t);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1ae1857a2bac68e1df88092dc2d5a136b4" kindref="member">uneven_copy_impl</ref>(src_first,<sp/>dest_first,<sp/>dest_last,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>DEST_IS_SMALLER&gt;{});</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>generate_to,<sp/>fill<sp/>in<sp/>a<sp/>fixed-size<sp/>array<sp/>of<sp/>integral<sp/>type<sp/>using<sp/>a<sp/>SeedSeq</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>(actually<sp/>works<sp/>for<sp/>any<sp/>random-access<sp/>iterator)</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SeedSeq,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="458" refid="namespacepcg__extras_1a908d65518153efed3219c2bd26d54789" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1a908d65518153efed3219c2bd26d54789" kindref="member">generate_to_impl</ref>(SeedSeq&amp;&amp;<sp/>generator,<sp/>DestIter<sp/>dest,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::true_type)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>generator.generate(dest,<sp/>dest+size);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SeedSeq,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="465" refid="namespacepcg__extras_1a61f43320af045b4a81fd1d47ddb0d9af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1a908d65518153efed3219c2bd26d54789" kindref="member">generate_to_impl</ref>(SeedSeq&amp;&amp;<sp/>generator,<sp/>DestIter<sp/>dest,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;DestIter&gt;::value_type<sp/>dest_t;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DEST_SIZE<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest_t);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>GEN_SIZE<sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GEN_IS_SMALLER<sp/>=<sp/>GEN_SIZE<sp/>&lt;<sp/>DEST_SIZE;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>FROM_ELEMS<sp/>=</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GEN_IS_SMALLER</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>size<sp/>*<sp/>((DEST_SIZE+GEN_SIZE-1)<sp/>/<sp/>GEN_SIZE)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(size<sp/>+<sp/>(GEN_SIZE<sp/>/<sp/>DEST_SIZE)<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>((GEN_SIZE<sp/>/<sp/>DEST_SIZE)<sp/>+<sp/>GEN_IS_SMALLER);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>this<sp/>odd<sp/>code<sp/>^^^^^^^^^^^^^^^^^<sp/>is<sp/>work-around<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>a<sp/>bug:<sp/>http://llvm.org/bugs/show_bug.cgi?id=21287</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FROM_ELEMS<sp/>&lt;=<sp/>1024)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buffer[FROM_ELEMS];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generator.generate(buffer,<sp/>buffer+FROM_ELEMS);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepcg__extras_1a7be0229515bb8d26962826f1c484ec9d" kindref="member">uneven_copy</ref>(buffer,<sp/>dest,<sp/>dest+size);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>buffer<sp/>=<sp/>(uint32_t*)<sp/>malloc(GEN_SIZE<sp/>*<sp/>FROM_ELEMS);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generator.generate(buffer,<sp/>buffer+FROM_ELEMS);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepcg__extras_1a7be0229515bb8d26962826f1c484ec9d" kindref="member">uneven_copy</ref>(buffer,<sp/>dest,<sp/>dest+size);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SeedSeq,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DestIter&gt;</highlight></codeline>
<codeline lineno="494" refid="namespacepcg__extras_1a41e1950d9f7429f7e9775c3924a861db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1a41e1950d9f7429f7e9775c3924a861db" kindref="member">generate_to</ref>(SeedSeq&amp;&amp;<sp/>generator,<sp/>DestIter<sp/>dest)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;DestIter&gt;::value_type<sp/>dest_t;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_32BIT<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dest_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>generate_to_impl&lt;size&gt;(std::forward&lt;SeedSeq&gt;(generator),<sp/>dest,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>IS_32BIT&gt;{});</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>generate_one,<sp/>produce<sp/>a<sp/>value<sp/>of<sp/>integral<sp/>type<sp/>using<sp/>a<sp/>SeedSeq</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>(optionally,<sp/>we<sp/>can<sp/>have<sp/>it<sp/>produce<sp/>more<sp/>than<sp/>one<sp/>and<sp/>pick<sp/>which<sp/>one</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>we<sp/>want)</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0UL,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>i+1UL,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SeedSeq&gt;</highlight></codeline>
<codeline lineno="509" refid="namespacepcg__extras_1aa725ad9f9f0b511be8646ffff716665d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UInt<sp/><ref refid="namespacepcg__extras_1aa725ad9f9f0b511be8646ffff716665d" kindref="member">generate_one</ref>(SeedSeq&amp;&amp;<sp/>generator)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>UInt<sp/>result[N];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>generate_to&lt;N&gt;(std::forward&lt;SeedSeq&gt;(generator),<sp/>result);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result[i];</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType&gt;</highlight></codeline>
<codeline lineno="517" refid="namespacepcg__extras_1a09fe30ab14f4bae059b13199966e6562" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1a09fe30ab14f4bae059b13199966e6562" kindref="member">bounded_rand</ref>(RngType&amp;<sp/><ref refid="namespacern_1a321a4480bc97bfa96745a997707099c1" kindref="member">rng</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType::result_type<sp/>upper_bound)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType::result_type</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType::result_type<sp/>rtype;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>rtype<sp/>threshold<sp/>=<sp/>(RngType::max()<sp/>-<sp/>RngType::min()<sp/>+<sp/>rtype(1)<sp/>-<sp/>upper_bound)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>upper_bound;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtype<sp/>r<sp/>=<sp/><ref refid="namespacern_1a321a4480bc97bfa96745a997707099c1" kindref="member">rng</ref>()<sp/>-<sp/>RngType::min();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>threshold)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>%<sp/>upper_bound;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RandType&gt;</highlight></codeline>
<codeline lineno="531" refid="namespacepcg__extras_1a131f49fae5a8125fbe37eee8c28154b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepcg__extras_1a131f49fae5a8125fbe37eee8c28154b2" kindref="member">shuffle</ref>(Iter<sp/>from,<sp/>Iter<sp/>to,<sp/>RandType&amp;&amp;<sp/><ref refid="namespacern_1a321a4480bc97bfa96745a997707099c1" kindref="member">rng</ref>)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iter&gt;::difference_type<sp/>delta_t;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>to<sp/>-<sp/>from;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_t<sp/>chosen(<ref refid="namespacepcg__extras_1a09fe30ab14f4bae059b13199966e6562" kindref="member">bounded_rand</ref>(<ref refid="namespacern_1a321a4480bc97bfa96745a997707099c1" kindref="member">rng</ref>,<sp/>count));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--count;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--to;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::swap;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(*(from+chosen),<sp/>*to);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>Although<sp/>std::seed_seq<sp/>is<sp/>useful,<sp/>it<sp/>isn&apos;t<sp/>everything.<sp/><sp/>Often<sp/>we<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>initialize<sp/>a<sp/>random-number<sp/>generator<sp/>some<sp/>other<sp/>way,<sp/>such<sp/>as<sp/>from<sp/>a<sp/>random</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>device.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>Technically,<sp/>it<sp/>does<sp/>not<sp/>meet<sp/>the<sp/>requirements<sp/>of<sp/>a<sp/>SeedSequence<sp/>because</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>it<sp/>lacks<sp/>some<sp/>of<sp/>the<sp/>rarely-used<sp/>member<sp/>functions<sp/>(some<sp/>of<sp/>which<sp/>would</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>be<sp/>impossible<sp/>to<sp/>provide).<sp/><sp/>However<sp/>the<sp/>C++<sp/>standard<sp/>is<sp/>quite<sp/>specific</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>that<sp/>actual<sp/>engines<sp/>only<sp/>called<sp/>the<sp/>generate<sp/>method,<sp/>so<sp/>it<sp/>ought<sp/>not<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/>a<sp/>problem<sp/>in<sp/>practice.</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType&gt;</highlight></codeline>
<codeline lineno="557" refid="classpcg__extras_1_1seed__seq__from" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpcg__extras_1_1seed__seq__from" kindref="compound">seed_seq_from</ref><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="559" refid="classpcg__extras_1_1seed__seq__from_1a3066831574b0c1b36ccd7441194feb7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RngType<sp/><ref refid="classpcg__extras_1_1seed__seq__from_1a3066831574b0c1b36ccd7441194feb7c" kindref="member">rng_</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="classpcg__extras_1_1seed__seq__from_1a9a0e65175ac6814b655b479fecbbc515" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint_least32_t<sp/><ref refid="classpcg__extras_1_1seed__seq__from_1a9a0e65175ac6814b655b479fecbbc515" kindref="member">result_type</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="565" refid="classpcg__extras_1_1seed__seq__from_1a1d01bd6f7f0c4c3dae871e8026d92c38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpcg__extras_1_1seed__seq__from_1a1d01bd6f7f0c4c3dae871e8026d92c38" kindref="member">seed_seq_from</ref>(Args&amp;&amp;...<sp/>args)<sp/>:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rng_(<ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;Args&gt;(args)...)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>(else)<sp/>to<sp/>do...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="572" refid="classpcg__extras_1_1seed__seq__from_1acd4556759cf92f49bf958e0cacb72e07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpcg__extras_1_1seed__seq__from_1acd4556759cf92f49bf958e0cacb72e07" kindref="member">generate</ref>(Iter<sp/>start,<sp/>Iter<sp/>finish)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>!=<sp/>finish;<sp/>++i)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*i<sp/>=<sp/><ref refid="classpcg__extras_1_1seed__seq__from_1a9a0e65175ac6814b655b479fecbbc515" kindref="member">result_type</ref>(<ref refid="classpcg__extras_1_1seed__seq__from_1a3066831574b0c1b36ccd7441194feb7c" kindref="member">rng_</ref>());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="classpcg__extras_1_1seed__seq__from_1a6889125ccdb3b1113c345d5a7d0c9255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classpcg__extras_1_1seed__seq__from_1a6889125ccdb3b1113c345d5a7d0c9255" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="579"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RngType::result_type)<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(result_type)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>RngType::max()<sp/>&gt;<sp/>~</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0UL))</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>~size_t(0UL)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size_t(RngType::max());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal">};</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>Sometimes<sp/>you<sp/>might<sp/>want<sp/>a<sp/>distinct<sp/>seed<sp/>based<sp/>on<sp/>when<sp/>the<sp/>program</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>was<sp/>compiled.<sp/><sp/>That<sp/>way,<sp/>a<sp/>particular<sp/>instance<sp/>of<sp/>the<sp/>program<sp/>will</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>behave<sp/>the<sp/>same<sp/>way,<sp/>but<sp/>when<sp/>recompiled<sp/>it&apos;ll<sp/>produce<sp/>a<sp/>different</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>value.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="595" refid="structpcg__extras_1_1static__arbitrary__seed" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcg__extras_1_1static__arbitrary__seed" kindref="compound">static_arbitrary_seed</ref><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="597" refid="structpcg__extras_1_1static__arbitrary__seed_1ad73865d934154c023d3f74ea062f0d41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>IntType<sp/><ref refid="structpcg__extras_1_1static__arbitrary__seed_1ad73865d934154c023d3f74ea062f0d41" kindref="member">fnv</ref>(IntType<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pos<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>hash</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fnv((hash<sp/>*<sp/>IntType(16777619U))<sp/>^<sp/>*pos,<sp/>(pos+1));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="604" refid="structpcg__extras_1_1static__arbitrary__seed_1a0168de8c2e22973e0d7802ed69050d6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>IntType<sp/>value<sp/>=<sp/>fnv(IntType(2166136261U<sp/>^<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(IntType)),</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__DATE__<sp/>__TIME__<sp/>__FILE__);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes,<sp/>when<sp/>debugging<sp/>or<sp/>testing,<sp/>it&apos;s<sp/>handy<sp/>to<sp/>be<sp/>able<sp/>print<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>(in<sp/>human-readable<sp/>form).<sp/><sp/>This<sp/>code<sp/>allows<sp/>the<sp/>idiom:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>printable_typename&lt;my_foo_type_t&gt;()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>print<sp/>out<sp/>my_foo_type_t<sp/>(or<sp/>its<sp/>concrete<sp/>type<sp/>if<sp/>it<sp/>is<sp/>a<sp/>synonym)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="616" refid="structpcg__extras_1_1printable__typename" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcg__extras_1_1printable__typename" kindref="compound">printable_typename</ref><sp/>{};</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="619" refid="namespacepcg__extras_1af39b04b807cd9ab964e2d142ae48d90f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/>printable_typename&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*implementation_typename<sp/>=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pretty_name<sp/>=</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abi::__cxa_demangle(implementation_typename,<sp/>NULL,<sp/>NULL,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>pretty_name;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>pretty_name);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>implementation_typename;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pcg_extras</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PCG_EXTRAS_HPP_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/pcg/pcg_extras.hpp"/>
  </compounddef>
</doxygen>
