<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacemath" kind="namespace" language="C++">
    <compoundname>math</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemath_1a950ba2c26eab3a176711e689337ad0e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto math::mod</definition>
        <argsstring>(const T1 x, const T2 y)</argsstring>
        <name>mod</name>
        <param>
          <type>const T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>MatLab-style modulo operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>first number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>second number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>modulo of x and y. Example, <computeroutput> mod(-0.5,10) = 9.5 </computeroutput>, instead of <computeroutput> -0.5 </computeroutput> as given by xy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="34" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacemath_1a3389e677b639402cc6eaf924f713b398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T3 &gt;</type>
        <definition>std::vector&lt;T3&gt; math::range</definition>
        <argsstring>(T1 first, T2 last, T3 step)</argsstring>
        <name>range</name>
        <param>
          <type>T1</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>last</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Python-style range generator, including edges. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Range of T&apos;s. Example, <computeroutput> range(0,8,2) </computeroutput> gives a std::vector&lt;int&gt;: <computeroutput> [0,2,4,6,8] </computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="43" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" bodystart="43" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacemath_1abdf8a2bf14cace5e0424feb58ad2e5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type>std::list&lt; T3 &gt;</type>
        <definition>std::list&lt;T3&gt; math::range_list</definition>
        <argsstring>(T1 first, T2 last, T3 step)</argsstring>
        <name>range_list</name>
        <param>
          <type>T1</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>last</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="60" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacemath_1aadb857d9d1370dae374e670f1832ca8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T2 &gt;</type>
        <definition>std::vector&lt;T2&gt; math::LinSpaced</definition>
        <argsstring>(T1 num, T2 min, T2 max)</argsstring>
        <name>LinSpaced</name>
        <param>
          <type>T1</type>
          <declname>num</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>MatLab-style linearly spaced array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of linearly spaced values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value in range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value in range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T2&gt;. Example, <computeroutput> Linspaced(5,1,5) </computeroutput> gives a std::vector&lt;int&gt;: <computeroutput> [1,2,3,4,5] </computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="73" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacemath_1a3ce95fbd77bede9bc5f50374c6d0f58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto math::prod</definition>
        <argsstring>(const Input &amp;in, const From from, const To to)</argsstring>
        <name>prod</name>
        <param>
          <type>const Input &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const From</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const To</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Product operator for containers such as vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector, array or any 1D container with &quot;&lt;code&gt; .data() &lt;/code&gt;&quot; method. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>first element to multiply </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>last element to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T2&gt;. Example, let <computeroutput> my_vector = {1,2,3,4}</computeroutput>. Then <computeroutput> prod(my_vector,0,3) = 24 </computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="89" column="1" bodyfile="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" bodystart="89" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/david/Dropbox/PhD/Programming/DMRG++/DMRG++/source/math/nmspc_math.h" line="27" column="1"/>
  </compounddef>
</doxygen>
