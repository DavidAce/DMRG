<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="multisite_8cpp" kind="file" language="C++">
    <compoundname>multisite.cpp</compoundname>
    <includes refid="num_8h" local="no">math/num.h</includes>
    <includes refid="class__model__finite_8h" local="no">tensors/model/class_model_finite.h</includes>
    <includes refid="class__mpo__site_8h" local="no">tensors/model/class_mpo_site.h</includes>
    <includes refid="class__mps__site_8h" local="no">tensors/state/class_mps_site.h</includes>
    <includes refid="class__state__finite_8h" local="no">tensors/state/class_state_finite.h</includes>
    <includes refid="tools_2common_2fmt_8h" local="no">tools/common/fmt.h</includes>
    <includes refid="log_8h" local="no">tools/common/log.h</includes>
    <includes refid="finite_2measure_8h" local="no">tools/finite/measure.h</includes>
    <includes refid="finite_2mps_8h" local="no">tools/finite/mps.h</includes>
    <includes refid="multisite_8h" local="no">tools/finite/multisite.h</includes>
    <incdepgraph>
      <node id="19">
        <label>class_mpo_parameters.h</label>
        <link refid="class__mpo__parameters_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>measure/state_measure_finite.h</label>
        <link refid="state__measure__finite_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>limits</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="33">
        <label>tools/common/fmt.h</label>
        <link refid="tools_2common_2fmt_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>io/spdlog.h</label>
        <link refid="spdlog_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>tools/finite/measure.h</label>
        <link refid="finite_2measure_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Eigen/src/Core/util/Constants.h</label>
      </node>
      <node id="30">
        <label>class_mps_stash.h</label>
        <link refid="class__mps__stash_8h"/>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="24">
        <label>tools/common/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="6">
        <label>numeric</label>
      </node>
      <node id="25">
        <label>io/fmt.h</label>
        <link refid="io_2fmt_8h"/>
      </node>
      <node id="2">
        <label>math/num.h</label>
        <link refid="num_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>string</label>
      </node>
      <node id="23">
        <label>hdf5_hl.h</label>
      </node>
      <node id="27">
        <label>map</label>
      </node>
      <node id="8">
        <label>tensors/model/class_model_finite.h</label>
        <link refid="class__model__finite_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="43">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorForwardDeclarations.h</label>
      </node>
      <node id="44">
        <label>unsupported/Eigen/CXX11/src/Tensor/TensorMacros.h</label>
      </node>
      <node id="14">
        <label>math/svd/settings.h</label>
        <link refid="svd_2settings_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/DMRG++/source/tools/finite/multisite.cpp</label>
        <link refid="multisite_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>fmt/core.h</label>
      </node>
      <node id="20">
        <label>any</label>
      </node>
      <node id="46">
        <label>tools/finite/multisite.h</label>
        <link refid="multisite_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string_view</label>
      </node>
      <node id="35">
        <label>tools/finite/mps.h</label>
        <link refid="finite_2mps_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>optional</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="18">
        <label>tensors/model/class_mpo_site.h</label>
        <link refid="class__mpo__site_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>general/eigen_tensor_fwd_decl.h</label>
        <link refid="eigen__tensor__fwd__decl_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="41">
        <label>Eigen/src/Core/util/Meta.h</label>
      </node>
      <node id="22">
        <label>hdf5.h</label>
      </node>
      <node id="42">
        <label>Eigen/src/Core/util/ForwardDeclarations.h</label>
      </node>
      <node id="39">
        <label>Eigen/src/Core/util/Macros.h</label>
      </node>
      <node id="21">
        <label>h5pp/details/h5ppHid.h</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="45">
        <label>set</label>
      </node>
      <node id="28">
        <label>tensors/state/class_mps_site.h</label>
        <link refid="class__mps__site_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>complex</label>
      </node>
      <node id="31">
        <label>tensors/state/class_state_finite.h</label>
        <link refid="class__state__finite_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="10">
        <label>config/enums.h</label>
        <link refid="config_2enums_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>david<sp/>on<sp/>2019-06-24.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="num_8h" kindref="compound">math/num.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__model__finite_8h" kindref="compound">tensors/model/class_model_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mpo__site_8h" kindref="compound">tensors/model/class_mpo_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__mps__site_8h" kindref="compound">tensors/state/class_mps_site.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="class__state__finite_8h" kindref="compound">tensors/state/class_state_finite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tools_2common_2fmt_8h" kindref="compound">tools/common/fmt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">tools/common/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2measure_8h" kindref="compound">tools/finite/measure.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="finite_2mps_8h" kindref="compound">tools/finite/mps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="multisite_8h" kindref="compound">tools/finite/multisite.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>3&gt;<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">tools::finite::multisite::get_dimensions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/>std::optional&lt;std::vector&lt;size_t&gt;&gt;<sp/>sites)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>sites)<sp/>sites<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.value().empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::array&lt;long,<sp/>3&gt;{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>3&gt;<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>{};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(sites.value().begin(),<sp/>sites.value().end());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.value().front()<sp/>&gt;<sp/>sites.value().back())</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Given<sp/>site<sp/>list<sp/>is<sp/>not<sp/>increasing:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sites.value()));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[1]<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(sites.value().front()).<ref refid="classclass__mps__site_1a595a7027685bf01896f00cb0a9dbf779" kindref="member">get_M</ref>().dimension(1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/>=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(sites.value().back()).<ref refid="classclass__mps__site_1a595a7027685bf01896f00cb0a9dbf779" kindref="member">get_M</ref>().dimension(2);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites.value())<sp/>{<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[0]<sp/>*=<sp/>state.<ref refid="classclass__state__finite_1a8cff3eaf9bad48263fe1b9056ac62592" kindref="member">get_mps_site</ref>(site).<ref refid="classclass__mps__site_1a595a7027685bf01896f00cb0a9dbf779" kindref="member">get_M</ref>().dimension(0);<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespacetools_1_1finite_1_1multisite_1a823242ff60f019584ad8eabcbf445930" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>4&gt;<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">tools::finite::multisite::get_dimensions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>std::optional&lt;std::vector&lt;size_t&gt;&gt;<sp/>sites)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>sites)<sp/>sites<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.value().empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.value().front()<sp/>&gt;<sp/>sites.value().back())</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Given<sp/>site<sp/>list<sp/>is<sp/>not<sp/>increasing:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sites.value()));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>{};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[0]<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(sites.value().front()).MPO().dimension(0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[1]<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(sites.value().back()).MPO().dimension(1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>sites.value())<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/>*=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(site).MPO().dimension(2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[3]<sp/>*=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(site).MPO().dimension(3);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="namespacetools_1_1finite_1_1multisite_1ae112915e600c3a27ee0ca4a547bb5f86" refkind="member"><highlight class="normal">std::array&lt;long,<sp/>4&gt;<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1ae112915e600c3a27ee0ca4a547bb5f86" kindref="member">tools::finite::multisite::get_dimensions_squared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__model__finite" kindref="compound">class_model_finite</ref><sp/>&amp;<ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>,<sp/>std::optional&lt;std::vector&lt;size_t&gt;&gt;<sp/>active_sites)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>active_sites)<sp/>active_sites<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.active_sites;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active_sites.value().empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::array&lt;long,<sp/>4&gt;{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active_sites.value().front()<sp/>&gt;<sp/>active_sites.value().back())</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Active<sp/>site<sp/>list<sp/>is<sp/>not<sp/>increasing:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>active_sites.value()));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;long,<sp/>4&gt;<sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>{};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[0]<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(active_sites.value().front()).MPO2().dimension(0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[1]<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(active_sites.value().back()).MPO2().dimension(1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;site<sp/>:<sp/>active_sites.value())<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[2]<sp/>*=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(site).MPO2().dimension(2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>[3]<sp/>*=<sp/><ref refid="namespacetools_1_1finite_1_1print_1a43650762255b8212f67c4f943a1d4ccf" kindref="member">model</ref>.get_mpo(site).MPO2().dimension(3);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1print_1a1e1262915b86672358ac45af9dbb46ef" kindref="member">dimensions</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" kindref="member">tools::finite::multisite::get_problem_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/>std::optional&lt;std::vector&lt;size_t&gt;&gt;<sp/>active_sites)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">get_dimensions</ref>(state,<sp/>std::move(active_sites));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(dims[0]<sp/>*<sp/>dims[1]<sp/>*<sp/>dims[2]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="namespacetools_1_1finite_1_1multisite_1a02d8e00d2db2fe80eabc7e14b88e61f9" refkind="member"><highlight class="normal">std::vector&lt;size_t&gt;<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a02d8e00d2db2fe80eabc7e14b88e61f9" kindref="member">tools::finite::multisite::generate_site_list</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_sites,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_sites)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max_sites<sp/>&lt;<sp/>min_sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;generate<sp/>site<sp/>list:<sp/>asked<sp/>for<sp/>max<sp/>sites<sp/>&lt;<sp/>min<sp/>sites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Multisite<sp/>activation:<sp/>site<sp/>{}<sp/>|<sp/>direction<sp/>{}<sp/>|<sp/>sites<sp/>min<sp/>{}<sp/>max<sp/>{}<sp/>|<sp/>max<sp/>problem<sp/>size<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>(),<sp/>min_sites,<sp/>max_sites,<sp/>threshold);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_position<sp/>=<sp/>state.<ref refid="classclass__state__finite_1af27b5634665d41f1393d1674396f8530" kindref="member">get_position</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>initial_position;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at_edge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>initial_position<sp/>&lt;=<sp/>-1<sp/>or<sp/>initial_position<sp/>&gt;=<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sites;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizes;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::array&lt;long,<sp/>3&gt;&gt;<sp/>shape;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>long<sp/>max_pos<sp/>=<sp/>std::clamp(initial_position<sp/>,<sp/>initial_position,<sp/>std::min&lt;long&gt;(length-1,<sp/>static_cast&lt;const<sp/>long&gt;(max_sites<sp/>-<sp/>1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>long<sp/>min_pos<sp/>=<sp/>std::clamp(initial_position,<sp/>initial_position,<sp/>std::min&lt;long&gt;(length-1,<sp/>static_cast&lt;const<sp/>long&gt;(max_sites<sp/>-<sp/>1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>at_edge){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_pos<sp/>=<sp/>initial_position;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min_pos<sp/>=<sp/>initial_position;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(direction<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_pos<sp/>=<sp/>std::clamp&lt;long&gt;(initial_position<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_sites),<sp/>initial_position,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">length</ref>-1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_pos<sp/>=<sp/>initial_position;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_pos<sp/>=<sp/>std::clamp&lt;long&gt;(initial_position<sp/>+<sp/>1,<sp/>initial_position,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a1d47691c527644e67b5fbb53f46aa7a9" kindref="member">length</ref>-1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_pos<sp/>=<sp/>std::clamp&lt;long&gt;(max_pos<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_sites)<sp/>+<sp/>1,<sp/>0,<sp/>initial_position<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacenum_1a842304d951b0668add074fa501f39ada" kindref="member">range</ref><sp/>=<sp/>num::range&lt;size_t&gt;(min_pos,max_pos+1);<sp/></highlight><highlight class="comment">//<sp/>+1<sp/>to<sp/>include<sp/>last<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(direction<sp/>&lt;<sp/>0)<sp/>std::reverse(<ref refid="namespacenum_1a842304d951b0668add074fa501f39ada" kindref="member">range</ref>.begin(),<ref refid="namespacenum_1a842304d951b0668add074fa501f39ada" kindref="member">range</ref>.end());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sites.emplace_back(initial_position);<sp/></highlight><highlight class="comment">//<sp/>Current<sp/>position<sp/>is<sp/>always<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizes.emplace_back(<ref refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" kindref="member">get_problem_size</ref>(state,<sp/>sites));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.emplace_back(<ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">get_dimensions</ref>(state,<sp/>sites));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>pos<sp/>:<sp/><ref refid="namespacenum_1a842304d951b0668add074fa501f39ada" kindref="member">range</ref>){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(sites.begin(),sites.end(),<sp/>pos)<sp/>!=<sp/>sites.end())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>first<sp/>site</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sites.emplace_back(pos);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizes.emplace_back(<ref refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" kindref="member">get_problem_size</ref>(state,<sp/>sites));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.emplace_back(<ref refid="namespacetools_1_1finite_1_1multisite_1a5ff531639e3f8e3a3a5aed3eb66edf9e" kindref="member">get_dimensions</ref>(state,<sp/>sites));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Candidate<sp/>sites<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sites);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;trace(</highlight><highlight class="stringliteral">&quot;Candidate<sp/>sizes<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>sizes);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>best<sp/>cost.<sp/>Threshold<sp/>depends<sp/>on<sp/>optSpace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>All<sp/>costs<sp/>are<sp/>equal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>take<sp/>all<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>Costs<sp/>increase<sp/>indefinitely<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>take<sp/>until<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>3:<sp/>Costs<sp/>increase<sp/>and<sp/>saturate<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>take<sp/>until<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>reason;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.empty()<sp/>and<sp/>at_edge)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>select<sp/>sites<sp/>beyond<sp/>the<sp/>edge&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allequal<sp/>=<sp/>std::all_of(sizes.begin(),<sp/>sizes.end(),<sp/>[sizes](</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/>return<sp/>c<sp/>==<sp/>sizes.front();<sp/>});</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/><sp/><sp/><sp/><sp/>=<sp/>sizes.back();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&lt;<sp/>threshold<sp/>and<sp/>sites.size()<sp/>==<sp/>max_sites)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reached<sp/>max<sp/>sites&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&lt;=<sp/>threshold<sp/>and<sp/>sites.size()<sp/>&lt;=<sp/>max_sites)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;good<sp/>problem<sp/>shape<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.size()<sp/>&lt;=<sp/>min_sites)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;at<sp/>least<sp/>{}<sp/>sites<sp/>had<sp/>to<sp/>be<sp/>kept&quot;</highlight><highlight class="normal">,<sp/>min_sites);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allequal<sp/>and<sp/>sites.size()<sp/>&lt;=<sp/>max_sites)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;problem<sp/>sizes<sp/>are<sp/>equal:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;At<sp/>least<sp/>two<sp/>sites<sp/>required!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sites.empty())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;No<sp/>sites<sp/>for<sp/>a<sp/>jump&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sites.pop_back();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizes.pop_back();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.pop_back();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(sites.begin(),<sp/>sites.end());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at_edge<sp/>or<sp/>shape.empty()<sp/>or<sp/>sizes.empty())</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Multisite<sp/>activation:<sp/>site<sp/>{}<sp/>|<sp/>direction<sp/>{}<sp/>|<sp/>sites<sp/>min<sp/>{}<sp/>max<sp/>{}<sp/>|<sp/>max<sp/>problem<sp/>size<sp/>{}<sp/>|<sp/>chosen<sp/>sites<sp/>{}<sp/>|<sp/>reason<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_position,<sp/>direction,<sp/>min_sites,<sp/>max_sites,<sp/>threshold,<sp/>sites,<sp/>reason);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;debug(</highlight><highlight class="stringliteral">&quot;Multisite<sp/>activation:<sp/>site<sp/>{}<sp/>|<sp/>direction<sp/>{}<sp/>|<sp/>sites<sp/>min<sp/>{}<sp/>max<sp/>{}<sp/>|<sp/>max<sp/>problem<sp/>size<sp/>{}<sp/>|<sp/>chosen<sp/>sites<sp/>{}<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shape<sp/>{}<sp/>=<sp/>{}<sp/>|<sp/>reason<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_position,<sp/>direction,<sp/>min_sites,<sp/>max_sites,<sp/>threshold,<sp/>sites,<sp/>shape.back(),<sp/>sizes.back(),<sp/>reason);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>at_edge<sp/>and<sp/>sites.size()<sp/>&lt;<sp/>min_sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Activated<sp/>sites<sp/>({})<sp/>&lt;<sp/>min_sites<sp/>({})&quot;</highlight><highlight class="normal">,<sp/>sites.size(),<sp/>min_sites));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>at_edge<sp/>and<sp/>sites.size()<sp/>&gt;<sp/>max_sites)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight><highlight class="stringliteral">&quot;Activated<sp/>sites<sp/>({})<sp/>&gt;<sp/>max_sites<sp/>({})&quot;</highlight><highlight class="normal">,<sp/>sites.size(),<sp/>max_sites));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sites;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="namespacetools_1_1finite_1_1multisite_1a8aebfe574d18e45cc9e7a7f483b02ff2" refkind="member"><highlight class="normal">std::vector&lt;size_t&gt;<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a8aebfe574d18e45cc9e7a7f483b02ff2" kindref="member">tools::finite::multisite::generate_truncated_site_list</ref>(<ref refid="classclass__state__finite" kindref="compound">class_state_finite</ref><sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chi_lim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_sites,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_sites)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>active_sites<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a02d8e00d2db2fe80eabc7e14b88e61f9" kindref="member">generate_site_list</ref>(state,<sp/>threshold,<sp/>max_sites,<sp/>min_sites);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(active_sites.size()<sp/>==<sp/>max_sites)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_sites;<sp/></highlight><highlight class="comment">//<sp/>Fastest<sp/>outcome</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>state.<ref refid="classclass__state__finite_1a6fc37c3c3d3ab22f2896d06c342a0323" kindref="member">active_sites</ref>.clear();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Consider<sp/>that<sp/>the<sp/>active<sp/>site<sp/>list<sp/>may<sp/>be<sp/>limited<sp/>by<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&gt;<sp/>0<sp/>and<sp/>active_sites.back()<sp/>==<sp/>state.<ref refid="classclass__state__finite_1acef57556e5eb3ab21c28588aaae9575b" kindref="member">get_length</ref>()<sp/>-<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_sites;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state.<ref refid="classclass__state__finite_1a5481332aa5f53d1708dd1d21fff2b6cb" kindref="member">get_direction</ref>()<sp/>&lt;<sp/>0<sp/>and<sp/>active_sites.front()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_sites;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>activating<sp/>more<sp/>sites<sp/>by<sp/>truncating<sp/>some<sp/>sites<sp/>ahead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>best_num_sites<sp/>=<sp/>min_sites;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_sites<sp/>=<sp/>min_sites;<sp/>num_sites<sp/>&lt;=<sp/>max_sites;<sp/>num_sites++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state_copy<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1af75908c3d119e292a035d156f50d1463" kindref="member">tools::finite::mps::truncate_next_sites</ref>(state_copy,<sp/>chi_lim,<sp/>num_sites);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_active_sites<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a02d8e00d2db2fe80eabc7e14b88e61f9" kindref="member">generate_site_list</ref>(state_copy,<sp/>threshold,<sp/>num_sites,<sp/>min_sites);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_active_sites.size()<sp/>&gt;<sp/>active_sites.size())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_num_sites<sp/>=<sp/>num_sites;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_sites<sp/><sp/><sp/>=<sp/>new_active_sites;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1_1finite_1_1mps_1af75908c3d119e292a035d156f50d1463" kindref="member">tools::finite::mps::truncate_next_sites</ref>(state,<sp/>chi_lim,<sp/>best_num_sites);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resulting_sites<sp/>=<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a02d8e00d2db2fe80eabc7e14b88e61f9" kindref="member">generate_site_list</ref>(state,<sp/>threshold,<sp/>max_sites,<sp/>min_sites);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Problem<sp/>size<sp/>{}<sp/>|<sp/>active<sp/>sites:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1multisite_1a0ed35897f5fabcbc1d55233b85418898" kindref="member">get_problem_size</ref>(state,<sp/>resulting_sites),<sp/>resulting_sites);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetools_1a68a5becb2c794cab385cbb38d9f0d44a" kindref="member">tools::log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Bond<sp/>dimensions<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacetools_1_1finite_1_1measure_1a017b45589c0286dc0f5ccf99d3f669c2" kindref="member">tools::finite::measure::bond_dimensions</ref>(state));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resulting_sites;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/DMRG++/source/tools/finite/multisite.cpp"/>
  </compounddef>
</doxygen>
