<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespace_type_check" kind="namespace" language="C++">
    <compoundname>TypeCheck</compoundname>
    <innerclass refid="struct_type_check_1_1is__instance__of" prot="public">TypeCheck::is_instance_of</innerclass>
    <innerclass refid="struct_type_check_1_1is__instance__of_3_01_template_00_01_template_3_01_args_8_8_8_01_4_01_4" prot="public">TypeCheck::is_instance_of&lt; Template, Template&lt; Args... &gt; &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a943d73d49d1b8ba15d1780105cb0a302" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template data())</type>
        <definition>using TypeCheck::Data_t = typedef decltype(std::declval&lt;T&gt;().template data())</definition>
        <argsstring></argsstring>
        <name>Data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="11" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a34eb17230046987029c1f1c7d574aa89" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template size())</type>
        <definition>using TypeCheck::Size_t = typedef decltype(std::declval&lt;T&gt;().template size())</definition>
        <argsstring></argsstring>
        <name>Size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="12" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a69b99399a457c54efa8cb178ec239564" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template dimensions())</type>
        <definition>using TypeCheck::Dims_t = typedef decltype(std::declval&lt;T&gt;().template dimensions())</definition>
        <argsstring></argsstring>
        <name>Dims_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="13" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a5b78114d2bfa9999d5ff53e71c183d90" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template rank())</type>
        <definition>using TypeCheck::Rank_t = typedef decltype(std::declval&lt;T&gt;().template rank())</definition>
        <argsstring></argsstring>
        <name>Rank_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="14" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a6ec959351d37f9331b7f795238abcc40" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template setZero())</type>
        <definition>using TypeCheck::Setz_t = typedef decltype(std::declval&lt;T&gt;().template setZero())</definition>
        <argsstring></argsstring>
        <name>Setz_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="15" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1ad76016626d2530239e0bc2d09b2084c3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template matrix())</type>
        <definition>using TypeCheck::Matr_t = typedef decltype(std::declval&lt;T&gt;().template matrix())</definition>
        <argsstring></argsstring>
        <name>Matr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="16" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1afba6d111f934a518472743c1c85aa450" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::Scalar</type>
        <definition>using TypeCheck::Scal_t = typedef typename T::Scalar</definition>
        <argsstring></argsstring>
        <name>Scal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="17" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1af7c6e5e9d9492ac1f52808cc0cf82847" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::value_type</type>
        <definition>using TypeCheck::Valt_t = typedef typename T::value_type</definition>
        <argsstring></argsstring>
        <name>Valt_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="18" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a7fab9bae09a9a1780d5811a39d65e1ce" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Data_t, T &gt;</type>
        <definition>using TypeCheck::has_member_data = typedef std::experimental::is_detected&lt;Data_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_member_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="20" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1adf9e7896f673211b9a8e09aa6a2f7d50" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Size_t, T &gt;</type>
        <definition>using TypeCheck::has_member_size = typedef std::experimental::is_detected&lt;Size_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_member_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="21" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1af12f6e7c0294a7ba57062bb101042fcd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Dims_t, T &gt;</type>
        <definition>using TypeCheck::has_member_dimensions = typedef std::experimental::is_detected&lt;Dims_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>has_member_dimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="22" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a9c01daf500c30c3a32e465c2903fa19a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Scal_t, T &gt;</type>
        <definition>using TypeCheck::has_member_scalar = typedef std::experimental::is_detected&lt;Scal_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>has_member_scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="23" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a11011470526cd2f482b0a2c34ee32a69" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Valt_t, T &gt;</type>
        <definition>using TypeCheck::has_member_value_type = typedef std::experimental::is_detected&lt;Valt_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>has_member_value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="24" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1ae2cb7633dcce444eb0ecdb1abeb199e2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Setz_t, T &gt;</type>
        <definition>using TypeCheck::is_eigen = typedef std::experimental::is_detected&lt;Setz_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>is_eigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="25" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a48a6ef90e8a0c3a4ba0a65a6d2ba4dce" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Matr_t, T &gt;</type>
        <definition>using TypeCheck::is_matrix = typedef std::experimental::is_detected&lt;Matr_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>is_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="26" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a516386ca02c155ab780634deca9c6c53" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::experimental::is_detected&lt; Rank_t, T &gt;</type>
        <definition>using TypeCheck::is_tensor = typedef std::experimental::is_detected&lt;Rank_t , T&gt;</definition>
        <argsstring></argsstring>
        <name>is_tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="27" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="nmspc__type__check_8h_1a75531bee90fbf83ffa3c253c1ac9707f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_type_check_1_1is__instance__of" kindref="compound">is_instance_of</ref>&lt; Eigen::EigenBase, T &gt;</type>
        <definition>using TypeCheck::is_ofEigen = typedef is_instance_of&lt;Eigen::EigenBase,T&gt;</definition>
        <argsstring></argsstring>
        <name>is_ofEigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_type_check.h" line="37" column="1" bodyfile="source/general/nmspc_type_check.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="source/general/nmspc_type_check.h" line="10" column="1"/>
  </compounddef>
</doxygen>
