<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classclass__measurement" kind="class" language="C++" prot="public">
    <compoundname>class_measurement</compoundname>
    <includes refid="class__measurement_8h" local="no">class_measurement.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classclass__measurement_1ad50d687d36cd5380211537e414f1dafa" prot="public" static="no">
        <type>double</type>
        <definition>using class_measurement::Scalar =  double</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="22" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classclass__measurement_1a008eb2eef22d635ec569b7ac94f14840" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classclass__superblock" kindref="compound">class_superblock</ref> &gt;</type>
        <definition>std::shared_ptr&lt;class_superblock&gt; class_measurement::superblock</definition>
        <argsstring></argsstring>
        <name>superblock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="24" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__measurement_1a55863a6ce740a6271a168cd916a78404" prot="private" static="no" mutable="no">
        <type><ref refid="classclass__custom__cout" kindref="compound">class_custom_cout</ref></type>
        <definition>class_custom_cout class_measurement::ccout</definition>
        <argsstring></argsstring>
        <name>ccout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="25" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classclass__measurement_1acd25e3f13f2c4dd39ad866c241adf848" prot="public" static="no" mutable="no">
        <type>SimulationType</type>
        <definition>SimulationType class_measurement::sim</definition>
        <argsstring></argsstring>
        <name>sim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="28" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__measurement_1a66bdf26b1fcb15ae3ad3545c1c4e686f" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double class_measurement::variance1</definition>
        <argsstring></argsstring>
        <name>variance1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="33" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__measurement_1a055480ec3e9a2794070a40568db0698b" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double class_measurement::variance2</definition>
        <argsstring></argsstring>
        <name>variance2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="33" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classclass__measurement_1a83d9e62bbbdedb60bd8eb8a0a3ff182a" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double class_measurement::variance3</definition>
        <argsstring></argsstring>
        <name>variance3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="33" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classclass__measurement_1a4bb2e3bce2982dd529c9c87bd984df80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::first_moment</definition>
        <argsstring>()</argsstring>
        <name>first_moment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="30" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="32" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a79ee243a034a38491931bab090012cfe" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>class_measurement::class_measurement</definition>
        <argsstring>(std::shared_ptr&lt; class_superblock &gt; superblock_, SimulationType sim_)</argsstring>
        <name>class_measurement</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classclass__superblock" kindref="compound">class_superblock</ref> &gt;</type>
          <declname>superblock_</declname>
        </param>
        <param>
          <type>SimulationType</type>
          <declname>sim_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="31" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a49e35729746508cb15ad44f147f96d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_expectationvalue</definition>
        <argsstring>(const Eigen::Tensor&lt; double, 4 &gt; &amp;MPO)</argsstring>
        <name>get_expectationvalue</name>
        <param>
          <type>const Eigen::Tensor&lt; double, 4 &gt; &amp;</type>
          <declname>MPO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a89f8b4abb60eedd59bed7afa79dcb840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_expectationvalue</definition>
        <argsstring>(const Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;MPO)</argsstring>
        <name>get_expectationvalue</name>
        <param>
          <type>const Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;</type>
          <declname>MPO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a95da5dbc822ec7ccea779f0398260991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_expectationvalue_sq</definition>
        <argsstring>(const Eigen::Tensor&lt; double, 4 &gt; &amp;MPO)</argsstring>
        <name>get_expectationvalue_sq</name>
        <param>
          <type>const Eigen::Tensor&lt; double, 4 &gt; &amp;</type>
          <declname>MPO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a63f60e9386f2467cb16393699fd748dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_expectationvalue_sq</definition>
        <argsstring>(const Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;MPO)</argsstring>
        <name>get_expectationvalue_sq</name>
        <param>
          <type>const Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;</type>
          <declname>MPO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a62aaca25f45b1d5548974f3149c147b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_energy</definition>
        <argsstring>()</argsstring>
        <name>get_energy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="38" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="132" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a73e89873bd33e9749b3ffc46679ad1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_entropy</definition>
        <argsstring>()</argsstring>
        <name>get_entropy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current energy by contracting the current MPS with the Hamiltonian MPO. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="39" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a45614ac23314d7088810aaaedc4acde8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_variance</definition>
        <argsstring>()</argsstring>
        <name>get_variance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current entropy <formula id="36">$ S = - \sum_n \lambda_n log( \lambda_n) $</formula>, where <formula id="37">$\lambda_n $</formula> are elements of <formula id="38">$ \Lambda^A$</formula> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="40" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="165" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1afccc947a39a980866ceec2122409a6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_variance1</definition>
        <argsstring>()</argsstring>
        <name>get_variance1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current variance. A low value tells you that you are close to an eigenstate of the Hamiltonian. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="41" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a7b8f6cf52a773b030a8eb0296f11a34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_variance2</definition>
        <argsstring>()</argsstring>
        <name>get_variance2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current variance. A low value tells you that you are close to an eigenstate of the Hamiltonian. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="42" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a924851137b094fc95bb6e910ed99d107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_variance3</definition>
        <argsstring>()</argsstring>
        <name>get_variance3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current variance. A low value tells you that you are close to an eigenstate of the Hamiltonian. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="43" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a27fe622ef8c7af31b631a7ea3f37aa44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_truncation_error</definition>
        <argsstring>()</argsstring>
        <name>get_truncation_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the current variance. A low value tells you that you are close to an eigenstate of the Hamiltonian. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="44" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a9755aba9df4f55f90267c5d3937f49d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double class_measurement::get_second_cumulant</definition>
        <argsstring>()</argsstring>
        <name>get_second_cumulant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="45" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1a39cf00157961886c5383114832d7bc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long class_measurement::get_chi</definition>
        <argsstring>()</argsstring>
        <name>get_chi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="46" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classclass__measurement_1af9b1c1f1de39cbb5d33781d62bb54e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long class_measurement::get_chain_length</definition>
        <argsstring>()</argsstring>
        <name>get_chain_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/mps_routines/class_measurement.h" line="47" column="1" bodyfile="source/mps_routines/class_measurement.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for measuring observables This class extracts observables, expectation values, like energy and entropy from the MPS, as well as other useful numbers like <formula id="0">$\chi$</formula> and truncation errors. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="source/mps_routines/class_measurement.h" line="20" column="1" bodyfile="source/mps_routines/class_measurement.h" bodystart="20" bodyend="48"/>
    <listofallmembers>
      <member refid="classclass__measurement_1a55863a6ce740a6271a168cd916a78404" prot="private" virt="non-virtual"><scope>class_measurement</scope><name>ccout</name></member>
      <member refid="classclass__measurement_1a79ee243a034a38491931bab090012cfe" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>class_measurement</name></member>
      <member refid="classclass__measurement_1a4bb2e3bce2982dd529c9c87bd984df80" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>first_moment</name></member>
      <member refid="classclass__measurement_1af9b1c1f1de39cbb5d33781d62bb54e21" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_chain_length</name></member>
      <member refid="classclass__measurement_1a39cf00157961886c5383114832d7bc49" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_chi</name></member>
      <member refid="classclass__measurement_1a62aaca25f45b1d5548974f3149c147b2" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_energy</name></member>
      <member refid="classclass__measurement_1a73e89873bd33e9749b3ffc46679ad1ba" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_entropy</name></member>
      <member refid="classclass__measurement_1a49e35729746508cb15ad44f147f96d8c" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_expectationvalue</name></member>
      <member refid="classclass__measurement_1a89f8b4abb60eedd59bed7afa79dcb840" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_expectationvalue</name></member>
      <member refid="classclass__measurement_1a95da5dbc822ec7ccea779f0398260991" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_expectationvalue_sq</name></member>
      <member refid="classclass__measurement_1a63f60e9386f2467cb16393699fd748dc" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_expectationvalue_sq</name></member>
      <member refid="classclass__measurement_1a9755aba9df4f55f90267c5d3937f49d4" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_second_cumulant</name></member>
      <member refid="classclass__measurement_1a27fe622ef8c7af31b631a7ea3f37aa44" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_truncation_error</name></member>
      <member refid="classclass__measurement_1a45614ac23314d7088810aaaedc4acde8" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_variance</name></member>
      <member refid="classclass__measurement_1afccc947a39a980866ceec2122409a6a1" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_variance1</name></member>
      <member refid="classclass__measurement_1a7b8f6cf52a773b030a8eb0296f11a34c" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_variance2</name></member>
      <member refid="classclass__measurement_1a924851137b094fc95bb6e910ed99d107" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>get_variance3</name></member>
      <member refid="classclass__measurement_1ad50d687d36cd5380211537e414f1dafa" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>Scalar</name></member>
      <member refid="classclass__measurement_1acd25e3f13f2c4dd39ad866c241adf848" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>sim</name></member>
      <member refid="classclass__measurement_1a008eb2eef22d635ec569b7ac94f14840" prot="private" virt="non-virtual"><scope>class_measurement</scope><name>superblock</name></member>
      <member refid="classclass__measurement_1a66bdf26b1fcb15ae3ad3545c1c4e686f" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>variance1</name></member>
      <member refid="classclass__measurement_1a055480ec3e9a2794070a40568db0698b" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>variance2</name></member>
      <member refid="classclass__measurement_1a83d9e62bbbdedb60bd8eb8a0a3ff182a" prot="public" virt="non-virtual"><scope>class_measurement</scope><name>variance3</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
