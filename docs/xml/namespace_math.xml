<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_math" kind="namespace" language="C++">
    <compoundname>Math</compoundname>
    <innerclass refid="class_math_1_1gsl__quad" prot="public">Math::gsl_quad</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_math_1a3345264a3373e4542c7baf43f5e1b713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Math::mod</definition>
        <argsstring>(const T1 x, const T2 y)</argsstring>
        <name>mod</name>
        <param>
          <type>const T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>MatLab-style modulo operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>first number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>second number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>modulo of x and y. Example, <computeroutput> mod(-0.5,10) = 9.5 </computeroutput>, instead of <computeroutput> -0.5 </computeroutput> as given by xy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_math.h" line="51" column="1" bodyfile="source/general/nmspc_math.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1a30ec6673d6cc181cf3e16aad96978f0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T2 &gt;</type>
        <definition>std::vector&lt; T2 &gt; Math::LinSpaced</definition>
        <argsstring>(T1 num, T2 min, T2 max)</argsstring>
        <name>LinSpaced</name>
        <param>
          <type>T1</type>
          <declname>num</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>MatLab-style linearly spaced array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of linearly spaced values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value in range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value in range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T2&gt;. Example, <computeroutput> Linspaced(5,1,5) </computeroutput> gives a std::vector&lt;int&gt;: <computeroutput> [1,2,3,4,5] </computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_math.h" line="63" column="1" bodyfile="source/general/nmspc_math.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1a55a57f4eef5ea3b56fd048142a35d677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Math::prod</definition>
        <argsstring>(const Input &amp;in, const From from, const To to)</argsstring>
        <name>prod</name>
        <param>
          <type>const Input &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const From</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const To</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Product operator for containers such as vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector, array or any 1D container with &quot;&lt;code&gt; .data() &lt;/code&gt;&quot; method. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>first element to multiply </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>last element to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T2&gt;. Example, let <computeroutput> my_vector = {1,2,3,4}</computeroutput>. Then <computeroutput> prod(my_vector,0,3) = 24 </computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_math.h" line="78" column="1" bodyfile="source/general/nmspc_math.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1a2ba7d258e03a17abf9707d1fdfd20995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegerType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_integral&lt;IntegerType&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>IntegerType</type>
        <definition>IntegerType Math::ipow</definition>
        <argsstring>(IntegerType x, IntegerType p)</argsstring>
        <name>ipow</name>
        <param>
          <type>IntegerType</type>
          <declname>x</declname>
        </param>
        <param>
          <type>IntegerType</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>&quot;pow&quot;, x^p for integers x and p using recursion </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_math.h" line="85" column="1" bodyfile="source/general/nmspc_math.h" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1a7cd16bfbced6aa47dd31fd44474d07f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>Math::compute_integral</definition>
        <argsstring>(F func, std::pair&lt; double, double &gt; const &amp;range, double epsabs=1.49e-8, double epsrel=1.49e-8, int limit=50)</argsstring>
        <name>compute_integral</name>
        <param>
          <type>F</type>
          <declname>func</declname>
        </param>
        <param>
          <type>std::pair&lt; double, double &gt; const &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsabs</declname>
          <defval>1.49e-8</defval>
        </param>
        <param>
          <type>double</type>
          <declname>epsrel</declname>
          <defval>1.49e-8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
<para>Numerical integrations. </para>        </briefdescription>
        <detaileddescription>
<para>Examples of integration:</para><para><formula id="1">$ \int_0^1 x^2 dx = $</formula> <programlisting><codeline><highlight class="normal"><ref refid="namespace_math_1a7cd16bfbced6aa47dd31fd44474d07f0" kindref="member">compute_integral</ref>([](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x*x;<sp/>},<sp/>{0,1})</highlight></codeline>
</programlisting></para><para><formula id="2">$ \int_1^\infty x^{-2} dx = $</formula> <programlisting><codeline><highlight class="normal"><ref refid="namespace_math_1a7cd16bfbced6aa47dd31fd44474d07f0" kindref="member">compute_integral</ref>([](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1/(x*x);<sp/>},<sp/>{1,INFINITY})</highlight></codeline>
</programlisting></para><para><formula id="3">$ \int_{-\infty}^\infty \exp(-x^2) dx = $</formula> <programlisting><codeline><highlight class="normal"><ref refid="namespace_math_1a7cd16bfbced6aa47dd31fd44474d07f0" kindref="member">compute_integral</ref>([](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::exp(-x*x);<sp/>},<sp/>{-INFINITY,INFINITY})</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/general/nmspc_math.h" line="167" column="1" bodyfile="source/general/nmspc_math.h" bodystart="167" bodyend="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Small convenience-type math functions like modulo and numerical integration using GSL. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="source/general/nmspc_math.h" line="35" column="1"/>
  </compounddef>
</doxygen>
