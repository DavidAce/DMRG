import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

np.set_printoptions(precision=20)
np.set_printoptions(suppress=False)



a = (0.0 + 1.0j) * 1e-1
b = (0.0 + 1.0j) * 1e-2
c = (0.0 + 1.0j) * 1e-3
d = (0.0 + 1.0j) * 1e-4





g1a           = np.complex256(0.9677704155066162-0.2518351561717304j)
g1b           = np.complex256(0.9996762444887033-0.0254619265725456j)
g1c           = np.complex256(0.9999972094804217-0.0025464720664932j)
g1d           = np.complex256(1.0000004193214893-0.0002546474860687j)
g1ia          = np.complex256(1.0000004528518069+0.0000000000000002j)
g1ib          = np.complex256(1.0000004517553076+0.0000000000000002j)
g1ic          = np.complex256(1.0000004517442571+0.0000000000000001j)
g1id          = np.complex256(1.0000004517441432+0.0000000000000001j)
lambdaIA      = np.complex256(1.0000004539594702+0.0000000000000001j)
lambdaIB      = np.complex256(1.0000004517664718+0.0000000000000002j)
lambdaIC      = np.complex256(1.0000004517443708-0.0000000000000000j)
lambdaID      = np.complex256(1.0000004517441428-0.0000000000000001j)
g1io          = np.complex256(1.0000004517441436+0.0000000000000003j)

G1A           = np.complex256( np.power(g1a/g1ia, 0.5)  )
G1B           = np.complex256( np.power(g1b/g1ib, 0.5)  )
G1C           = np.complex256( np.power(g1c/g1ic, 0.5)  )
G1D           = np.complex256( np.power(g1d/g1id, 0.5)  )




e1a_ = (G1A - G1A.conjugate()) / (2.0 * a)
e1b_ = (G1B - G1B.conjugate()) / (2.0 * b)
e1c_ = (G1C - G1C.conjugate()) / (2.0 * c)
e1d_ = (G1D - G1D.conjugate()) / (2.0 * d)


varG1A = np.log( np.abs(G1A)**2.0) /(a*a)
varG1B = np.log( np.abs(G1B)**2.0) /(b*b)
varG1C = np.log( np.abs(G1C)**2.0) /(c*c)
varG1D = np.log( np.abs(G1D)**2.0) /(d*d)

varG1A_ = (np.log( G1A ) + np.log(G1A.conjugate()))/(a*a)
varG1B_ = (np.log( G1B ) + np.log(G1B.conjugate()))/(b*b)
varG1C_ = (np.log( G1C ) + np.log(G1C.conjugate()))/(c*c)
varG1D_ = (np.log( G1D ) + np.log(G1D.conjugate()))/(d*d)

varG1A__ = ((G1A + G1A.conjugate() - 2.0) / (a * a) - e1a_ * e1a_)
varG1B__ = ((G1B + G1B.conjugate() - 2.0) / (b * b) - e1b_ * e1b_)
varG1C__ = ((G1C + G1C.conjugate() - 2.0) / (c * c) - e1c_ * e1c_)
varG1D__ = ((G1D + G1D.conjugate() - 2.0) / (d * d) - e1d_ * e1d_)

print("varG1A                      = ", '{:.20f}'.format(varG1A ))
print("varG1A_                     = ", '{:.20f}'.format(varG1A_ ))
print("varG1A__                    = ", '{:.20f}'.format(varG1A__ ))
print("varG1B                      = ", '{:.20f}'.format(varG1B ))
print("varG1B_                     = ", '{:.20f}'.format(varG1B_ ))
print("varG1B__                    = ", '{:.20f}'.format(varG1B__ ))
print("varG1C                      = ", '{:.20f}'.format(varG1C ))
print("varG1C_                     = ", '{:.20f}'.format(varG1C_ ))
print("varG1C__                    = ", '{:.20f}'.format(varG1C__ ))
print("varG1D                      = ", '{:.20f}'.format(varG1D ))
print("varG1D_                     = ", '{:.20f}'.format(varG1D_ ))
print("varG1D__                    = ", '{:.20f}'.format(varG1D__ ))





exit(0)




L = 1678616
g1a = 1.0000000001446518 -0.0000002486531387j
g1b = 1.0000000001445497 -0.0000004973062803j
g1c = 1.0000000001443941 -0.0000007459594145j
g1i = 1.0000000002889662 +0.0000000000000003j
# g1a       = 1.0000000001446763 -0.0000000002486530j
# g1i       = 1.0000000002889604 +0.0000000000000026j
l = 2.0
G1a       = np.power(g1a/ g1i, 1/l );
G1b       = np.power(g1b/ g1i, 1/l );
G1c       = np.power(g1c/ g1i, 1/l );

print ("G1a = ",G1a , "|G1a| = ", np.abs(G1a ))
print ("G1b = ",G1b , "|G1b| = ", np.abs(G1b ))
print ("G1c = ",G1c , "|G1c| = ", np.abs(G1c ))

print(" log G1a - log G1a*  /2a         = ", (np.log(G1a) - np.log(G1a.conjugate()))/2.0/a )
print(" log G1b - log G1a   / a         = ", (np.log(G1b) - np.log(G1a))/a )
print(" log G1c - log G1b*  / a         = ", (np.log(G1c) - np.log(G1b))/a )
print(" log G1c - log G1a*  /2a         = ", (np.log(G1c) - np.log(G1a))/2.0/a )

print("")

print(" log |G1a|^2                     = ", np.log( np.abs(G1a)**2) )
print(" log |G1b|^2                     = ", np.log( np.abs(G1b)**2) )
print(" log |G1c|^2                     = ", np.log( np.abs(G1c)**2) )
print(" log |g1a|^2                     = ", np.log( np.abs(g1a/g1i)**2)/a/a)
print(" log |g1b|^2                     = ", np.log( np.abs(g1b/g1i)**2)/a/a)
print(" log |g1c|^2                     = ", np.log( np.abs(g1c/g1i)**2)/a/a)
print("")

print("(log G1a + log G1a*)           /a^2 = ", (np.log(G1a) + np.log(G1a.conjugate()))      / a / a )
print("(log G1b + log G1b*)           /a^2 = ", (np.log(G1b) + np.log(G1b.conjugate()))      / a / a )
print("(log G1c + log G1a - 2*log G1b)/a^2 = ", (np.log(G1c) + np.log(G1a) - 2*np.log(G1b))  / a / a )
print("(log G1c + log G1a - 2*log G1b)/a^2 = ", (np.log(G1c*G1a/G1b/G1b)) )
print("(log G1a + log G1a*)           /a^2 = ", (np.log(G1a) + np.log(G1a.conjugate()) )     / a / a )

exit(1)






e2ab       = 1.7696643134476364 + 0.0000000000000000j
e2ba       = 1.7696622596976368 + 0.0000000000000001j
e2aba_1    = 1.5493927867966872 + 0.0000000000000057j
e2bab_1    = 1.5094727018720695 + -0.0000000000000058j
e2aba_2    = 1.5493927867966872 + 0.0000000000000057j
e2bab_2    = 1.5094727018720706 + -0.0000000000000058j
e2abab_1   = 1.5293227182137432 + 0.0000000000000000j
e2baba_2   = 1.5293227182137419 + -0.0000000000000002j
e2baba_3   = 1.5293227182137406 + -0.0000000000000002j
e2abab_4   = 1.5293227182137430 + -0.0000000000000000j
e2lrpabab  = 1.6375250017945597 + 0.0000000000000000j
e2lrpabba  = 1.6440093535647333 + 0.0000000000000063j
e2lrpbaba  = 1.6375068484947788 + 0.0000000000000000j
e2lrpbaab  = 1.6016514740325523 + -0.0000000000000061j


var1 = e2ab + e2ba + e2abab_1 + e2baba_2 + e2baba_3 + e2abab_4 + e2lrpabab + e2lrpabba + e2lrpabab +e2lrpbaba
e2 = (-1.2731947997)**2


print ("H2 = ",var1)
print ("H2 = ",var1/10)

print ("missing: " ,e2 - var1/10)

exit(1)

















exit (1)
l = 1.0
L = 6982


G2B = 0.9948693840050660-0.1011677256594006j

print("|G2B|^2 = ", G2B * G2B.conjugate())
exit(1)

# a = 1.0j*1e-3
# g1 = 0.9999990993958818297215885-0.0012732359593163107992081j
# g1i= 1.0000000011500667085329042-0.0000000000000418261387255j
#
# a = 1.0j*1e-5
# g1 = 1.0000003811117896823645879-0.0000127323694031552250649j
# g1i= 1.0000003812019560012203101+0.0000000000000047304823410j

# a    = 1.0j*1e-6
# g1   = 1.0000000395930275232103668 + 0.0000000000000010109101056j
# g1i  = 1.0000000395928916319121527 - 0.0000000000000005559788741j

# a   = 1.0j*1e-8
# g1  = 1.0000000011556169354776102-0.1.0000000395928916319121527,-0.0000000000000005559788741j0000000127324131944486408j
# g1i = 1.0000000011556005041768458-0.0000000000000011651613698j

a = 1.0j*1e-8
g1a =1.0000000778682150 +0.0000000127306549j
g1b =1.0000000778682159 -0.0000000127306551j
g1i =1.0000000778682154 -0.0000000000000000j



E = (g1b/g1i - g1b.conjugate()/g1i)/(2*a)
print("E  = ", E)
print("H2 = ", (g1b/g1i + g1b.conjugate()/g1i - 2.0) / (2*a*a*l))
print("VE = ", np.log(np.abs(g1a/g1i)**(2.0/l))/(a*a))
print("VE = ", np.log(np.abs(g1b/g1i)**(2.0/l))/(a*a))
print("VE = ", (np.log( g1b/g1i * g1b.conjugate()/g1i.conjugate() )  )/(a*a))
print("VE = ", (np.log( g1a/g1i * g1a.conjugate()/g1i.conjugate() )  )/(a*a))
exit(1)


L  = 9982
h  = 2.0j*1e-8
a  = 1.0j*1e-8
g1 = 1.0000000731775857687466669+0.0000000127323430272033213j
g2 = 1.0000000731775888773711358-0.0000000127323448294996977j
gi = 1.0000000731775862128358767-0.0000000000000000398986399j


L=42
l = 2
G2  = 1.0000000000002879918525878-0.0000000127319898978540879j
GG2 = 0.9999999999999367172875964-0.0000002673987106907672315j


# G2  = modify(G2)
# GG2 = modify(GG2)


G2c = G2.conjugate()
GG2c= GG2.conjugate()
print ("L = ", L)
print("G2G2c   = ", G2*G2c)
print("E       = ", (G2 - G2c) /(2*a)/l )  # Formula =  1/(l) * (G2 - G2c)/(2*a)
print("var     = ", np.log(G2*G2c)/L , np.log10(np.log(G2*G2c)/L))
print("GG2GG2c = ", GG2*GG2c)
print("E       = ", (GG2 - GG2c) /h/L)
print("var     = ", np.log(GG2*GG2c)/L , np.log10( np.log(GG2*GG2c)/L))


L=1422
G2  = 1.0000000000000126565424807-0.0000000127323403797177270j
GG2 = 0.9999999999543167650273290-0.0000090527105368164777709j

G2  = modify(G2)
GG2 = modify(GG2)




G2c = G2.conjugate()
GG2c= GG2.conjugate()
print ("L = ", L)
print("G2G2c   = ", G2*G2c)
print("E       = ", (G2 - G2c) /h )
print("var     = ", np.log(G2*G2c)/L , np.log10(np.log(G2*G2c)/L))
print("GG2GG2c = ", GG2*GG2c)
print("E       = ", (GG2 - GG2c) /h/L)
print("var     = ", np.log(GG2*GG2c)/L , np.log10( np.log(GG2*GG2c)/L))


exit(1)


G1 = np.sqrt(g1/gi)*2
G2 = np.sqrt(g2/gi)*2
sg1 = np.sqrt(g1)
sg2 = np.sqrt(g2)
sgi = np.sqrt(gi)



lg1 = np.log(g1)
lg2 = np.log(g2)
lgi = np.log(gi)

lsg1 = np.log(sg1)
lsg2 = np.log(sg2)
lsgi = np.log(sgi)

print ("E = -1.2732395447351625")
print ("V = 0.0000241185609192295027253 ->   -4.6176486087824146764546640\n")


Eg1 = (G2-G1)/h
Eg2 = (g2-g1)/h
Eg3 = (sg2-sg1)/gi/a
Eg4 = (lsg2-lsg1)/a

Eg1 *= np.exp(-1.0j*np.angle(Eg1))
Eg2 *= np.exp(-1.0j*np.angle(Eg2))
Eg3 *= np.exp(-1.0j*np.angle(Eg3))
Eg4 *= np.exp(-1.0j*np.angle(Eg4))


H2g1 = (sg2/sgi+sg1/sgi - 2) /a**2
H2g1 *= np.exp(-1.0j*np.angle(H2g1))


Vg1 = np.log((G1*G1.conjugate()))
Vg2 = np.log(np.abs(g1*np.conjugate(g1)/gi/gi.conjugate()))/a**2
Vg3 = np.log(np.abs(g1)**2)
Vg4 = np.log(np.abs(sg2)**2)
Vg5 = (lg2 + lg1 - 2*lgi)


Vg1 *= np.exp(-1.0j*np.angle(Vg1))
Vg2 *= np.exp(-1.0j*np.angle(Vg2))
Vg3 *= np.exp(-1.0j*np.angle(Vg3))
Vg4 *= np.exp(-1.0j*np.angle(Vg4))
Vg5 *= np.exp(-1.0j*np.angle(Vg5))


print ("Eg1  = ", Eg1)
print ("Eg2  = ", Eg2)
print ("Eg3  = ", Eg3)
print ("Eg4  = ", Eg4)
print ("Vg1  = ", Vg1,  " -> " , np.log10(Vg1))
print ("Vg2  = ", Vg2,  " -> " , np.log10(Vg2))
print ("Vg3  = ", Vg3,  " -> " , np.log10(Vg3))
print ("Vg4  = ", Vg4,  " -> " , np.log10(Vg4))
print ("Vg5  = ", Vg5,  " -> " , np.log10(Vg5))
print ("H2g1 = ", H2g1, " -> " , np.log10(H2g1))


print ("log|g1|^2                    = ", np.abs(np.log(np.abs(g1)**2)),    np.log10(np.abs(np.log(np.abs(g1)**2))))
print ("log|g2|^2                    = ", np.abs(np.log(np.abs(g2)**2)),    np.log10(np.abs(np.log(np.abs(g2)**2))))
print ("log|g1|^2/gi                 = ", np.abs(np.log(np.abs(g1)**2))/gi,    np.log10(np.abs(np.log(np.abs(g1)**2))/gi))
print ("log|g2|^2/gi                 = ", np.abs(np.log(np.abs(g2)**2))/gi,    np.log10(np.abs(np.log(np.abs(g2)**2))/gi))
print ("log|g2| + log|g1|            = ", np.log(np.abs(g2))+np.log(np.abs(g1)), np.log10(np.log(np.abs(g2))+np.log(np.abs(g1))))
print ("(log|g2| + log|g1|)/gi       =", np.log((np.abs(g2))+np.log(np.abs(g1))/((gi))), np.log10(np.log((np.abs(g2))+np.log(np.abs(g1))/((gi)))))
print("(lg2 + lg2 - 2*lgi )/a**2     = " , (lg2 + lg2 - 2*lgi )/a**2)



print("\nF\n")

h  = 2e-8
a  = 1e-8
all = np.matrix([
[1.0000000859099320571488079, 1.0000000604452381480768963, 1.0000000731775862128358767],
[0.9447298529574539305286862, 0.9447298288913426045354527, 0.9447298409244088146508034],
[0.8338532616336362668363336, 0.8338532403428826622615588, 0.8338532509882679022439333],
[0.7142075008932039503761757, 0.7142074825180230179810792, 0.7142074917056162597361890],
[0.6570325975345832070217966, 0.6570325806036606541837841, 0.6570325890691278702959721],
[0.8613896203410404961431368, 0.8613895983504813447240167, 0.8613896093457664715486999],
[0.6764570850185297468115664, 0.6764570675621544015854170, 0.6764570762903415745981306],
[0.4756602458281288248187479, 0.4756602332147331080314245, 0.4529227302320303905069920],
[0.4529227362696293113231150, 0.4529227241944256965311411, 0.4756602395214319378702328],
[0.4262631020070972720503732, 0.4262630907274800318162988, 0.4262630963672910944239902],
[0.5100716207319258010954854, 0.5100716072583155735742366, 0.5100716139951253502715645],
[0.4440087874713546378657725, 0.4440087756073313185467555, 0.4440087815393470305203039],
[0.2842583007185548460427071, 0.2842582926484438776704167, 0.2842582966834997226790449],
[0.2249221789932939197242945, 0.2249221723270251604986925, 0.2249221756601591237778592],
[0.2014640419281733263456857, 0.2014640361386816902466990, 0.2014640390334276609518582],
[0.1465458074602798144159266, 0.1465458028618790708996755, 0.1465458051610794565355889],
[0.2095658024845074018926994, 0.2095657962301603338683975, 0.2095657993573342148252436],
[0.2327430396880987573116073, 0.2327430328092974509690549, 0.2327430362486983539405117],
[0.2215283986673169946968187, 0.2215283921351448859216049, 0.2215283954012317035875412],
[0.2132748139737495884915575, 0.2077967274482845072558490, 0.2132748107407270998781001],
[0.2077967336761968042413429, 0.2132748075077029736856815, 0.2077967305622411553489570],
[0.1123302719955644318750032, 0.1123302682154076748144433, 0.1123302701054866431507051],
[0.0687806381716436626705402, 0.0687806354393858121465399, 0.0687806368055163402930319],
[0.0647601128756832844501901, 0.0647601103061640065439164, 0.0647601115909239716250667],
[0.0601916230301480295605820, 0.0601916208515419770552768, 0.0601916219408466721119133],
[0.0574195630771551016047205, 0.0574195608341740854063673, 0.0574195619556652214754422],
[0.0502471335910344776842784, 0.0502471316398591036356258, 0.0502471326154466657598618],
[0.0528165796155876249295957, 0.0528165774789348743678552, 0.0528165785472617319018518],
[0.0653465110054248510262909, 0.0517733402949494894706994, 0.0653465096815803864194194],
[0.0620842309288882412965371, 0.0653465083577351585342186, 0.0517733413075529003144482],
[0.0517733423201554368575650, 0.0620842285055080919664583, 0.0620842297171988535819942],
[0.0559223599088186223982078, 0.0559223577034010377317941, 0.0559223588061098716983643],
[0.0517364802154561403968458, 0.0517364781611417828832700, 0.0517364791882990796012542],
[0.0234888354972337988491038, 0.0234888343361172834133921, 0.0234888349166760823649724],
[0.0173343533356516352195165, 0.0173343522204146734122521, 0.0173343527780334058507883],
[0.0144296153082621794738749, 0.0144296143489804368914564, 0.0144296148286211442512972],
[0.0180808762451291453465796, 0.0180808750298248749333041, 0.0180808756374769181995976],
[0.0172563080207088180573205, 0.0172563068849567527451860, 0.0172563074528329085666201],
[0.0011596222707393674666854, 0.0011596221563840208770152, 0.0011596222135616931960683],
[0.0002710351122320541449040, 0.0002710350759509969390502, 0.0009484965331382646082717],
[0.0009484965848413692965022, 0.0009484964814345679456550, 0.0003243314367507935396147],
[0.0002819794141710787994080, 0.0002819793801834122770784, 0.0002710350940932714598405],
[0.0010510192638151917392253, 0.0010510191548526710923067, 0.0010510192093334252017717],
[0.0003243314557632618970982, 0.0003243314177390783773804, 0.0002819793971772600665524],
[0.0002803270124648648891838, 0.0003244287934908629458114, 0.0003244288125549049032863],
[0.0003244288316189009447991, 0.0002803269784833402637411, 0.0002803269954742542021363],
[0.0010478388293504532682160, 0.0010478387206668052494124, 0.0010478387750087977438318],
[0.0017904183789051008723198, 0.0017904181729362759773611, 0.0017904182759203922208069],
[0.0074293754092910778072389, 0.0074293748067805033888367, 0.0074293751080364549971291],
[0.0063121410986810904883426, 0.0063121406072990902946795, 0.0063121408529901550099606],
[0.0066353045861149064638118, 0.0066353041170017874536557, 0.0066353043515575693689357],
[0.0057114401136451626445067, 0.0057114396862078036995469, 0.0057114398999247350044439],
[0.0058181711899479510510802, 0.0058181707383702496033662, 0.0058181709641592889784012],
[0.0041830242688700404116164, 0.0053059897258778557574410, 0.0041830240942217064223363],
[0.0053059902752437271278296, 0.0041830239195760326315066, 0.0046649501489069815363120],
[0.0058270705183846365979305, 0.0046649499368878613939082, 0.0044892012987473245769210],
[0.0046649503609285805985629, 0.0044892010983417400885043, 0.0058270702969090608716596],
[0.0044892014991533236642485, 0.0058270700754334920842825, 0.0053059900005609549403229],
[0.0041491515166609841888667, 0.0052760704046069251127449, 0.0041491513369545235390135],
[0.0046972315983237200587297, 0.0054088572568264893167256, 0.0046972313826905316702653],
[0.0052760709438393962877889, 0.0041491511572486605013976, 0.0052760706742227487034413],
[0.0043030344681027283063046, 0.0046972311670574517020182, 0.0043030342832279886572389],
[0.0054088578165047774062857, 0.0044679071633164585755638, 0.0054088575366664304669428],
[0.0044679075753831483733269, 0.0043030340983529645135230, 0.0044679073693497939334662]
])



f1 = np.sum(np.power(all[:,0],L/2))
f2 = np.sum(np.power(all[:,1],L/2))
fi = np.sum(np.power(all[:,2],L/2))
print("f1 = ",f1)
print("f2 = ",f2)
print("fi = ",fi)

sf1 = np.sqrt(f1)
sf2 = np.sqrt(f2)
sfi = np.sqrt(fi)

lf1 = np.log(f1)
lf2 = np.log(f2)
lfi = np.log(fi)

lsf1 = np.log(sf1)
lsf2 = np.log(sf2)
lsfi = np.log(sfi)


F1 = f1/fi*2
F2 = f2/fi*2


Ef1 = (f2-f1)/fi/h/L*2    #Division by fi is required!
Ef2 = (lf2-lf1) /h/L*2     # The lfi terms cancel: lf2-lfi - lf1+lfi
Ef3 = (f2-f1)/fi  /h/L*2       #Wrong! fi is missing and gives -1.64 or something.
Ef4 = (F2 - F1)/2/a    #Correct formula



H2 =  (F2 + F1)
E2 =  ((F2 - F1)/2.0/a/L)**2

print ("F1: " ,F1)
print ("F2: ", F2)

print ("H2: " ,H2)
print ("E2: ", E2)

Vf1 = np.abs( H2 - E2 )
Vf2 = np.log(F2) + np.log(F1)
Vf3 = np.log(F2) - np.log(F1)
Vf4 = (F2 + F1 - 2)/a/a  #Correct formula
Vf5 = 1
Vf6 = 1

Vf7 = -(lf1 + lf2 -2*lfi)/h/L
Vf8 = 1


print ("Ef1 = ", "{:8.16f}".format(Ef1), " squared = ", Ef1**2)
print ("Ef2 = ", "{:8.16f}".format(Ef2), " squared = ", Ef2**2)
print ("Ef3 = ", "{:8.16f}".format(Ef3), " squared = ", Ef3**2)
print ("Ef4 = ", "{:8.16f}".format(Ef4), " squared = ", Ef4**2)


print ("Vf1 = ", "{:8.16f}".format(Vf1), "  -> " , np.log10(Vf1))
print ("Vf2 = ", "{:8.16f}".format(Vf2), "  -> " , np.log10(Vf2))
print ("Vf3 = ", "{:8.16f}".format(Vf3), "  -> " , np.log10(Vf3))
print ("Vf4 = ", "{:8.16f}".format(Vf4), "  -> " , np.log10(Vf4))
print ("Vf5 = ", "{:8.16f}".format(Vf5), "  -> " , np.log10(Vf5))
print ("Vf6 = ", "{:8.16f}".format(Vf6), "  -> " , np.log10(Vf6))
print ("Vf7 = ", "{:8.16f}".format(Vf7), "  -> " , np.log10(Vf7))
print ("Vf8 = ", "{:8.16f}".format(Vf8), "  -> " , np.log10(Vf8))

y1 = np.array([
1.3611590697747726341759744,
1.3611583416981680727531057,
1.3611579776601634428345733,
1.3611577956410763068362257,
1.3611576136221223976008332,
1.3611574316029628750612801,
1.3611572495840511543008233,
1.3611568855462730098793145,
1.3611561574706556587699424


])

y2 = ([
1.0003652637125475255430729+0.0002542813635953987709201j,
1.0003652879448583501442727+0.0001271406827990193976093j,
1.0003652940009959415590401+0.0000635703415506230328901j,
1.0003652955366486576593843+0.0000317851707967710351774j,
1.0003652960193387677634291+0.0000000000000000000000000j,
1.0003652955366486576593843-0.0000317851707967710351774j,
1.0003652940009959415590401-0.0000635703415506230328901j,
1.0003652879448583501442727-0.0001271406827990193976093j,
1.0003652637125475255430729-0.0002542813635953987709201j])
x = ([
-4.0*a,
-2.0*a,
-1.0*a,
-0.5*a,
 0.0*a,
 0.5*a,
 1.0*a,
 2.0*a,
 4.0*a])

L = 9982
g3 = y2[8]
g2 = y2[5]
g1 = y2[3]
gi = y2[4]

G3 = np.sqrt(g3/gi)*2
G2 = np.sqrt(g2/gi)*2
G1 = np.sqrt(g1/gi)*2


sg1 = np.sqrt(g1)
sg2 = np.sqrt(g2)
sgi = np.sqrt(gi)

lg1 = np.log(g1)
lg2 = np.log(g2)
lgi = np.log(gi)
lsg1 = np.log(sg1)
lsg2 = np.log(sg2)
lsgi = np.log(sgi)
a  = x[4] - x[3]
h  = 2 *a

Eg1 = (G2-G1)/h/L
Eg2 = (G2-G1)/h/L*2
Eg3 = (lsg2-lsg1) / a /L *2

Eg1 *= np.exp(-1.0j*np.angle(Eg1))
Eg2 *= np.exp(-1.0j*np.angle(Eg2))
Eg3 *= np.exp(-1.0j*np.angle(Eg3))
Eg4 *= np.exp(-1.0j*np.angle(Eg4))


H2g1 = (sg2/sgi+sg1/sgi - 2) /a**2
H2g1 *= np.exp(-1.0j*np.angle(H2g1))



Vg1 = np.log((g1*g1.conjugate())) / L *2
Vg2 = np.log((sg1*sg1.conjugate())) / L
Vg3 = np.log((sg2*sg2.conjugate())) / L *2
Vg4 = np.log((G1*G1.conjugate())) / L
Vg5 = np.log((G2*G2.conjugate())) / L
Vg6 = np.log((G3*G3.conjugate())) / L

# Vg6 = (lg2 + lg1 - 2*lgi)


Vg1 *= np.exp(-1.0j*np.angle(Vg1))
Vg2 *= np.exp(-1.0j*np.angle(Vg2))
Vg3 *= np.exp(-1.0j*np.angle(Vg3))
Vg4 *= np.exp(-1.0j*np.angle(Vg4))
Vg5 *= np.exp(-1.0j*np.angle(Vg5))
Vg6 *= np.exp(-1.0j*np.angle(Vg6))


print ("Eg1  = ", Eg1)
print ("Eg2  = ", Eg2)
print ("Eg3  = ", Eg3)
print ("Eg4  = ", Eg4)
print ("Vg1  = ", Vg1,  " -> " , np.log10(Vg1))
print ("Vg2  = ", Vg2,  " -> " , np.log10(Vg2))
print ("Vg3  = ", Vg3,  " -> " , np.log10(Vg3))
print ("Vg4  = ", Vg4,  " -> " , np.log10(Vg4))
print ("Vg5  = ", Vg5,  " -> " , np.log10(Vg5))
print ("Vg6  = ", Vg6,  " -> " , np.log10(Vg6))
print ("H2g1 = ", H2g1, " -> " , np.log10(H2g1))





dx = x[1]-x[0]
dy1dx = np.gradient(y1, dx)
dy2dx = np.gradient(y2, dx)
plt.figure()
plt.plot(x,dy1dx)


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(dy2dx.real,dy2dx.imag, x)
# plt.show()