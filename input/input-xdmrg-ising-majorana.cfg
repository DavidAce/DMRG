
//Common parameters for the model Hamiltonian
model::model_type                         = ising_majorana                    /*!< Choice of model: {ising_tf_rf,ising_sdual, ising_majorana, lbit} */
model::model_size                         = 16                                /*!< Number of sites on the chain. Only relevant for finite algorithms: fDMRG and xDMRG */

//Console settings
console::loglevel                         = 1                                 /*!< Verbosity [0-6]. Level 0 prints everything, 6 nothing. Level 2 or 3 is recommended for normal use */
console::logh5pp                          = 2                                 /*!< Verbosity of h5pp library [0-6] Level 2 or 3 is recommended for normal use */
console::timestamp                        = true                              /*!< (NOT IMPLEMENTED) Whether to put a timestamp on console outputs */

// Parameters for Multithreading
threading::num_threads                    = 1                                 /*!< Total number of c++11 threads, (mainly used by Eigen::Tensor)  */

//Parameters to control timers.
timer::level                              = normal                            /*!< How much detail to print on exit [ normal | higher |  highest ]  */

// Input parameters (note that CLI parameters overrwide these)
input::seed                               = 1                                 /*!< Main seed for the random number generator. */

//Parameters for saving data to hdf5
storage::output_filepath                  = ../../output/mbl.h5               /*!< Name of the output HDF5 file relative to the execution point  */
storage::output_append_seed               = true                              /*!< Append the seed for the random number generator to output_filepath */
storage::storage_interval                 = 1                                 /*!< Write to file this often, in units of iterations. Applies to StorageEvent::Iteration. */
storage::use_temp_dir                     = true                              /*!< If true uses a temporary directory for writes in the local drive (usually /tmp) and copies the results afterwards */
storage::copy_from_temp_freq              = 5                                 /*!< How often, in units of iterations, to copy the hdf5 file in tmp dir to target destination */
storage::temp_dir                         = /tmp                              /*!< Local temp directory on the local system. If it does not exist we default to /tmp instead (or whatever is the default) */
storage::compression_level                = 6                                 /*!< GZip compression level in HDF5. Choose between [0-9] (0 = off, 9 = max compression) */
storage::resume_policy                    = IF_UNSUCCESSFUL                   /*!< Under which exit condition in the previous simulation should we resume this time */
storage::file_collision_policy            = RESUME                            /*!< What to do when a prior output file is found. Choose between RESUME, REVIVE, BACKUP, RENAME, REPLACE */
storage::file_resume_policy               = FAST                              /*!< Depends on dataset "common/finished_all=bool" FULL: Ignore bool -> Scan .cfg to add missing items. FAST: exit if true. */
storage::file_resume_name                 = ""                                /*!< On file_collision_policy=RESUME|REVIVE: resume from state candidate matching this string. Empty implies any */
storage::file_resume_iter                 = -1ul                              /*!< On file_collision_policy=RESUME|REVIVE: which iteration to resume from. -1ul implies resume from last available iteration */

//  enum StoragePolicy:
//  - NONE    : Never store
//  - INIT    : Store only once during initialization e.g. model (usually in preprocessing)
//  - ITER    : Store after every iteration
//  - EMIN    : Store after finding the ground state (e.g. before xDMRG)
//  - EMAX    : Store after finding the highest energy eigenstate (e.g. before xDMRG)
//  - PROJ    : Store after projections
//  - BOND    : Store after bond updates
//  - TRNC    : Store after truncation error limit updates
//  - FAILURE : Store only if the simulation did not succeed (usually for debugging)
//  - SUCCESS : Store only if the simulation succeeded
//  - FINISH  : Store when the simulation has finished (regardless of failure or success)
//  - ALWAYS  : Store every chance you get
//  - REPLACE : Keep only the last event (i.e. replace previous events when possible)

storage::mps::state_emid::policy                               = ITER|FINISH|REPLACE        /*!<      */
storage::mps::state_emin::policy                               = NONE                       /*!<      */
storage::mps::state_emax::policy                               = NONE                       /*!<      */
storage::mps::state_real::policy                               = NONE                       /*!<      */
storage::mps::state_lbit::policy                               = NONE                       /*!<      */
storage::mpo::model::policy                                    = NONE                       /*!<      */
storage::table::bonds::policy                                  = NONE                       /*!<      */
storage::table::model::policy                                  = INIT                       /*!<      */
storage::table::measurements::policy                           = ALWAYS                     /*!<      */
storage::table::status::policy                                 = ALWAYS                     /*!<      */
storage::table::memory::policy                                 = ITER                       /*!<      */
storage::table::timers::level                                  = normal                     /*!< tid::level [normal, higher, highest] */
storage::table::timers::policy                                 = FINISH                     /*!<      */
storage::table::entanglement_entropies::policy                 = ITER|BOND|TRNC|RBDS|RTES   /*!<      */
storage::table::truncation_errors::policy                      = ITER|BOND|TRNC|RBDS|RTES   /*!<      */
storage::table::bond_dimensions::policy                        = ITER|BOND|TRNC|RBDS|RTES   /*!<      */
storage::table::number_entropies::policy                       = NONE                       /*!<      */
storage::table::renyi_entropies::policy                        = FINISH|BOND|TRNC|RBDS|RBDS /*!<      */
storage::table::opdm::policy                                   = FINISH                     /*!<      */
storage::table::opdm_spectrum::policy                          = FINISH|BOND|TRNC|RBDS|RTES /*!<      */
storage::table::expectation_values_spin_xyz::policy            = NONE                       /*!<      */
storage::table::correlation_matrix_spin_xyz::policy            = NONE                       /*!<      */
storage::table::random_unitary_circuit::policy                 = NONE                       /*!<      */
storage::table::information_per_scale::policy                  = FINISH|ITER|RBDS|RTES      /*!<      */
storage::table::information_typ_scale::policy                  = FINISH|ITER|RBDS|RTES      /*!<      */
storage::dataset::opdm::policy                                 = FINISH                     /*!<      */
storage::dataset::opdm::chunksize                              = 10                         /*!<      */
storage::dataset::information_lattice::policy                  = FINISH|ITER|RBDS|RTES      /*!<      */
storage::dataset::information_lattice::chunksize               = 10                         /*!<      */
storage::dataset::lbit_analysis::policy                        = NONE                       /*!<      */
storage::dataset::subsystem_entanglement_entropies::policy     = FINISH|ITER|RBDS|RTES      /*!<      */
storage::dataset::subsystem_entanglement_entropies::chunksize  = 10                         /*!<      */
storage::dataset::subsystem_entanglement_entropies::bond_lim   = 2048                       /*!< Bond dimension limit during swap operations  */
storage::dataset::subsystem_entanglement_entropies::trnc_lim   = 1e-6                       /*!< Truncation error limit during swap operations  */
storage::dataset::number_probabilities::policy                 = NONE                       /*!<      */
storage::dataset::number_probabilities::chunksize              = 10                         /*!<      */
storage::dataset::expectation_values_spin_xyz::policy          = FINISH|RBDS|RTES           /*!<      */
storage::dataset::expectation_values_spin_xyz::chunksize       = 10                         /*!<      */
storage::dataset::correlation_matrix_spin_xyz::policy          = FINISH|RBDS|RTES           /*!<      */
storage::dataset::correlation_matrix_spin_xyz::chunksize       = 10                         /*!<      */




// Options for strategy that affect convergence and targeted state
strategy::move_sites_when_stuck           = false                             /*!< Try moving sites around when stuck */
strategy::projection_policy               = DEFAULT|ITER                      /*!< Enum bitflag to control projections to a symmetry sector {NEVER,+INIT,WARMUP,+STUCK,ITER,+CONVERGED,FINISHED,FORCE,DEFAULT} (+ are DEFAULT) */
strategy::randomize_on_bond_update        = false                             /*!< Randomize MPS by flipping random spins when growing the bond dimension */
strategy::randomize_early                 = false                             /*!< Randomize MPS by flipping random spins before fully converging the first attempt (because the first attempt is biased) */
strategy::use_eigenspinors                = false                             /*!< Use random pauli-matrix eigenvectors when initializing each mps site along x,y or z  */
strategy::iter_max_warmup                 = 4                                 /*!< In DMRG, these first iterations use an exact solver with reduced bond dimension and the largest possible blocksize */
strategy::iter_max_stuck                  = 4                                 /*!< If status.algorithm_saturated_for > 0 then status.algorithm_has_stuck_for +=1. If stuck for this many iterations, we stop. */
strategy::iter_max_saturated              = 3                                 /*!< Saturation means that both variance and entanglement saturated. But if either saturates for this many iterations, then status.algorithm_saturated_for += 1 */
strategy::iter_min_converged              = 0                                 /*!< Require convergence at least this many iterations before success */
strategy::max_env_expansion_alpha         = 1e-1                              /*!< Maximum value of alpha used in environment (aka subspace) expansion (disable with <= 0) */
strategy::dmrg_blocksize_policy           = INFOVARSAT                        /*!< Bitflag to control the adaptive dmrg blocksize {MIN, MAX, MAXVARSAT, MAXSTUCK, INFO, INFOVARSAT, INFOSTUCK} */
strategy::dmrg_min_blocksize              = 1                                 /*!< Minimum number of sites in a dmrg optimization step. */
strategy::dmrg_max_blocksize              = 32                                /*!< Maximum number of sites in a dmrg optimization step. */
strategy::dmrg_max_prob_size              = 268435456                         /*!< Restricts the dmrg blocksize to keep the problem size below this limit. Problem size = chiL * (spindim ** blocksize) * chiR */
strategy::target_axis                     = z                                 /*!< Find an eigenstate with global spin component along this axis. Choose between Choose {none, (+-) x,y or z}  */
strategy::initial_axis                    = z                                 /*!< Initialize state with global spin component along this axis. Choose {none, (+-) x,y or z}  */
strategy::initial_type                    = REAL                              /*!< Initial state can be REAL/CPLX */
strategy::initial_state                   = PRODUCT_STATE_NEEL                /*!< Initial configuration for the spin chain (only for finite systems)  */
strategy::initial_pattern                 =                                   /*!< Initial state can be REAL/CPLX */
strategy::rbds_rate                       = 0.5                               /*!< If |rbds_rate| > 0, runs reverse bond dimension scaling (rbds) after the main algorithm. Values [0,1] are interpreted as a reduction factor, otherwise a reduction rate */
strategy::rtes_rate                       = 1e1                               /*!< If rtes_rate > 1, runs reverse truncation error scaling (rtes) after the main algorithm. Values [1, infty] represent the growth factor for the truncation error limit */
strategy::bond_increase_when              = NEVER                             /*!< If and when to increase the bond dimension limit {NEVER, TRUNCATED, STUCK, SATURATED, ITERATION, FULLSWEEP}. */
strategy::bond_increase_rate              = 16.0                              /*!< Bond dimension growth rate. Factor if 1<x<=2, constant shift if x > 2, otherwise invalid. */
strategy::trnc_decrease_when              = SATURATED                         /*!< If and when to decrease SVD truncation error limit {NEVER, TRUNCATED, STUCK, SATURATED, ITERATION} */
strategy::trnc_decrease_rate              = 1e-1                              /*!< Decrease SVD truncation error limit by this factor. Valid if 0 < x < 1 */

//Parmaters that control MPS precision
precision::eig_max_size                    = 3200                              /*!< Maximum problem size before switching from eig to eigs. */
precision::eigs_max_size_shift_invert      = 4096                              /*!< Maximum problem size allowed for partial diagonalization of the local (effective) hamiltonian matrix. */
precision::eigs_iter_max                   = 1000                              /*!< Maximum number of steps for eigenvalue solver. */
precision::eigs_tol_max                    = 1e-12                             /*!< Maximum (default) precision tolerance for halting the eigenvalue solver. */
precision::eigs_tol_min                    = 1e-14                             /*!< Minimum precision tolerance for halting the eigenvalue solver. */
precision::eigs_ncv                        = 20                                /*!< Basis size (krylov space) in the eigensolver. Set ncv <= 0 for automatic selection */
precision::eigs_iter_multiplier            = 4                                 /*!< Increase number of iterations on EIGS by this factor when stuck */
precision::svd_truncation_lim              = 1e-8                              /*!< Truncation error limit, i.e. discard singular values while the truncation error is lower than this */
precision::svd_truncation_init             = 1e-4                              /*!< If truncation error limit is updated (trnc_decrease_when != NEVER), start from this value */
precision::svd_switchsize_bdc              = 16                                /*!< Linear size of a matrix, below which SVD will use slower but more precise JacobiSVD instead of BDC (default is 16 , good could be ~64) */
precision::svd_save_fail                   = false                             /*!< Save failed SVD calculations to file */
precision::use_compressed_mpo              = DPL                               /*!< Use SVD to compress the bond dimensions of all H² mpos at the end of an iteration */
precision::use_compressed_mpo_squared      = DPL                               /*!< Use SVD to compress the bond dimensions of all H² mpos at the end of an iteration */
precision::use_energy_shifted_mpo          = false                             /*!< Whether to subtract E/L from ALL mpos to avoid catastrophic cancellation when computing the variance */
precision::use_parity_shifted_mpo          = true                              /*!< Lift degeneracy by redefining H --> (H + Q(σ)) where Q(σ) = 0.5(1 - prod(σ)) = P(-σ) is the (flipped sign) projection operator */
precision::use_parity_shifted_mpo_squared  = true                              /*!< Lift degeneracy by redefining H² --> (H² + Q(σ)) where Q(σ) = 0.5(1 - prod(σ)) = P(-σ) is the (flipped sign) projection operator */
precision::variance_convergence_threshold  = 1e-14                             /*!< Variance convergence threshold. The MPS state is considered good enough when its variance reaches below this value */
precision::variance_saturation_sensitivity = 1e-1                              /*!< Energy variance saturates when its log stops changing below this order of magnitude between sweeps. Good values are 1e-1 to 1e-4   */
precision::entropy_saturation_sensitivity  = 1e-3                              /*!< Entanglement entropy saturates when it stops changing below this order of magnitude between sweeps. Good values are 1e-1 to 1e-4   */
precision::target_subspace_error           = 1e-4                              /*!< The target subspace error 1-Σ|<ϕ_i|ψ>|². Eigenvectors are found until reaching this value. Measures whether the incomplete basis of eigenstates spans the current state. */
precision::max_subspace_size               = 256                               /*!< Maximum number of candidate eigenstates to keep for a subspace optimization step */
precision::max_norm_error                  = 1e-10                             /*!< Maximum norm deviation from unity during integrity checks */

//Parameters for the transvese-field next-nearest neighbor Ising model with a random field
model::ising_tf_rf::J1                    = 1.0                               /*!< Ferromagnetic coupling for nearest neighbors.*/
model::ising_tf_rf::J2                    = 0.0                               /*!< Ferromagnetic coupling for next-nearest neighbors.*/
model::ising_tf_rf::h_tran                = 1.0                               /*!< Transverse field strength */
model::ising_tf_rf::h_mean                = 0.0                               /*!< Random field mean of distribution */
model::ising_tf_rf::h_wdth                = 0.0                               /*!< Random field width of distribution */
model::ising_tf_rf::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_tf_rf::distribution          = normal                            /*!< Random distribution for couplings and fields */

//Parameters for the selfdual transverse-field random-field next-nearest neighbor Ising model
model::ising_sdual::lambda                = 0.0                               /*!< Width of the distribution for the J_rand coupling */
model::ising_sdual::delta                 = 0.0                               /*!< Width of the distribution for the h_rand on-site field */
model::ising_sdual::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_sdual::distribution          = uniform                           /*!< Random distribution for couplings and fields */

// Parameters for the Ising-Majorana model
model::ising_majorana::g                  = 0.030                               /*!< Interaction parameter for nearest ZZ and next-nearest XX neighbor coupling */
model::ising_majorana::delta              = 0.0                                /*!< Delta defined as log(J_mean) - log(h_mean). We get J_mean and h_mean by fixing delta = 2lnW, W = J_wdth = 1/h_wdth */
model::ising_majorana::spin_dim           = 2                                  /*!< Spin dimension */
model::ising_majorana::distribution       = uniform                           /*!< Random distribution for couplings and fields */

// Parameters for the l-bit Hamiltonian H
//     H =   Σ_i  J1(i)   * n_{i}
//         + Σ_ij J2(i,j) * n_{i} * n_{i+j}
//         + Σ_i  J3(i)   * n_{i} * n_{i+1} * n_{i+2}
//
//     J1 = Random(J1_mean,J1_wdth) * exp(-|i-j|/xi) with |i-j| = 0 since i == j
//     J2 = Random(J2_mean,J2_wdth) * exp(-|i-j|/xi) with |i-j| = r = 0,1,2,3...L-1 since i < j
//     J3 = Random(J3_mean,J3_wdth) * exp(-|i-j|/xi) with |i-j| = 2 since i + 2 = j
// If xi == 1, then the exponential factors are
//             * exp(0)  = 1 for J1,
//             * exp(-1) = 0.367 for J2 (nearest neighbors), and
//             * exp(-2) = 0.135 for J3


model::lbit::J1_mean                      = 0.00                              /*!< Constant offset for on-site */
model::lbit::J2_mean                      = 0.00                              /*!< Constant offset for two-body interaction */
model::lbit::J3_mean                      = 0.00                              /*!< Constant offset for three-body interaction */
model::lbit::J1_wdth                      = 1.00                              /*!< Width of the distribution for on-site interactions. */
model::lbit::J2_wdth                      = 1.00                              /*!< Width of the distribution for two-body interaction. */
model::lbit::J3_wdth                      = 1.00                              /*!< Width of the distribution for three-body interaction. */
model::lbit::J2_span                      = -1                                /*!< Maximum allowed range for pairwise interactions, |i-j| <= J2_span. Use -1 for infinite. Note that J2_span + 1 MPOs are used */
model::lbit::xi_Jcls                      = 1.00                              /*!< Exp. decay rate xi of interactions: exp(-|i-j|/xi_Jcls) * Random(mean,wdth) */
model::lbit::spin_dim                     = 2                                 /*!< Spin dimension */
model::lbit::distribution                 = normal                            /*!< Random distribution for interaction strengths */
model::lbit::u_depth                      = 16                                /*!< Number of layers in the unitary circuit which transforms lbit <-> physical space */
model::lbit::u_fmix                       = 0.2                               /*!< Mixing factor for the gates in the unitary circuit  */
model::lbit::u_lambda                     = 1.0                               /*!< lambda parameter used in the Hermitian matrix for the unitary circuit gates: controls the size of the sz_i*sz_j terms */
model::lbit::u_wkind                      = EXPDECAY                          /*!< Weights w_i in the unitary 2-site gates. Choose [IDENTITY, EXPDECAY] for 1 or exp(-2|h[i] - h[i+1]|), h are onsite fields in the Hamiltonian */
model::lbit::u_mkind                      = MATRIX_V2                         /*!< MATRIX_(V1|V2|V3) controls the kind of Hermitian matrix used in the unitary circuit gates */

// Settings for the infinite DMRG algorithm
idmrg::on                                 = false                             /*!< Turns iDMRG simulation on/off. */
idmrg::iter_max                           = 500                               /*!< Maximum number of iDMRG iterations before forced termination */
idmrg::bond_max                           = 64                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
idmrg::bond_min                           = 8                                 /*!< Initial bond dimension limit. Only used when bond_grow == true. */
idmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations.  (0 = off). */

// Settings for the imaginary-time infinite TEBD algorithm
itebd::on                                 = false                             /*!< Turns iTEBD simulation on/off. */
itebd::iter_min                           = 1                                 /*!< Minimum number of iterations before being allowed to finish */
itebd::iter_max                           = 50                                /*!< Maximum number of iterations before forced termination */
itebd::time_step_init_real                = 0.1                               /*!< Real part of initial time step delta_t */
itebd::time_step_init_imag                = 0.0                               /*!< Imag part of initial time step delta_t */
itebd::time_step_min                      = 0.0001                            /*!< (Absolute value) Minimum and final time step for iTEBD time evolution. */
itebd::suzuki_order                       = 4                                 /*!< Order of the suzuki trotter decomposition (1,2 or 4) */
itebd::bond_max                           = 16                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
itebd::bond_min                           = 16                                /*!< Initial bond dimension limit. Only used when bond_grow == true. */
itebd::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off).*/

// Settings for the finite DMRG algorithm
fdmrg::on                                 = false                             /*!< Turns fdmrg simulation on/off. */
fdmrg::ritz                               = SR                                /*!< Select what part of the energy eigenspectrum to target (SR:smallest real / LR: largest real) */
fdmrg::iter_min                           = 6                                 /*!< Min number of iterations. One iterations moves L steps. */
fdmrg::iter_max                           = 30                                /*!< Max number of iterations. One iterations moves L steps. */
fdmrg::bond_max                           = 1024                              /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
fdmrg::bond_min                           = 8                                 /*!< Initial bond dimension limit. Only used when bond_grow == true. */
fdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off). */
fdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */

// Settings for the finite l-bit algorithm
flbit::on                                 = false                             /*!< Turns flbit simulation on/off. */
flbit::run_iter_in_parallel               = false                             /*!< Time evolve each time step in parallel (because these are independent!) */
flbit::run_effective_model                = true                              /*!< Runs the effecive model before the actual simulation */
flbit::iter_min                           = 1                                 /*!< Min number of iterations. One iterations moves L steps. */
flbit::iter_max                           = 5000                              /*!< Max number of iterations. One iterations moves L steps. */
flbit::use_swap_gates                     = true                              /*!< Use gate swapping for pairwise long-range interactions rather then building a large multisite operator */
flbit::use_mpo_circuit                    = false                             /*!< Cast the unitary circuit to compressed mpo form (this is not generally faster or more accurate, but good for testing) */
flbit::bond_max                           = 8192                              /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
flbit::bond_min                           = 16                                /*!< Initial bond dimension limit. Used during iter <= 1 or when bond_grow == true, or starting from an entangled state */
flbit::time_scale                         = LOGSPACED                         /*!< Choose linear or logarithmically spaced time points (LINSPACED|LOGSPACED) */
flbit::time_start_real                    = 1e-2                              /*!< Starting time point (real) */
flbit::time_start_imag                    = 0                                 /*!< Starting time point (imag) */
flbit::time_final_real                    = 1e12                              /*!< Finishing time point (real) */
flbit::time_final_imag                    = 0                                 /*!< Finishing time point (imag) */
flbit::time_num_steps                     = 50                                /*!< Number of steps from start to finish. Start and final times are included */
flbit::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off). */
flbit::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */

// Settings for calculating the characteristic length-scale of lbits
flbit::cls::num_rnd_circuits              = 0                                 /*!< Calculate the characteristic length-scale for this many realizations of the unitary circuit */
flbit::cls::exit_when_done                = false                             /*!< If true, the program exits after calculating cls. Otherwise it starts the time evolution as usual */
flbit::cls::randomize_hfields             = false                             /*!< Randomize the on-site fields of the Hamiltonian that goes into each realization of the unitary circuits */
flbit::cls::mpo_circuit_switchdepth       = 10                                /*!< Cast the unitary circuit to an approximate compressed MPO form when the circuit depth (u_depth) is this value or more    */
flbit::cls::mpo_circuit_svd_bondlim       = 20                                /*!< The bond dimension limit used in the SVD when casting the circuit to compressed MPO form (default=20) */
flbit::cls::mpo_circuit_svd_trnclim       = 1e-14                             /*!< The truncation error limit used in the SVD when casting the circuit to compressed MPO form */

// Settings for calculating the averaged one-particle density matrix
flbit::opdm::num_rps                      = 0                                 /*!< Number of random product states (zero magnetization) to average over ( <=0 to disable) */
flbit::opdm::exit_when_done               = false                             /*!< If true, the program exits after calculating the opdm. Otherwise it starts the time evolution as usual */


// Settings for the finite excited-state DMRG algorithm
xdmrg::on                                 = true                              /*!< Turns xDMRG simulation on/off. */
xdmrg::ritz                               = SM                                /*!< Select what part of the energy eigenspectrum to target [LR SR SM IS TE] */
xdmrg::energy_spectrum_shift              = 1e-6                              /*!< (Used with ritz == OptRitz::SM) Shift the energy eigenvalue spectrum by this amount: H -> H - shift   */
xdmrg::energy_density_target              = 0.5                               /*!< (Used with ritz == OptRitz::TE) Target energy in [0-1], Target energy = energy_density_target * (EMAX+EMIN) + EMIN. */
xdmrg::iter_min                           = 1                                 /*!< Min number of iterations. One iterations moves L steps. */
xdmrg::iter_max                           = 250                               /*!< Max number of iterations. One iterations moves L steps. */
xdmrg::bond_max                           = 8192                               /*!< Maximum bond dimension (number of singular values to keep after SVD). */
xdmrg::bond_min                           = 16                                /*!< Minimum bond dimension. Used at the start, during warmup or when bond_increase_when == true, or when starting from an entangled state */
xdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off). */
xdmrg::max_states                         = 1                                 /*!< Max number of random states to find using xDMRG on a single disorder realization */
xdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */
xdmrg::try_directx2_when_stuck            = false                             /*!< Try OptAlgo::DIRECTX2: find ritz SM for H instead of H² in the last stuck step. Keep if good, else  use as an initial guess for OptAlgo::DIRECT. */
