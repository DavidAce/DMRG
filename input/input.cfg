//
// Created by david on 8/7/17.
//


//Parameters for the model Hamiltonian

model::J                        = 1                         /*!< Ferromagnetic coupling. J < 0  Gives a ferromagnet. J > 0 an antiferromagnet. */
model::g                        = 1                         /*!< Transverse field strength */
model::d                        = 2                         /*!< Local dimension
model::initial_state            = rps                       /*!< Choose initial state of the MPS: {upup, updown, GHZ(upup+downdown), W(updown+downup), rps (random product state), random_chi (random state with bond dimension chi, only for iDMRG!)} "cat" or "random". Default "rps". */

//Parmaters that control eigensolver and SVD precision
precision::eigMaxIter           = 1000                      /*!< Maximum number of steps for eigenvalue solver. */
precision::eigThreshold         = 1e-12                     /*!< Minimum threshold for halting eigenvalue solver. */
precision::eigMaxNcv            = 16                        /*!< Parameter controlling the column space? of the Lanczos solver. 16 is close to optimum when chi = 16. Coincidence? */
precision::SVDThreshold         = 1e-12                     /*!< Minimum threshold value for keeping singular values. */
    
//Parameters controlling iDMRG
idmrg::on                       = false                    /*!< Turns iDMRG simulation on/off. */
idmrg::max_steps                = 5000                     /*!< Number of steps for the simulation. */
idmrg::chi_max                  = 6                        /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
idmrg::chi_grow                 = false                    /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
idmrg::print_freq               = 1000                     /*!< Print frequency for console output. (0 = off).*/
idmrg::store_freq               = 1000                     /*!< Store frequency,for output file buffer. (0 = off). */

//Parameters controlling fDMRG
fdmrg::on                       = false                     /*!< Turns fDMRG simulation on/off. */
fdmrg::max_length               = 48                        /*!< Number sweeps along the 1D quantum chain. */
fdmrg::max_sweeps               = 10                        /*!< Number sweeps along the 1D quantum chain. */
fdmrg::chi_max                  = 6                         /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
fdmrg::chi_grow                 = false                     /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
fdmrg::print_freq               = 1                         /*!< Print frequency for console output. In units of sweeps. (0 = off).*/
fdmrg::store_freq               = 1                         /*!< Store frequency,for output file buffer. In units of sweeps. (0 = off). */

//Parameters controlling xDMRG
xdmrg::on                       = true                      /*!< Turns xDMRG simulation on/off. */
xdmrg::max_length               = 24                        /*!< Number sweeps along the 1D quantum chain. */
xdmrg::max_sweeps               = 25                        /*!< Number sweeps along the 1D quantum chain. */
xdmrg::chi_max                  = 12                        /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
xdmrg::chi_grow                 = false                     /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
xdmrg::seed                     = 3                         /*!< Seed for the random number generator if you use random fields in the Hamiltonian. */
xdmrg::r_strength               = 8                         /*!< Randomness strength for the random field distribution */
xdmrg::print_freq               = 1                         /*!< Print frequency for console output. In units of sweeps. (0 = off).*/
xdmrg::store_freq               = 1                         /*!< Store frequency,for output file buffer. In units of sweeps. (0 = off). */

//Parameters controlling iTEBD
itebd::on                       = false                     /*!< Turns iTEBD simulation on/off. */
itebd::max_steps                = 10000                     /*!< Number of iTEBD iterations, after which the simulation terminates regardless of convergence. Set high.*/
itebd::delta_t0                 = 0.1                       /*!< Initial time step for iTEBD time evolution.*/
itebd::delta_tmin               = 0.0001                    /*!< Final time step for iTEBD time evolution.*/
itebd::suzuki_order             = 4                         /*!< Order of the suzuki trotter decomposition (1,2 or 4) */
itebd::chi_max                  = 8                         /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
itebd::chi_grow                 = false                     /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
itebd::print_freq               = 1000                      /*!< Print frequency for console output. (0 = off).*/
itebd::store_freq               = 1000                      /*!< Store frequency,for output file buffer. (0 = off). */

//Parameters for saving data to hdf5
hdf5::save_to_file              = true                      /*!< (Not implemented yet) If true, saves the simulation data to an HDF5 file instead of just outputting to console */
hdf5::create_dir_if_not_found   = true                      /*!< If true, an output directory will be created in the project root folder if it isn't found */
hdf5::overwrite_file_if_found   = false                     /*!< If true, an hdf5-file with the provided filename will be overwritten if found in output_folder */
hdf5::output_filename           = output.h5                 /*!< Name of the output HDF5 file. Without quotes! */
hdf5::output_folder             = output                    /*!< Path of the output HDF5 file */
hdf5::full_storage              = false                     /*!< (Not implemented yet) If true, saves more simulation data to file (such as explicit form of MPS). Set to false to reduce output file size. */

//Parameters to control profiling.
profiling::on                   = true                      /*!< If true, turns on profiling and timings will be shown on console. */
profiling::precision            = 5                         /*!< Sets precision (number of decimals) of time output. */

//Console settings
console::verbosity              = 1                         /*!< (PARTIALLY IMPLEMENTED) Level of verbosity desired [0-2]. Level 0 prints almost nothing, level 2 prints everything */
console::timestamp              = false                     /*!< (NOT IMPLEMENTED) Whether to put a timestamp on console outputs */

