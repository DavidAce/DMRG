//
// Created by david on 8/7/17.
//


//Parmaters that control eigensolver and SVD precision
precision::eigSteps             = 5000                      /*!< Maximum number of steps for eigenvalue solver. */
precision::eigThreshold         = 1e-12                     /*!< Minimum threshold for halting eigenvalue solver. */
precision::eig_max_ncv          = 20                        /*!< Parameter controlling the column space? of the Lanczos solver. */
precision::SVDThreshold         = 1e-12                     /*!< Minimum threshold value for keeping singular values. */
    
//Parameters controlling iDMRG
idmrg::on                       = true                      /*!< Turns iDMRG simulation on/off. */
idmrg::max_length               = 2000                      /*!< Final length of 1D quantum chain. */
idmrg::chi_max                  = 8                         /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
idmrg::print_freq               = 100                       /*!< Print frequency for console output. (0 = off).*/

//Parameters controlling fDMRG
fdmrg::on                       = true                      /*!< Turns fDMRG simulation on/off. */
fdmrg::max_length               = 200                       /*!< Number sweeps along the 1D quantum chain. */
fdmrg::max_sweeps               = 4                         /*!< Number sweeps along the 1D quantum chain. */
fdmrg::chi_max                  = 8                         /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
fdmrg::print_freq               = 200                         /*!< Print frequency for console output. (0 = off).*/

//Parameters controlling iTEBD
itebd::on                       = true                      /*!< Turns iTEBD simulation on/off. */
itebd::max_steps                = 10000                     /*!< Number of iTEBD iterations. */
itebd::delta_t                  = 0.1                       /*!< Time step for iTEBD time evolution.*/
itebd::chi_max                  = 8                         /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
itebd::print_freq               = 1000                      /*!< Print frequency for console output. (0 = off).*/



//Parameters controlling Finite-entanglement scaling (FES) in iTEBD-mode. Use this to compare a range of chi-values from min to max.
fes_itebd::on                   = true                      /*!< Turns FES-ITEBD simulation on/off. */
fes_itebd::max_steps            = 5000                      /*!< Number of FES iterations per chi-value. */
fes_itebd::delta_t              = 0.01                      /*!< Initial time step for iTEBD time evolution.*/
fes_itebd::chi_min              = 4                         /*!< Minimum chi-value in range. */
fes_itebd::chi_max              = 12                        /*!< Maximum chi-value in range. */
fes_itebd::chi_num              = 3                         /*!< Number of chi values for in range. */
fes_itebd::print_freq           = 1000                      /*!< Print frequency for console output. (0 = off). */


//Parameters controlling Finite-entanglement scaling (FES) in iDMRG-mode. Use this to compare a range of chi-values from min to max.
fes_idmrg::on                   = true                      /*!< Turns FES-iDMRG simulation on/off. */
fes_idmrg::max_length           = 10000                     /*!< Number of FES iterations per chi-value. */
fes_idmrg::chi_min              = 4                         /*!< Minimum chi-value in range. */
fes_idmrg::chi_max              = 12                        /*!< Maximum chi-value in range. */
fes_idmrg::chi_num              = 3                         /*!< Number of chi values for in range. */
fes_idmrg::print_freq           = 1000                      /*!< Print frequency for console output. (0 = off).*/


//Parameters for saving data to hdf5
hdf5::save_to_file              = true                      /*!< (Not implemented yet) If true, saves the simulation data to an HDF5 file instead of just outputting to console */
hdf5::create_dir_if_not_found   = true                      /*!< If true, an output directory will be created in the project root folder if it isn't found */
hdf5::overwrite_file_if_found   = false                     /*!< If true, an hdf5-file with the provided filename will be overwritten if found in output_folder */
hdf5::output_filename           = data.h5                   /*!< Name of the output HDF5 file */
hdf5::output_folder             = output                    /*!< Path of the output HDF5 file */
hdf5::full_storage              = false                     /*!< (Not implemented yet) If true, saves more simulation data to file (such as explicit form of MPS). Set to false to reduce output file size. */

//Parameters to control profiling.
profiling::on                   = true                      /*!< If true, turns on profiling and timings will be shown on console. */
profiling::precision            = 5                         /*!< Sets precision (number of decimals) of time output. */

//Console settings
console::verbosity              = 1                         /*!< Level of verbosity desired [0-2]. Level 0 prints almost nothing, level 2 prints everything */
console::timestamp              = false                     /*!< Whether to put a timestamp on console outputs */

