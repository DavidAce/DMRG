
//Common parameters for the model Hamiltonian
model::model_type                         = ising_sdual                       /*!< Choice of model: {ising_tf_rf,ising_sdual} */
model::model_size                         = 16                                /*!< Number of sites on the chain. Only relevant for finite algorithms: fDMRG and xDMRG */


//Console settings
console::verbosity                        = 1                                 /*!< Level of verbosity desired [0-6]. Level 0 prints everything, 6 nothing. Level 2 or 3 is recommended for normal use */
console::timestamp                        = true                              /*!< (NOT IMPLEMENTED) Whether to put a timestamp on console outputs */

// Parameters for Multithreading
threading::stl_threads                    = 8                                 /*!< Number of threads for openmp threads used in blas/lapack and Eigen. num_threads <= 0 will try to use as many as possible */
threading::omp_threads                    = 8                                 /*!< Number of threads for c++11 threading. Used in Eigen::Tensor. stl_threads <= 0 will try to use as many as possible */


//Parameters to control profiling.
profiling::on                             = true                              /*!< If true, turns on profiling and timings will be shown on console. */
profiling::precision                      = 5                                 /*!< Sets precision (number of decimals) of time output. */
profiling::extra                          = false                             /*!< Prints profiling updates after each step */


// Input parameters (note that CLI parameters overrwide these)
input::seed                               = 1                                 /*!< Main seed for the random number generator. */
input::bitfield                           = -1                                /*!< Number whose bitfield represents the initial product state in the basis given by initial_parity_sector. Only positive state numbers are used */


//Parameters for saving data to hdf5
output::output_filepath                   = ../output/mbl.h5                  /*!< Path of the output HDF5 file relative to the execution point  */
output::save_profiling                    = true                              /*!< Whether to save profiling information to file. (only enabled on storage level NORMAL and FULL.) */
output::savepoint_keep_newest_only        = true                              /*!< If true, a savepoint will overwrite previous savepoints on file. Otherwise, all iterations are kept (dramaticallay increases file size) */
output::savepoint_frequency               = 5                                 /*!< How often, in units of iterations, to make a savepoint. 0 disables savepoints after iterations (chi-update savepoints can still happen) */
output::checkpoint_keep_newest_only       = true                              /*!< If true, a checkpoint will overwrite previous checkpoint on file. Otherwise, all iterations are kept (dramaticallay increases file size) */
output::checkpoint_keep_chi_updates       = true                              /*!< If true, a checkpoint is written to file before the bond dimension is updated */
output::checkpoint_frequency              = 1                                 /*!< How often, in units of iterations, to make a checkpoint. 0 disables checkpoints but chi-update checkpoints can still happen */
output::use_temp_dir                      = true                              /*!< If true uses a temporary directory for writes in the local drive (usually /tmp) and copies the results afterwards */
output::copy_from_temp_freq               = 1                                 /*!< How often, in units of iterations, to copy the hdf5 file in tmp dir to target destination */
output::temp_dir                          = /tmp                              /*!< Local temp directory on the local system. If it does not exist we default to /scratch/local or /tmp instead (or whatever is the default) */
output::compression_level                 = 4                                 /*!< GZip compression level in HDF5. Choose between [0-9] (0 = off, 9 = max compression) */
output::file_collision_policy             = REPLACE                           /*!< What to do when a prior output file is found. Choose between RESUME, BACKUP, RENAME, REPLACE */
output::file_resume_policy                = FULL                              /*!< Depends on dataset [common/finished_all=bool] FULL: Ignore bool -> Scan .cfg to add missing items. FAST: exit if true. */



// Storage Levels.
// NOTE 1: A simulation can only be resumed from FULL storage.
// NOTE 2: storage_level_model == NORMAL is enough to recreate MPOs when resuming, since they can be reconstructed from the Hamiltonian parameter table
//      NONE:   no data is saved at all
//      LIGHT:  Mainly mid-chain data (energy/variance/polarization, schmidt values, entanglement entropy, lambda matrix, truncation error) , simulation status, and profiling (if save_profiling == true)
//      NORMAL: Same as LIGHT + whole-chain measurements like entanglement entropies, truncation errors and schmidt values (lambda-matrices), and model Hamiltonian parameters
//      FULL:   Same as NORMAL + MPS (Gamma + Lambda matrices) + MPO at each site.
output::storage_level_model               = NORMAL                           /*!< Storage level for the model realization. LIGHT stores nothing. NORMAL stores the Hamiltonian parameter table, and FULL also the MPOs */
output::storage_level_savepoint           = FULL                             /*!< Storage level for savepoints, which are snapshots taken at each iteration or  snapshot taken at the end of each iteration */
output::storage_level_checkpoint          = FULL                             /*!< Storage level for checkpoints, which are mid-simulation measurements (can also be used for resume if FULL) */
output::storage_level_good_state          = NORMAL                           /*!< Storage level for final results written when a simulation terminates successfully */
output::storage_level_fail_state          = NORMAL                           /*!< Storage level for final results written when a simulation terminates unsuccessfully */
output::storage_level_proj_state          = NORMAL                           /*!< Storage level for the parity projected states, a projected version of the state written when a simulation terminates */
output::storage_level_init_state          = NORMAL                           /*!< Storage level for the initial states (for instance when launching a simulation or starting a new state) */
output::storage_level_emin_state          = NORMAL                           /*!< Storage level for the minimum energy state (ground state) */
output::storage_level_emax_state          = NORMAL                           /*!< Storage level for the maximum energy state */



// Options for strategy that affect convergence and targeted state
strategy::compress_mpo_squared            = true                              /*!< Use SVD to compress the squared mpo bond dimension (Only for finite systems) */
strategy::chi_quench_when_stuck           = false                             /*!< Reduce chi for a few iterations when stuck and increasing bond dimension would not help */
strategy::perturb_when_stuck              = false                             /*!< Perturb MPO parameters to get unstuck from local minima */
strategy::damping_when_stuck              = false                             /*!< Dampen MPO parameters by reducing disorder, to get unstuck from local minima */
strategy::discard_schmidt_when_stuck      = 0                                 /*!< Try discarding schmidt values smaller than this when stuck (0 = turn off) */
strategy::expand_subspace_when_stuck      = true                              /*!< Use subspace expansion when stuck in local minima. alpha == lowest_variance */
strategy::project_when_stuck_freq         = 5                                 /*!< Project to target parity sector every nth iteration when stuck. (0 = turn off) */
strategy::project_on_every_iter           = false                             /*!< Project to target parity sector at the end of every iteration. This implies doing it when stuck also. */
strategy::project_on_chi_update           = false                             /*!< Project to target parity sector when bond dimension is increased (only works if chi_grow == true). */
strategy::project_initial_state           = false                             /*!< Project to target parity sector when initializing a state. */
strategy::randomize_on_chi_update         = false                             /*!< Randomize MPS by flipping random spins when growing chi */
strategy::randomize_early                 = false                             /*!< Randomize MPS by flipping random spins before fully converging the first attempt (because the initial product state guess is biased to low entanglement) */
strategy::use_eigenspinors                = false                             /*!< Use random pauli-matrix eigenvectors when initializing each mps site along x,y or z  */
strategy::max_resets                      = 1                                 /*!< Maximum number of resets to initial state. One must be allowed for initialization*/
strategy::multisite_mps_size_def          = 1                                 /*!< Default number of sites in a multisite mps. More than ~8 is very expensive */
strategy::multisite_mps_size_max          = 4                                 /*!< Maximum number of sites in a multisite mps (used when stuck). More than ~8 is very expensive */
strategy::multisite_mps_size_init         = 6                                 /*!< Maximum number of sites in multisite mps (or "theta") during initialization (olap/vsub iterations). */
strategy::multisite_mps_step              = MID                               /*!< How many sites to move after a multi-site dmrg step, choose between {ONE, MID, MAX} */
strategy::target_sector                   = x                                 /*!< Find an eigenstate in this parity sector. Choose between {x,+x,-x, y, +y,-y, z,+z,-z, randomAxis,random,none}  */
strategy::initial_type                    = REAL                              /*!< Initial state can be REAL/CPLX */
strategy::initial_state                   = RANDOM_PRODUCT_STATE              /*!< Initial configuration for the spin chain (only for finite systems)  */
strategy::secondary_states                = RANDOM_PRODUCT_STATE              /*!< Spin configuration for subsequent states (only for finite systems)  */



//Parmaters that control MPS, eigensolver and SVD precision
precision::eig_max_iter                   = 2000                              /*!< Maximum number of steps for eigenvalue solver. */
precision::eig_threshold                  = 1e-12                             /*!< Minimum threshold for halting eigenvalue solver. */
precision::eig_max_ncv                    = 16                                /*!< Parameter controlling the column space? of the Lanczos solver. 16 is close to optimum when chi = 16. Coincidence? */
precision::svd_threshold                  = 1e-8                              /*!< Minimum threshold value for keeping singular values. */
precision::svd_switchsize                 = 128                               /*!< Linear size of a matrix, below which BDCSVD will use slower but more precise JacobiSVD instead (default is 16) */
precision::variance_convergence_threshold = 1e-12                             /*!< Variance convergence threshold. The MPS state is considered good enough when its variance reaches below this value */
precision::variance_slope_threshold       = 2                                 /*!< Variance saturation slope threshold [0-100%]. The variance has saturated when its (absolute) slope reaches below this value. 2 would mean the data saturates when it changes less than 2% per iteration */
precision::entropy_slope_threshold        = 1                                 /*!< Entanglement Entropy saturation slope threshold [0-100%]. The entanglement entropy has saturated when its (absolute) slope reaches below this value. 2 would mean the data saturates when it changes less than 2% per iteration */
precision::subspace_error_factor          = 1                                 /*!< Minimum quality of subspace for going ahead in variance optimization. If the quality is too bad, direct optimization is done instead */
precision::max_subspace_error             = 1e-12                             /*!< The maximum subspace error. Never do subspace variance optimization with subspace error greater than this. */
precision::min_subspace_error             = 1e-12                             /*!< The minimum subspace error. Always do subspace variance optimization with subspace error less than this  */
precision::max_size_full_diag             = 2048                              /*!< Maximum linear size allowed for full diagonalization of the local hamiltonian matrix. Use 0 to allow any value */
precision::max_size_part_diag             = 4096                              /*!< Maximum linear size allowed for partial diagonalization of the local hamiltonian matrix. Use 0 to allow any value */
precision::max_size_direct                = 2097152                           /*!< Maximum linear size for direct multisite dmrg. If the linear size is larger than this, the algorithm prefers 2-site dmrg. */
precision::max_norm_error                 = 1e-10                             /*!< Maximum norm deviation from unity during integrity checks */
precision::use_reduced_energy             = true                              /*!< Whether to subtract E/L from each mpo to avoid catastrophic cancellation when computing the variance */



//Parameters for the transvese-field next-nearest neighbor Ising model with a random field
model::ising_tf_rf::J1                    = 1.0                               /*!< Ferromagnetic coupling for nearest neighbors.*/
model::ising_tf_rf::J2                    = 0.0                               /*!< Ferromagnetic coupling for next-nearest neighbors.*/
model::ising_tf_rf::h_tran                = 1.0                               /*!< Transverse field strength */
model::ising_tf_rf::h_mean                = 0.0                               /*!< Random field mean of distribution */
model::ising_tf_rf::h_stdv                = 0.0                               /*!< Random field standard deviation. In distribution this is N(h_mean,h_stdv) or U(h_mean-h_stdv,h_mean+h_stdv) */
model::ising_tf_rf::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_tf_rf::distribution          = uniform                           /*!< Random distribution for couplings and fields */


//Parameters for the selfdual transverse-field random-field next-nearest neighbor Ising model
model::ising_sdual::J_stdv                = 1.0                               /*!< Standard deviation for the log-normal distribution defining ferromagnetic coupling */
model::ising_sdual::h_stdv                = 1.0                               /*!< Standard deviation for the log-normal distribution defining transverse magnetic field */
model::ising_sdual::lambda                = 0.1                               /*!< Lambda parameter */
model::ising_sdual::delta                 = 0.0                               /*!< Delta defined as log(J_mean) - log(h_mean). We get J_mean and h_mean by fixing max(J_mean,h_mean) = 1 */
model::ising_sdual::spin_dim              = 2                                 /*!< Spin dimension */
model::ising_sdual::parity_sep            = false                             /*!< Separation of +-X parity sectors */
model::ising_sdual::distribution          = lognormal                         /*!< Random distribution for couplings and fields */

//Parameters for the l-bit hamiltonian
model::lbit::J1_mean                      = 0.0                               /*!< Constant offset for on-site */
model::lbit::J2_mean                      = 0.0                               /*!< Constant offset for two-body interaction */
model::lbit::J3_mean                      = 0.0                               /*!< Constant offset for three-body interaction */
model::lbit::J1_wdth                      = 0.5                               /*!< Width of the uniform box distribution U(-w1,w1) for on-site interactions */
model::lbit::J2_wdth                      = 0.5                               /*!< Width of the uniform box distribution U(-w2,w2) for two-body interaction */
model::lbit::J3_wdth                      = 0.5                               /*!< Width of the uniform box distribution U(-w3,w3) for three-body interaction */
model::lbit::J2_base                      = 5                                 /*!< Base for power-decay of two-body interactions: J2_rand*J2_base^-|i-j| */
model::lbit::f_mixer                      = 0.1                               /*!< Mixing factor for unitary transformation to real-space */
model::lbit::u_layer                      = 6                                 /*!< Number of unitary 2-site layers which transform lbit <-> real spaces */
model::lbit::spin_dim                     = 2                                 /*!< Spin dimension */
model::lbit::distribution                 = uniform                           /*!< Random distribution for interaction strengths */


//Parameters controlling iDMRG
idmrg::on                                 = false                             /*!< Turns iDMRG simulation on/off. */
idmrg::max_iters                          = 500                               /*!< Number of iterations. */
idmrg::chi_lim_max                        = 64                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
idmrg::chi_lim_grow                       = true                              /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
idmrg::chi_lim_init                       = 8                                 /*!< Initial chi limit. Only used when chi_grow == true. */
idmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of steps (0 = off). */

//Parameters controlling fDMRG
fdmrg::on                                 = false                             /*!< Turns fDMRG simulation on/off. */
fdmrg::max_iters                          = 10                                /*!< Max number of iterations. One iterations moves L steps. */
fdmrg::min_iters                          = 6                                 /*!< Min number of iterations. One iterations moves L steps. */
fdmrg::chi_lim_max                        = 32                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
fdmrg::chi_lim_grow                       = false                             /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
fdmrg::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
fdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off).*/
fdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */

//Parameters controlling fLBIT
flbit::on                                 = false                             /*!< Turns fLBIT simulation on/off. */
flbit::max_iters                          = 500                               /*!< Max number of iterations. One iterations moves L steps. */
flbit::min_iters                          = 50                                /*!< Min number of iterations. One iterations moves L steps. */
flbit::chi_lim_max                        = 256                               /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
flbit::chi_lim_grow                       = false                             /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
flbit::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
flbit::time_start_real                    = 1e-1                              /*!< Starting time point (real) */
flbit::time_start_imag                    = 0                                 /*!< Starting time point (imag) */
flbit::time_final_real                    = 1e6                               /*!< Finishing time point (real) */
flbit::time_final_imag                    = 0                                 /*!< Finishing time point (imag) */
flbit::time_num_steps                     = 100                               /*!< Number of steps from start to finish */
flbit::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations. (0 = off).*/
flbit::compute_lbit_length                = false                             /*!< Calculate the characteristic length-scale of lbits */
flbit::compute_lbit_stats                 = false                             /*!< Calculate the statistics of characteristic length-scale for various u and f parameters */
flbit::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */

//Parameters controlling xDMRG
xdmrg::on                                 = true                              /*!< Turns xDMRG simulation on/off. */
xdmrg::max_iters                          = 1024                              /*!< Max number of iterations. One iterations moves L steps. */
xdmrg::min_iters                          = 4                                 /*!< Min number of iterations. One iterations moves L steps. */
xdmrg::olap_iters                         = 6                                 /*!< Number of initial iterations selecting the candidate state with best overlap to the current state */
xdmrg::vsub_iters                         = 4                                 /*!< Number of iterations using the subspace optimization for variance, after overlap iterations */
xdmrg::chi_lim_max                        = 768                               /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
xdmrg::chi_lim_grow                       = false                             /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
xdmrg::chi_lim_init                       = 8                                 /*!< Initial chi limit. Used during iter <= 1 or when chi_grow == true, or starting from an entangled state */
xdmrg::chi_lim_olap                       = 16                                /*!< Chi limit during initial OVERLAP|SUBSPACE mode. set to <= 0 for unlimited */
xdmrg::chi_lim_vsub                       = 32                                /*!< Chi limit during initial VARIANCE|SUBSPACE mode. set to <= 0 for unlimited */
xdmrg::print_freq                         = 1                                 /*!< Print frequency for console output. In units of iterations (0 = off). */
xdmrg::store_wavefn                       = false                             /*!< Whether to store the wavefunction. Runs out of memory quick, recommended is false for max_length > 14 */
xdmrg::energy_density_target              = 0.5                               /*!< Target energy in [0-1], where 0.5 means middle of spectrum. */
xdmrg::energy_density_window              = 0.5                               /*!< Accept states inside of energy_target +- energy_window. */
xdmrg::max_states                         = 1                                 /*!< Max number of random states to find using xDMRG on a single disorder realization */
xdmrg::finish_if_entanglm_saturated       = false                             /*!< Finish early as soon as entanglement has saturated */
xdmrg::finish_if_variance_saturated       = false                             /*!< Finish early as soon as energy variance has saturated */

//Parameters controlling infinite time-evolving block decimation (iTEBD)
itebd::on                                 = false                             /*!< Turns iTEBD simulation on/off. */
itebd::max_iters                          = 50                                /*!< Number of iTEBD iterations, after which the simulation terminates regardless of convergence. Set high. */
itebd::time_step_init_real                = 0.1                               /*!< Real part of initial time step delta_t */
itebd::time_step_init_imag                = 0.0                               /*!< Imag part of initial time step delta_t */
itebd::time_step_min                      = 0.0001                            /*!< (Absolute value) Minimum and final time step for iTEBD time evolution. */
itebd::suzuki_order                       = 4                                 /*!< Order of the suzuki trotter decomposition (1,2 or 4) */
itebd::chi_lim_max                        = 16                                /*!< Bond dimension of the current position (maximum number of singular values to keep in SVD). */
itebd::chi_lim_grow                       = false                             /*!< Whether to increase chi slowly up to chi_max or go up to chi_max directly. */
itebd::chi_lim_init                       = 16                                /*!< Initial chi limit. Only used when chi_grow == true. */
itebd::print_freq                         = 1                                 /*!< Print frequency for console output. In units of steps (0 = off). */
